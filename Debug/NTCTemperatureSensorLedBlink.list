
NTCTemperatureSensorLedBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a60  08004a60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004a60  08004a60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a60  08004a60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000074  08004adc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004adc  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b1d  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013fb  00000000  00000000  00026bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00027fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00028650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010112  00000000  00000000  00028c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007975  00000000  00000000  00038d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006286f  00000000  00000000  000406f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a2f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a3c  00000000  00000000  000a2fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800498c 	.word	0x0800498c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800498c 	.word	0x0800498c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f887 	bl	8001518 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ffd1 	bl	80013bc <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f879 	bl	8001518 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f86f 	bl	8001518 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fff3 	bl	8001434 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffe9 	bl	8001434 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f8a7 	bl	80005cc <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f82b 	bl	80004e4 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f899 	bl	80005cc <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f88f 	bl	80005cc <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f839 	bl	8000534 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f82f 	bl	8000534 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__eqsf2>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0042      	lsls	r2, r0, #1
 80004e8:	024e      	lsls	r6, r1, #9
 80004ea:	004c      	lsls	r4, r1, #1
 80004ec:	0245      	lsls	r5, r0, #9
 80004ee:	0a6d      	lsrs	r5, r5, #9
 80004f0:	0e12      	lsrs	r2, r2, #24
 80004f2:	0fc3      	lsrs	r3, r0, #31
 80004f4:	0a76      	lsrs	r6, r6, #9
 80004f6:	0e24      	lsrs	r4, r4, #24
 80004f8:	0fc9      	lsrs	r1, r1, #31
 80004fa:	2aff      	cmp	r2, #255	; 0xff
 80004fc:	d00f      	beq.n	800051e <__eqsf2+0x3a>
 80004fe:	2cff      	cmp	r4, #255	; 0xff
 8000500:	d011      	beq.n	8000526 <__eqsf2+0x42>
 8000502:	2001      	movs	r0, #1
 8000504:	42a2      	cmp	r2, r4
 8000506:	d000      	beq.n	800050a <__eqsf2+0x26>
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	42b5      	cmp	r5, r6
 800050c:	d1fc      	bne.n	8000508 <__eqsf2+0x24>
 800050e:	428b      	cmp	r3, r1
 8000510:	d00d      	beq.n	800052e <__eqsf2+0x4a>
 8000512:	2a00      	cmp	r2, #0
 8000514:	d1f8      	bne.n	8000508 <__eqsf2+0x24>
 8000516:	0028      	movs	r0, r5
 8000518:	1e45      	subs	r5, r0, #1
 800051a:	41a8      	sbcs	r0, r5
 800051c:	e7f4      	b.n	8000508 <__eqsf2+0x24>
 800051e:	2001      	movs	r0, #1
 8000520:	2d00      	cmp	r5, #0
 8000522:	d1f1      	bne.n	8000508 <__eqsf2+0x24>
 8000524:	e7eb      	b.n	80004fe <__eqsf2+0x1a>
 8000526:	2001      	movs	r0, #1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d1ed      	bne.n	8000508 <__eqsf2+0x24>
 800052c:	e7e9      	b.n	8000502 <__eqsf2+0x1e>
 800052e:	2000      	movs	r0, #0
 8000530:	e7ea      	b.n	8000508 <__eqsf2+0x24>
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__gesf2>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	0042      	lsls	r2, r0, #1
 8000538:	0246      	lsls	r6, r0, #9
 800053a:	024d      	lsls	r5, r1, #9
 800053c:	004c      	lsls	r4, r1, #1
 800053e:	0fc3      	lsrs	r3, r0, #31
 8000540:	0a76      	lsrs	r6, r6, #9
 8000542:	0e12      	lsrs	r2, r2, #24
 8000544:	0a6d      	lsrs	r5, r5, #9
 8000546:	0e24      	lsrs	r4, r4, #24
 8000548:	0fc8      	lsrs	r0, r1, #31
 800054a:	2aff      	cmp	r2, #255	; 0xff
 800054c:	d01f      	beq.n	800058e <__gesf2+0x5a>
 800054e:	2cff      	cmp	r4, #255	; 0xff
 8000550:	d010      	beq.n	8000574 <__gesf2+0x40>
 8000552:	2a00      	cmp	r2, #0
 8000554:	d11f      	bne.n	8000596 <__gesf2+0x62>
 8000556:	4271      	negs	r1, r6
 8000558:	4171      	adcs	r1, r6
 800055a:	2c00      	cmp	r4, #0
 800055c:	d101      	bne.n	8000562 <__gesf2+0x2e>
 800055e:	2d00      	cmp	r5, #0
 8000560:	d01e      	beq.n	80005a0 <__gesf2+0x6c>
 8000562:	2900      	cmp	r1, #0
 8000564:	d10e      	bne.n	8000584 <__gesf2+0x50>
 8000566:	4283      	cmp	r3, r0
 8000568:	d01e      	beq.n	80005a8 <__gesf2+0x74>
 800056a:	2102      	movs	r1, #2
 800056c:	1e58      	subs	r0, r3, #1
 800056e:	4008      	ands	r0, r1
 8000570:	3801      	subs	r0, #1
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	2d00      	cmp	r5, #0
 8000576:	d126      	bne.n	80005c6 <__gesf2+0x92>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d1f4      	bne.n	8000566 <__gesf2+0x32>
 800057c:	4271      	negs	r1, r6
 800057e:	4171      	adcs	r1, r6
 8000580:	2900      	cmp	r1, #0
 8000582:	d0f0      	beq.n	8000566 <__gesf2+0x32>
 8000584:	2800      	cmp	r0, #0
 8000586:	d1f4      	bne.n	8000572 <__gesf2+0x3e>
 8000588:	2001      	movs	r0, #1
 800058a:	4240      	negs	r0, r0
 800058c:	e7f1      	b.n	8000572 <__gesf2+0x3e>
 800058e:	2e00      	cmp	r6, #0
 8000590:	d119      	bne.n	80005c6 <__gesf2+0x92>
 8000592:	2cff      	cmp	r4, #255	; 0xff
 8000594:	d0ee      	beq.n	8000574 <__gesf2+0x40>
 8000596:	2c00      	cmp	r4, #0
 8000598:	d1e5      	bne.n	8000566 <__gesf2+0x32>
 800059a:	2d00      	cmp	r5, #0
 800059c:	d1e3      	bne.n	8000566 <__gesf2+0x32>
 800059e:	e7e4      	b.n	800056a <__gesf2+0x36>
 80005a0:	2000      	movs	r0, #0
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d0e5      	beq.n	8000572 <__gesf2+0x3e>
 80005a6:	e7e0      	b.n	800056a <__gesf2+0x36>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	dc05      	bgt.n	80005b8 <__gesf2+0x84>
 80005ac:	dbea      	blt.n	8000584 <__gesf2+0x50>
 80005ae:	42ae      	cmp	r6, r5
 80005b0:	d802      	bhi.n	80005b8 <__gesf2+0x84>
 80005b2:	d3e7      	bcc.n	8000584 <__gesf2+0x50>
 80005b4:	2000      	movs	r0, #0
 80005b6:	e7dc      	b.n	8000572 <__gesf2+0x3e>
 80005b8:	4241      	negs	r1, r0
 80005ba:	4141      	adcs	r1, r0
 80005bc:	4248      	negs	r0, r1
 80005be:	2102      	movs	r1, #2
 80005c0:	4008      	ands	r0, r1
 80005c2:	3801      	subs	r0, #1
 80005c4:	e7d5      	b.n	8000572 <__gesf2+0x3e>
 80005c6:	2002      	movs	r0, #2
 80005c8:	4240      	negs	r0, r0
 80005ca:	e7d2      	b.n	8000572 <__gesf2+0x3e>

080005cc <__lesf2>:
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	0042      	lsls	r2, r0, #1
 80005d0:	0246      	lsls	r6, r0, #9
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	004c      	lsls	r4, r1, #1
 80005d6:	0fc3      	lsrs	r3, r0, #31
 80005d8:	0a76      	lsrs	r6, r6, #9
 80005da:	0e12      	lsrs	r2, r2, #24
 80005dc:	0a6d      	lsrs	r5, r5, #9
 80005de:	0e24      	lsrs	r4, r4, #24
 80005e0:	0fc8      	lsrs	r0, r1, #31
 80005e2:	2aff      	cmp	r2, #255	; 0xff
 80005e4:	d00d      	beq.n	8000602 <__lesf2+0x36>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d00f      	beq.n	800060a <__lesf2+0x3e>
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d123      	bne.n	8000636 <__lesf2+0x6a>
 80005ee:	4271      	negs	r1, r6
 80005f0:	4171      	adcs	r1, r6
 80005f2:	2c00      	cmp	r4, #0
 80005f4:	d10f      	bne.n	8000616 <__lesf2+0x4a>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d10d      	bne.n	8000616 <__lesf2+0x4a>
 80005fa:	2000      	movs	r0, #0
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d014      	beq.n	800062a <__lesf2+0x5e>
 8000600:	e00d      	b.n	800061e <__lesf2+0x52>
 8000602:	2e00      	cmp	r6, #0
 8000604:	d110      	bne.n	8000628 <__lesf2+0x5c>
 8000606:	2cff      	cmp	r4, #255	; 0xff
 8000608:	d115      	bne.n	8000636 <__lesf2+0x6a>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d10c      	bne.n	8000628 <__lesf2+0x5c>
 800060e:	2a00      	cmp	r2, #0
 8000610:	d103      	bne.n	800061a <__lesf2+0x4e>
 8000612:	4271      	negs	r1, r6
 8000614:	4171      	adcs	r1, r6
 8000616:	2900      	cmp	r1, #0
 8000618:	d108      	bne.n	800062c <__lesf2+0x60>
 800061a:	4283      	cmp	r3, r0
 800061c:	d010      	beq.n	8000640 <__lesf2+0x74>
 800061e:	2102      	movs	r1, #2
 8000620:	1e58      	subs	r0, r3, #1
 8000622:	4008      	ands	r0, r1
 8000624:	3801      	subs	r0, #1
 8000626:	e000      	b.n	800062a <__lesf2+0x5e>
 8000628:	2002      	movs	r0, #2
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	2800      	cmp	r0, #0
 800062e:	d1fc      	bne.n	800062a <__lesf2+0x5e>
 8000630:	2001      	movs	r0, #1
 8000632:	4240      	negs	r0, r0
 8000634:	e7f9      	b.n	800062a <__lesf2+0x5e>
 8000636:	2c00      	cmp	r4, #0
 8000638:	d1ef      	bne.n	800061a <__lesf2+0x4e>
 800063a:	2d00      	cmp	r5, #0
 800063c:	d1ed      	bne.n	800061a <__lesf2+0x4e>
 800063e:	e7ee      	b.n	800061e <__lesf2+0x52>
 8000640:	42a2      	cmp	r2, r4
 8000642:	dc05      	bgt.n	8000650 <__lesf2+0x84>
 8000644:	dbf2      	blt.n	800062c <__lesf2+0x60>
 8000646:	42ae      	cmp	r6, r5
 8000648:	d802      	bhi.n	8000650 <__lesf2+0x84>
 800064a:	d3ef      	bcc.n	800062c <__lesf2+0x60>
 800064c:	2000      	movs	r0, #0
 800064e:	e7ec      	b.n	800062a <__lesf2+0x5e>
 8000650:	4241      	negs	r1, r0
 8000652:	4141      	adcs	r1, r0
 8000654:	4248      	negs	r0, r1
 8000656:	2102      	movs	r1, #2
 8000658:	4008      	ands	r0, r1
 800065a:	3801      	subs	r0, #1
 800065c:	e7e5      	b.n	800062a <__lesf2+0x5e>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__aeabi_f2iz>:
 8000660:	0241      	lsls	r1, r0, #9
 8000662:	0042      	lsls	r2, r0, #1
 8000664:	0fc3      	lsrs	r3, r0, #31
 8000666:	0a49      	lsrs	r1, r1, #9
 8000668:	2000      	movs	r0, #0
 800066a:	0e12      	lsrs	r2, r2, #24
 800066c:	2a7e      	cmp	r2, #126	; 0x7e
 800066e:	d903      	bls.n	8000678 <__aeabi_f2iz+0x18>
 8000670:	2a9d      	cmp	r2, #157	; 0x9d
 8000672:	d902      	bls.n	800067a <__aeabi_f2iz+0x1a>
 8000674:	4a09      	ldr	r2, [pc, #36]	; (800069c <__aeabi_f2iz+0x3c>)
 8000676:	1898      	adds	r0, r3, r2
 8000678:	4770      	bx	lr
 800067a:	2080      	movs	r0, #128	; 0x80
 800067c:	0400      	lsls	r0, r0, #16
 800067e:	4301      	orrs	r1, r0
 8000680:	2a95      	cmp	r2, #149	; 0x95
 8000682:	dc07      	bgt.n	8000694 <__aeabi_f2iz+0x34>
 8000684:	2096      	movs	r0, #150	; 0x96
 8000686:	1a82      	subs	r2, r0, r2
 8000688:	40d1      	lsrs	r1, r2
 800068a:	4248      	negs	r0, r1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f3      	bne.n	8000678 <__aeabi_f2iz+0x18>
 8000690:	0008      	movs	r0, r1
 8000692:	e7f1      	b.n	8000678 <__aeabi_f2iz+0x18>
 8000694:	3a96      	subs	r2, #150	; 0x96
 8000696:	4091      	lsls	r1, r2
 8000698:	e7f7      	b.n	800068a <__aeabi_f2iz+0x2a>
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	7fffffff 	.word	0x7fffffff

080006a0 <__aeabi_ui2f>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	1e05      	subs	r5, r0, #0
 80006a4:	d00e      	beq.n	80006c4 <__aeabi_ui2f+0x24>
 80006a6:	f001 fe7b 	bl	80023a0 <__clzsi2>
 80006aa:	239e      	movs	r3, #158	; 0x9e
 80006ac:	0004      	movs	r4, r0
 80006ae:	1a1b      	subs	r3, r3, r0
 80006b0:	2b96      	cmp	r3, #150	; 0x96
 80006b2:	dc0c      	bgt.n	80006ce <__aeabi_ui2f+0x2e>
 80006b4:	2808      	cmp	r0, #8
 80006b6:	dd01      	ble.n	80006bc <__aeabi_ui2f+0x1c>
 80006b8:	3c08      	subs	r4, #8
 80006ba:	40a5      	lsls	r5, r4
 80006bc:	026d      	lsls	r5, r5, #9
 80006be:	0a6d      	lsrs	r5, r5, #9
 80006c0:	b2d8      	uxtb	r0, r3
 80006c2:	e001      	b.n	80006c8 <__aeabi_ui2f+0x28>
 80006c4:	2000      	movs	r0, #0
 80006c6:	2500      	movs	r5, #0
 80006c8:	05c0      	lsls	r0, r0, #23
 80006ca:	4328      	orrs	r0, r5
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	2b99      	cmp	r3, #153	; 0x99
 80006d0:	dd09      	ble.n	80006e6 <__aeabi_ui2f+0x46>
 80006d2:	0002      	movs	r2, r0
 80006d4:	0029      	movs	r1, r5
 80006d6:	321b      	adds	r2, #27
 80006d8:	4091      	lsls	r1, r2
 80006da:	1e4a      	subs	r2, r1, #1
 80006dc:	4191      	sbcs	r1, r2
 80006de:	2205      	movs	r2, #5
 80006e0:	1a12      	subs	r2, r2, r0
 80006e2:	40d5      	lsrs	r5, r2
 80006e4:	430d      	orrs	r5, r1
 80006e6:	2c05      	cmp	r4, #5
 80006e8:	dd01      	ble.n	80006ee <__aeabi_ui2f+0x4e>
 80006ea:	1f62      	subs	r2, r4, #5
 80006ec:	4095      	lsls	r5, r2
 80006ee:	0029      	movs	r1, r5
 80006f0:	4e08      	ldr	r6, [pc, #32]	; (8000714 <__aeabi_ui2f+0x74>)
 80006f2:	4031      	ands	r1, r6
 80006f4:	076a      	lsls	r2, r5, #29
 80006f6:	d009      	beq.n	800070c <__aeabi_ui2f+0x6c>
 80006f8:	200f      	movs	r0, #15
 80006fa:	4028      	ands	r0, r5
 80006fc:	2804      	cmp	r0, #4
 80006fe:	d005      	beq.n	800070c <__aeabi_ui2f+0x6c>
 8000700:	3104      	adds	r1, #4
 8000702:	014a      	lsls	r2, r1, #5
 8000704:	d502      	bpl.n	800070c <__aeabi_ui2f+0x6c>
 8000706:	239f      	movs	r3, #159	; 0x9f
 8000708:	4031      	ands	r1, r6
 800070a:	1b1b      	subs	r3, r3, r4
 800070c:	0189      	lsls	r1, r1, #6
 800070e:	0a4d      	lsrs	r5, r1, #9
 8000710:	b2d8      	uxtb	r0, r3
 8000712:	e7d9      	b.n	80006c8 <__aeabi_ui2f+0x28>
 8000714:	fbffffff 	.word	0xfbffffff

08000718 <__aeabi_dadd>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	464f      	mov	r7, r9
 800071c:	46d6      	mov	lr, sl
 800071e:	4646      	mov	r6, r8
 8000720:	000d      	movs	r5, r1
 8000722:	0001      	movs	r1, r0
 8000724:	0018      	movs	r0, r3
 8000726:	b5c0      	push	{r6, r7, lr}
 8000728:	0017      	movs	r7, r2
 800072a:	032b      	lsls	r3, r5, #12
 800072c:	0a5a      	lsrs	r2, r3, #9
 800072e:	0f4b      	lsrs	r3, r1, #29
 8000730:	4313      	orrs	r3, r2
 8000732:	00ca      	lsls	r2, r1, #3
 8000734:	4691      	mov	r9, r2
 8000736:	0302      	lsls	r2, r0, #12
 8000738:	006e      	lsls	r6, r5, #1
 800073a:	0041      	lsls	r1, r0, #1
 800073c:	0a52      	lsrs	r2, r2, #9
 800073e:	0fec      	lsrs	r4, r5, #31
 8000740:	0f7d      	lsrs	r5, r7, #29
 8000742:	4315      	orrs	r5, r2
 8000744:	0d76      	lsrs	r6, r6, #21
 8000746:	0d49      	lsrs	r1, r1, #21
 8000748:	0fc0      	lsrs	r0, r0, #31
 800074a:	4682      	mov	sl, r0
 800074c:	46ac      	mov	ip, r5
 800074e:	00ff      	lsls	r7, r7, #3
 8000750:	1a72      	subs	r2, r6, r1
 8000752:	4284      	cmp	r4, r0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x40>
 8000756:	e098      	b.n	800088a <__aeabi_dadd+0x172>
 8000758:	2a00      	cmp	r2, #0
 800075a:	dc00      	bgt.n	800075e <__aeabi_dadd+0x46>
 800075c:	e081      	b.n	8000862 <__aeabi_dadd+0x14a>
 800075e:	2900      	cmp	r1, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0x4c>
 8000762:	e0b6      	b.n	80008d2 <__aeabi_dadd+0x1ba>
 8000764:	49c9      	ldr	r1, [pc, #804]	; (8000a8c <__aeabi_dadd+0x374>)
 8000766:	428e      	cmp	r6, r1
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x54>
 800076a:	e172      	b.n	8000a52 <__aeabi_dadd+0x33a>
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0028      	movs	r0, r5
 8000770:	0409      	lsls	r1, r1, #16
 8000772:	4308      	orrs	r0, r1
 8000774:	4684      	mov	ip, r0
 8000776:	2a38      	cmp	r2, #56	; 0x38
 8000778:	dd00      	ble.n	800077c <__aeabi_dadd+0x64>
 800077a:	e15e      	b.n	8000a3a <__aeabi_dadd+0x322>
 800077c:	2a1f      	cmp	r2, #31
 800077e:	dd00      	ble.n	8000782 <__aeabi_dadd+0x6a>
 8000780:	e1ee      	b.n	8000b60 <__aeabi_dadd+0x448>
 8000782:	2020      	movs	r0, #32
 8000784:	0039      	movs	r1, r7
 8000786:	4665      	mov	r5, ip
 8000788:	1a80      	subs	r0, r0, r2
 800078a:	4087      	lsls	r7, r0
 800078c:	40d1      	lsrs	r1, r2
 800078e:	4085      	lsls	r5, r0
 8000790:	430d      	orrs	r5, r1
 8000792:	0039      	movs	r1, r7
 8000794:	1e4f      	subs	r7, r1, #1
 8000796:	41b9      	sbcs	r1, r7
 8000798:	4667      	mov	r7, ip
 800079a:	40d7      	lsrs	r7, r2
 800079c:	4329      	orrs	r1, r5
 800079e:	1bdb      	subs	r3, r3, r7
 80007a0:	464a      	mov	r2, r9
 80007a2:	1a55      	subs	r5, r2, r1
 80007a4:	45a9      	cmp	r9, r5
 80007a6:	4189      	sbcs	r1, r1
 80007a8:	4249      	negs	r1, r1
 80007aa:	1a5b      	subs	r3, r3, r1
 80007ac:	4698      	mov	r8, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_dadd+0x9e>
 80007b4:	e0cc      	b.n	8000950 <__aeabi_dadd+0x238>
 80007b6:	4643      	mov	r3, r8
 80007b8:	025b      	lsls	r3, r3, #9
 80007ba:	0a5b      	lsrs	r3, r3, #9
 80007bc:	4698      	mov	r8, r3
 80007be:	4643      	mov	r3, r8
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0xae>
 80007c4:	e12c      	b.n	8000a20 <__aeabi_dadd+0x308>
 80007c6:	4640      	mov	r0, r8
 80007c8:	f001 fdea 	bl	80023a0 <__clzsi2>
 80007cc:	0001      	movs	r1, r0
 80007ce:	3908      	subs	r1, #8
 80007d0:	2220      	movs	r2, #32
 80007d2:	0028      	movs	r0, r5
 80007d4:	4643      	mov	r3, r8
 80007d6:	1a52      	subs	r2, r2, r1
 80007d8:	408b      	lsls	r3, r1
 80007da:	40d0      	lsrs	r0, r2
 80007dc:	408d      	lsls	r5, r1
 80007de:	4303      	orrs	r3, r0
 80007e0:	428e      	cmp	r6, r1
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dadd+0xce>
 80007e4:	e117      	b.n	8000a16 <__aeabi_dadd+0x2fe>
 80007e6:	1b8e      	subs	r6, r1, r6
 80007e8:	1c72      	adds	r2, r6, #1
 80007ea:	2a1f      	cmp	r2, #31
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_dadd+0xd8>
 80007ee:	e1a7      	b.n	8000b40 <__aeabi_dadd+0x428>
 80007f0:	2120      	movs	r1, #32
 80007f2:	0018      	movs	r0, r3
 80007f4:	002e      	movs	r6, r5
 80007f6:	1a89      	subs	r1, r1, r2
 80007f8:	408d      	lsls	r5, r1
 80007fa:	4088      	lsls	r0, r1
 80007fc:	40d6      	lsrs	r6, r2
 80007fe:	40d3      	lsrs	r3, r2
 8000800:	1e69      	subs	r1, r5, #1
 8000802:	418d      	sbcs	r5, r1
 8000804:	4330      	orrs	r0, r6
 8000806:	4698      	mov	r8, r3
 8000808:	2600      	movs	r6, #0
 800080a:	4305      	orrs	r5, r0
 800080c:	076b      	lsls	r3, r5, #29
 800080e:	d009      	beq.n	8000824 <__aeabi_dadd+0x10c>
 8000810:	230f      	movs	r3, #15
 8000812:	402b      	ands	r3, r5
 8000814:	2b04      	cmp	r3, #4
 8000816:	d005      	beq.n	8000824 <__aeabi_dadd+0x10c>
 8000818:	1d2b      	adds	r3, r5, #4
 800081a:	42ab      	cmp	r3, r5
 800081c:	41ad      	sbcs	r5, r5
 800081e:	426d      	negs	r5, r5
 8000820:	44a8      	add	r8, r5
 8000822:	001d      	movs	r5, r3
 8000824:	4643      	mov	r3, r8
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	d400      	bmi.n	800082c <__aeabi_dadd+0x114>
 800082a:	e094      	b.n	8000956 <__aeabi_dadd+0x23e>
 800082c:	4b97      	ldr	r3, [pc, #604]	; (8000a8c <__aeabi_dadd+0x374>)
 800082e:	1c72      	adds	r2, r6, #1
 8000830:	429a      	cmp	r2, r3
 8000832:	d100      	bne.n	8000836 <__aeabi_dadd+0x11e>
 8000834:	e09d      	b.n	8000972 <__aeabi_dadd+0x25a>
 8000836:	4641      	mov	r1, r8
 8000838:	4b95      	ldr	r3, [pc, #596]	; (8000a90 <__aeabi_dadd+0x378>)
 800083a:	08ed      	lsrs	r5, r5, #3
 800083c:	4019      	ands	r1, r3
 800083e:	000b      	movs	r3, r1
 8000840:	0552      	lsls	r2, r2, #21
 8000842:	0749      	lsls	r1, r1, #29
 8000844:	025b      	lsls	r3, r3, #9
 8000846:	4329      	orrs	r1, r5
 8000848:	0b1b      	lsrs	r3, r3, #12
 800084a:	0d52      	lsrs	r2, r2, #21
 800084c:	0512      	lsls	r2, r2, #20
 800084e:	4313      	orrs	r3, r2
 8000850:	07e4      	lsls	r4, r4, #31
 8000852:	4323      	orrs	r3, r4
 8000854:	0008      	movs	r0, r1
 8000856:	0019      	movs	r1, r3
 8000858:	bce0      	pop	{r5, r6, r7}
 800085a:	46ba      	mov	sl, r7
 800085c:	46b1      	mov	r9, r6
 800085e:	46a8      	mov	r8, r5
 8000860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000862:	2a00      	cmp	r2, #0
 8000864:	d043      	beq.n	80008ee <__aeabi_dadd+0x1d6>
 8000866:	1b8a      	subs	r2, r1, r6
 8000868:	2e00      	cmp	r6, #0
 800086a:	d000      	beq.n	800086e <__aeabi_dadd+0x156>
 800086c:	e12a      	b.n	8000ac4 <__aeabi_dadd+0x3ac>
 800086e:	464c      	mov	r4, r9
 8000870:	431c      	orrs	r4, r3
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x15e>
 8000874:	e1d1      	b.n	8000c1a <__aeabi_dadd+0x502>
 8000876:	1e54      	subs	r4, r2, #1
 8000878:	2a01      	cmp	r2, #1
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x166>
 800087c:	e21f      	b.n	8000cbe <__aeabi_dadd+0x5a6>
 800087e:	4d83      	ldr	r5, [pc, #524]	; (8000a8c <__aeabi_dadd+0x374>)
 8000880:	42aa      	cmp	r2, r5
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x16e>
 8000884:	e272      	b.n	8000d6c <__aeabi_dadd+0x654>
 8000886:	0022      	movs	r2, r4
 8000888:	e123      	b.n	8000ad2 <__aeabi_dadd+0x3ba>
 800088a:	2a00      	cmp	r2, #0
 800088c:	dc00      	bgt.n	8000890 <__aeabi_dadd+0x178>
 800088e:	e098      	b.n	80009c2 <__aeabi_dadd+0x2aa>
 8000890:	2900      	cmp	r1, #0
 8000892:	d042      	beq.n	800091a <__aeabi_dadd+0x202>
 8000894:	497d      	ldr	r1, [pc, #500]	; (8000a8c <__aeabi_dadd+0x374>)
 8000896:	428e      	cmp	r6, r1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x184>
 800089a:	e0da      	b.n	8000a52 <__aeabi_dadd+0x33a>
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0028      	movs	r0, r5
 80008a0:	0409      	lsls	r1, r1, #16
 80008a2:	4308      	orrs	r0, r1
 80008a4:	4684      	mov	ip, r0
 80008a6:	2a38      	cmp	r2, #56	; 0x38
 80008a8:	dd00      	ble.n	80008ac <__aeabi_dadd+0x194>
 80008aa:	e129      	b.n	8000b00 <__aeabi_dadd+0x3e8>
 80008ac:	2a1f      	cmp	r2, #31
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x19a>
 80008b0:	e187      	b.n	8000bc2 <__aeabi_dadd+0x4aa>
 80008b2:	0011      	movs	r1, r2
 80008b4:	4665      	mov	r5, ip
 80008b6:	3920      	subs	r1, #32
 80008b8:	40cd      	lsrs	r5, r1
 80008ba:	2a20      	cmp	r2, #32
 80008bc:	d004      	beq.n	80008c8 <__aeabi_dadd+0x1b0>
 80008be:	2040      	movs	r0, #64	; 0x40
 80008c0:	4661      	mov	r1, ip
 80008c2:	1a82      	subs	r2, r0, r2
 80008c4:	4091      	lsls	r1, r2
 80008c6:	430f      	orrs	r7, r1
 80008c8:	0039      	movs	r1, r7
 80008ca:	1e4f      	subs	r7, r1, #1
 80008cc:	41b9      	sbcs	r1, r7
 80008ce:	430d      	orrs	r5, r1
 80008d0:	e11b      	b.n	8000b0a <__aeabi_dadd+0x3f2>
 80008d2:	0029      	movs	r1, r5
 80008d4:	4339      	orrs	r1, r7
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x1c2>
 80008d8:	e0b5      	b.n	8000a46 <__aeabi_dadd+0x32e>
 80008da:	1e51      	subs	r1, r2, #1
 80008dc:	2a01      	cmp	r2, #1
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x1ca>
 80008e0:	e1ab      	b.n	8000c3a <__aeabi_dadd+0x522>
 80008e2:	486a      	ldr	r0, [pc, #424]	; (8000a8c <__aeabi_dadd+0x374>)
 80008e4:	4282      	cmp	r2, r0
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x1d2>
 80008e8:	e1b2      	b.n	8000c50 <__aeabi_dadd+0x538>
 80008ea:	000a      	movs	r2, r1
 80008ec:	e743      	b.n	8000776 <__aeabi_dadd+0x5e>
 80008ee:	4969      	ldr	r1, [pc, #420]	; (8000a94 <__aeabi_dadd+0x37c>)
 80008f0:	1c75      	adds	r5, r6, #1
 80008f2:	420d      	tst	r5, r1
 80008f4:	d000      	beq.n	80008f8 <__aeabi_dadd+0x1e0>
 80008f6:	e0cf      	b.n	8000a98 <__aeabi_dadd+0x380>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d000      	beq.n	80008fe <__aeabi_dadd+0x1e6>
 80008fc:	e193      	b.n	8000c26 <__aeabi_dadd+0x50e>
 80008fe:	4649      	mov	r1, r9
 8000900:	4319      	orrs	r1, r3
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x1ee>
 8000904:	e1d1      	b.n	8000caa <__aeabi_dadd+0x592>
 8000906:	4661      	mov	r1, ip
 8000908:	4339      	orrs	r1, r7
 800090a:	d000      	beq.n	800090e <__aeabi_dadd+0x1f6>
 800090c:	e1e3      	b.n	8000cd6 <__aeabi_dadd+0x5be>
 800090e:	4649      	mov	r1, r9
 8000910:	0758      	lsls	r0, r3, #29
 8000912:	08c9      	lsrs	r1, r1, #3
 8000914:	4301      	orrs	r1, r0
 8000916:	08db      	lsrs	r3, r3, #3
 8000918:	e026      	b.n	8000968 <__aeabi_dadd+0x250>
 800091a:	0029      	movs	r1, r5
 800091c:	4339      	orrs	r1, r7
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x20a>
 8000920:	e091      	b.n	8000a46 <__aeabi_dadd+0x32e>
 8000922:	1e51      	subs	r1, r2, #1
 8000924:	2a01      	cmp	r2, #1
 8000926:	d005      	beq.n	8000934 <__aeabi_dadd+0x21c>
 8000928:	4858      	ldr	r0, [pc, #352]	; (8000a8c <__aeabi_dadd+0x374>)
 800092a:	4282      	cmp	r2, r0
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x218>
 800092e:	e18f      	b.n	8000c50 <__aeabi_dadd+0x538>
 8000930:	000a      	movs	r2, r1
 8000932:	e7b8      	b.n	80008a6 <__aeabi_dadd+0x18e>
 8000934:	003d      	movs	r5, r7
 8000936:	444d      	add	r5, r9
 8000938:	454d      	cmp	r5, r9
 800093a:	4189      	sbcs	r1, r1
 800093c:	4463      	add	r3, ip
 800093e:	4698      	mov	r8, r3
 8000940:	4249      	negs	r1, r1
 8000942:	4488      	add	r8, r1
 8000944:	4643      	mov	r3, r8
 8000946:	2602      	movs	r6, #2
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	d500      	bpl.n	800094e <__aeabi_dadd+0x236>
 800094c:	e0eb      	b.n	8000b26 <__aeabi_dadd+0x40e>
 800094e:	3e01      	subs	r6, #1
 8000950:	076b      	lsls	r3, r5, #29
 8000952:	d000      	beq.n	8000956 <__aeabi_dadd+0x23e>
 8000954:	e75c      	b.n	8000810 <__aeabi_dadd+0xf8>
 8000956:	4643      	mov	r3, r8
 8000958:	08e9      	lsrs	r1, r5, #3
 800095a:	075a      	lsls	r2, r3, #29
 800095c:	4311      	orrs	r1, r2
 800095e:	0032      	movs	r2, r6
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	484a      	ldr	r0, [pc, #296]	; (8000a8c <__aeabi_dadd+0x374>)
 8000964:	4282      	cmp	r2, r0
 8000966:	d021      	beq.n	80009ac <__aeabi_dadd+0x294>
 8000968:	031b      	lsls	r3, r3, #12
 800096a:	0552      	lsls	r2, r2, #21
 800096c:	0b1b      	lsrs	r3, r3, #12
 800096e:	0d52      	lsrs	r2, r2, #21
 8000970:	e76c      	b.n	800084c <__aeabi_dadd+0x134>
 8000972:	2300      	movs	r3, #0
 8000974:	2100      	movs	r1, #0
 8000976:	e769      	b.n	800084c <__aeabi_dadd+0x134>
 8000978:	002a      	movs	r2, r5
 800097a:	433a      	orrs	r2, r7
 800097c:	d069      	beq.n	8000a52 <__aeabi_dadd+0x33a>
 800097e:	464a      	mov	r2, r9
 8000980:	0758      	lsls	r0, r3, #29
 8000982:	08d1      	lsrs	r1, r2, #3
 8000984:	08da      	lsrs	r2, r3, #3
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	031b      	lsls	r3, r3, #12
 800098a:	4308      	orrs	r0, r1
 800098c:	421a      	tst	r2, r3
 800098e:	d007      	beq.n	80009a0 <__aeabi_dadd+0x288>
 8000990:	0029      	movs	r1, r5
 8000992:	08ed      	lsrs	r5, r5, #3
 8000994:	421d      	tst	r5, r3
 8000996:	d103      	bne.n	80009a0 <__aeabi_dadd+0x288>
 8000998:	002a      	movs	r2, r5
 800099a:	08ff      	lsrs	r7, r7, #3
 800099c:	0748      	lsls	r0, r1, #29
 800099e:	4338      	orrs	r0, r7
 80009a0:	0f43      	lsrs	r3, r0, #29
 80009a2:	00c1      	lsls	r1, r0, #3
 80009a4:	075b      	lsls	r3, r3, #29
 80009a6:	08c9      	lsrs	r1, r1, #3
 80009a8:	4319      	orrs	r1, r3
 80009aa:	0013      	movs	r3, r2
 80009ac:	000a      	movs	r2, r1
 80009ae:	431a      	orrs	r2, r3
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dadd+0x29c>
 80009b2:	e213      	b.n	8000ddc <__aeabi_dadd+0x6c4>
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0312      	lsls	r2, r2, #12
 80009b8:	4313      	orrs	r3, r2
 80009ba:	031b      	lsls	r3, r3, #12
 80009bc:	4a33      	ldr	r2, [pc, #204]	; (8000a8c <__aeabi_dadd+0x374>)
 80009be:	0b1b      	lsrs	r3, r3, #12
 80009c0:	e744      	b.n	800084c <__aeabi_dadd+0x134>
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	d04b      	beq.n	8000a5e <__aeabi_dadd+0x346>
 80009c6:	1b8a      	subs	r2, r1, r6
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x2b6>
 80009cc:	e0e7      	b.n	8000b9e <__aeabi_dadd+0x486>
 80009ce:	482f      	ldr	r0, [pc, #188]	; (8000a8c <__aeabi_dadd+0x374>)
 80009d0:	4281      	cmp	r1, r0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dadd+0x2be>
 80009d4:	e195      	b.n	8000d02 <__aeabi_dadd+0x5ea>
 80009d6:	2080      	movs	r0, #128	; 0x80
 80009d8:	0400      	lsls	r0, r0, #16
 80009da:	4303      	orrs	r3, r0
 80009dc:	2a38      	cmp	r2, #56	; 0x38
 80009de:	dd00      	ble.n	80009e2 <__aeabi_dadd+0x2ca>
 80009e0:	e143      	b.n	8000c6a <__aeabi_dadd+0x552>
 80009e2:	2a1f      	cmp	r2, #31
 80009e4:	dd00      	ble.n	80009e8 <__aeabi_dadd+0x2d0>
 80009e6:	e1db      	b.n	8000da0 <__aeabi_dadd+0x688>
 80009e8:	2020      	movs	r0, #32
 80009ea:	001d      	movs	r5, r3
 80009ec:	464e      	mov	r6, r9
 80009ee:	1a80      	subs	r0, r0, r2
 80009f0:	4085      	lsls	r5, r0
 80009f2:	40d6      	lsrs	r6, r2
 80009f4:	4335      	orrs	r5, r6
 80009f6:	464e      	mov	r6, r9
 80009f8:	4086      	lsls	r6, r0
 80009fa:	0030      	movs	r0, r6
 80009fc:	40d3      	lsrs	r3, r2
 80009fe:	1e46      	subs	r6, r0, #1
 8000a00:	41b0      	sbcs	r0, r6
 8000a02:	449c      	add	ip, r3
 8000a04:	4305      	orrs	r5, r0
 8000a06:	19ed      	adds	r5, r5, r7
 8000a08:	42bd      	cmp	r5, r7
 8000a0a:	419b      	sbcs	r3, r3
 8000a0c:	425b      	negs	r3, r3
 8000a0e:	4463      	add	r3, ip
 8000a10:	4698      	mov	r8, r3
 8000a12:	000e      	movs	r6, r1
 8000a14:	e07f      	b.n	8000b16 <__aeabi_dadd+0x3fe>
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <__aeabi_dadd+0x378>)
 8000a18:	1a76      	subs	r6, r6, r1
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	e6f5      	b.n	800080c <__aeabi_dadd+0xf4>
 8000a20:	0028      	movs	r0, r5
 8000a22:	f001 fcbd 	bl	80023a0 <__clzsi2>
 8000a26:	0001      	movs	r1, r0
 8000a28:	3118      	adds	r1, #24
 8000a2a:	291f      	cmp	r1, #31
 8000a2c:	dc00      	bgt.n	8000a30 <__aeabi_dadd+0x318>
 8000a2e:	e6cf      	b.n	80007d0 <__aeabi_dadd+0xb8>
 8000a30:	002b      	movs	r3, r5
 8000a32:	3808      	subs	r0, #8
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2500      	movs	r5, #0
 8000a38:	e6d2      	b.n	80007e0 <__aeabi_dadd+0xc8>
 8000a3a:	4662      	mov	r2, ip
 8000a3c:	433a      	orrs	r2, r7
 8000a3e:	0011      	movs	r1, r2
 8000a40:	1e4f      	subs	r7, r1, #1
 8000a42:	41b9      	sbcs	r1, r7
 8000a44:	e6ac      	b.n	80007a0 <__aeabi_dadd+0x88>
 8000a46:	4649      	mov	r1, r9
 8000a48:	0758      	lsls	r0, r3, #29
 8000a4a:	08c9      	lsrs	r1, r1, #3
 8000a4c:	4301      	orrs	r1, r0
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	e787      	b.n	8000962 <__aeabi_dadd+0x24a>
 8000a52:	4649      	mov	r1, r9
 8000a54:	075a      	lsls	r2, r3, #29
 8000a56:	08c9      	lsrs	r1, r1, #3
 8000a58:	4311      	orrs	r1, r2
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	e7a6      	b.n	80009ac <__aeabi_dadd+0x294>
 8000a5e:	490d      	ldr	r1, [pc, #52]	; (8000a94 <__aeabi_dadd+0x37c>)
 8000a60:	1c70      	adds	r0, r6, #1
 8000a62:	4208      	tst	r0, r1
 8000a64:	d000      	beq.n	8000a68 <__aeabi_dadd+0x350>
 8000a66:	e0bb      	b.n	8000be0 <__aeabi_dadd+0x4c8>
 8000a68:	2e00      	cmp	r6, #0
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_dadd+0x356>
 8000a6c:	e114      	b.n	8000c98 <__aeabi_dadd+0x580>
 8000a6e:	4649      	mov	r1, r9
 8000a70:	4319      	orrs	r1, r3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x35e>
 8000a74:	e175      	b.n	8000d62 <__aeabi_dadd+0x64a>
 8000a76:	0029      	movs	r1, r5
 8000a78:	4339      	orrs	r1, r7
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_dadd+0x366>
 8000a7c:	e17e      	b.n	8000d7c <__aeabi_dadd+0x664>
 8000a7e:	4649      	mov	r1, r9
 8000a80:	0758      	lsls	r0, r3, #29
 8000a82:	08c9      	lsrs	r1, r1, #3
 8000a84:	4301      	orrs	r1, r0
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	e76e      	b.n	8000968 <__aeabi_dadd+0x250>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	000007ff 	.word	0x000007ff
 8000a90:	ff7fffff 	.word	0xff7fffff
 8000a94:	000007fe 	.word	0x000007fe
 8000a98:	4649      	mov	r1, r9
 8000a9a:	1bcd      	subs	r5, r1, r7
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	1a58      	subs	r0, r3, r1
 8000aa0:	45a9      	cmp	r9, r5
 8000aa2:	4189      	sbcs	r1, r1
 8000aa4:	4249      	negs	r1, r1
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	0001      	movs	r1, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	1a09      	subs	r1, r1, r0
 8000aae:	4688      	mov	r8, r1
 8000ab0:	0209      	lsls	r1, r1, #8
 8000ab2:	d500      	bpl.n	8000ab6 <__aeabi_dadd+0x39e>
 8000ab4:	e0a6      	b.n	8000c04 <__aeabi_dadd+0x4ec>
 8000ab6:	4641      	mov	r1, r8
 8000ab8:	4329      	orrs	r1, r5
 8000aba:	d000      	beq.n	8000abe <__aeabi_dadd+0x3a6>
 8000abc:	e67f      	b.n	80007be <__aeabi_dadd+0xa6>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	e751      	b.n	8000968 <__aeabi_dadd+0x250>
 8000ac4:	4cc7      	ldr	r4, [pc, #796]	; (8000de4 <__aeabi_dadd+0x6cc>)
 8000ac6:	42a1      	cmp	r1, r4
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x3b4>
 8000aca:	e0c7      	b.n	8000c5c <__aeabi_dadd+0x544>
 8000acc:	2480      	movs	r4, #128	; 0x80
 8000ace:	0424      	lsls	r4, r4, #16
 8000ad0:	4323      	orrs	r3, r4
 8000ad2:	2a38      	cmp	r2, #56	; 0x38
 8000ad4:	dc54      	bgt.n	8000b80 <__aeabi_dadd+0x468>
 8000ad6:	2a1f      	cmp	r2, #31
 8000ad8:	dd00      	ble.n	8000adc <__aeabi_dadd+0x3c4>
 8000ada:	e0cc      	b.n	8000c76 <__aeabi_dadd+0x55e>
 8000adc:	2420      	movs	r4, #32
 8000ade:	4648      	mov	r0, r9
 8000ae0:	1aa4      	subs	r4, r4, r2
 8000ae2:	001d      	movs	r5, r3
 8000ae4:	464e      	mov	r6, r9
 8000ae6:	40a0      	lsls	r0, r4
 8000ae8:	40d6      	lsrs	r6, r2
 8000aea:	40a5      	lsls	r5, r4
 8000aec:	0004      	movs	r4, r0
 8000aee:	40d3      	lsrs	r3, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	4335      	orrs	r5, r6
 8000af4:	1e66      	subs	r6, r4, #1
 8000af6:	41b4      	sbcs	r4, r6
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	469c      	mov	ip, r3
 8000afc:	4325      	orrs	r5, r4
 8000afe:	e044      	b.n	8000b8a <__aeabi_dadd+0x472>
 8000b00:	4662      	mov	r2, ip
 8000b02:	433a      	orrs	r2, r7
 8000b04:	0015      	movs	r5, r2
 8000b06:	1e6f      	subs	r7, r5, #1
 8000b08:	41bd      	sbcs	r5, r7
 8000b0a:	444d      	add	r5, r9
 8000b0c:	454d      	cmp	r5, r9
 8000b0e:	4189      	sbcs	r1, r1
 8000b10:	4249      	negs	r1, r1
 8000b12:	4688      	mov	r8, r1
 8000b14:	4498      	add	r8, r3
 8000b16:	4643      	mov	r3, r8
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	d400      	bmi.n	8000b1e <__aeabi_dadd+0x406>
 8000b1c:	e718      	b.n	8000950 <__aeabi_dadd+0x238>
 8000b1e:	4bb1      	ldr	r3, [pc, #708]	; (8000de4 <__aeabi_dadd+0x6cc>)
 8000b20:	3601      	adds	r6, #1
 8000b22:	429e      	cmp	r6, r3
 8000b24:	d049      	beq.n	8000bba <__aeabi_dadd+0x4a2>
 8000b26:	4642      	mov	r2, r8
 8000b28:	4baf      	ldr	r3, [pc, #700]	; (8000de8 <__aeabi_dadd+0x6d0>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	0013      	movs	r3, r2
 8000b30:	086a      	lsrs	r2, r5, #1
 8000b32:	400d      	ands	r5, r1
 8000b34:	4315      	orrs	r5, r2
 8000b36:	07d9      	lsls	r1, r3, #31
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	430d      	orrs	r5, r1
 8000b3e:	e665      	b.n	800080c <__aeabi_dadd+0xf4>
 8000b40:	0018      	movs	r0, r3
 8000b42:	3e1f      	subs	r6, #31
 8000b44:	40f0      	lsrs	r0, r6
 8000b46:	2a20      	cmp	r2, #32
 8000b48:	d003      	beq.n	8000b52 <__aeabi_dadd+0x43a>
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	431d      	orrs	r5, r3
 8000b52:	1e69      	subs	r1, r5, #1
 8000b54:	418d      	sbcs	r5, r1
 8000b56:	2300      	movs	r3, #0
 8000b58:	2600      	movs	r6, #0
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4305      	orrs	r5, r0
 8000b5e:	e6f7      	b.n	8000950 <__aeabi_dadd+0x238>
 8000b60:	0011      	movs	r1, r2
 8000b62:	4665      	mov	r5, ip
 8000b64:	3920      	subs	r1, #32
 8000b66:	40cd      	lsrs	r5, r1
 8000b68:	2a20      	cmp	r2, #32
 8000b6a:	d004      	beq.n	8000b76 <__aeabi_dadd+0x45e>
 8000b6c:	2040      	movs	r0, #64	; 0x40
 8000b6e:	4661      	mov	r1, ip
 8000b70:	1a82      	subs	r2, r0, r2
 8000b72:	4091      	lsls	r1, r2
 8000b74:	430f      	orrs	r7, r1
 8000b76:	0039      	movs	r1, r7
 8000b78:	1e4f      	subs	r7, r1, #1
 8000b7a:	41b9      	sbcs	r1, r7
 8000b7c:	4329      	orrs	r1, r5
 8000b7e:	e60f      	b.n	80007a0 <__aeabi_dadd+0x88>
 8000b80:	464a      	mov	r2, r9
 8000b82:	4313      	orrs	r3, r2
 8000b84:	001d      	movs	r5, r3
 8000b86:	1e6b      	subs	r3, r5, #1
 8000b88:	419d      	sbcs	r5, r3
 8000b8a:	1b7d      	subs	r5, r7, r5
 8000b8c:	42af      	cmp	r7, r5
 8000b8e:	419b      	sbcs	r3, r3
 8000b90:	4662      	mov	r2, ip
 8000b92:	425b      	negs	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	4698      	mov	r8, r3
 8000b98:	4654      	mov	r4, sl
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e607      	b.n	80007ae <__aeabi_dadd+0x96>
 8000b9e:	4648      	mov	r0, r9
 8000ba0:	4318      	orrs	r0, r3
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x48e>
 8000ba4:	e0b3      	b.n	8000d0e <__aeabi_dadd+0x5f6>
 8000ba6:	1e50      	subs	r0, r2, #1
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x496>
 8000bac:	e10d      	b.n	8000dca <__aeabi_dadd+0x6b2>
 8000bae:	4d8d      	ldr	r5, [pc, #564]	; (8000de4 <__aeabi_dadd+0x6cc>)
 8000bb0:	42aa      	cmp	r2, r5
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dadd+0x49e>
 8000bb4:	e0a5      	b.n	8000d02 <__aeabi_dadd+0x5ea>
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	e710      	b.n	80009dc <__aeabi_dadd+0x2c4>
 8000bba:	0032      	movs	r2, r6
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	e644      	b.n	800084c <__aeabi_dadd+0x134>
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	0038      	movs	r0, r7
 8000bc6:	1a89      	subs	r1, r1, r2
 8000bc8:	4665      	mov	r5, ip
 8000bca:	408f      	lsls	r7, r1
 8000bcc:	408d      	lsls	r5, r1
 8000bce:	40d0      	lsrs	r0, r2
 8000bd0:	1e79      	subs	r1, r7, #1
 8000bd2:	418f      	sbcs	r7, r1
 8000bd4:	4305      	orrs	r5, r0
 8000bd6:	433d      	orrs	r5, r7
 8000bd8:	4667      	mov	r7, ip
 8000bda:	40d7      	lsrs	r7, r2
 8000bdc:	19db      	adds	r3, r3, r7
 8000bde:	e794      	b.n	8000b0a <__aeabi_dadd+0x3f2>
 8000be0:	4a80      	ldr	r2, [pc, #512]	; (8000de4 <__aeabi_dadd+0x6cc>)
 8000be2:	4290      	cmp	r0, r2
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x4d0>
 8000be6:	e0ec      	b.n	8000dc2 <__aeabi_dadd+0x6aa>
 8000be8:	0039      	movs	r1, r7
 8000bea:	4449      	add	r1, r9
 8000bec:	4549      	cmp	r1, r9
 8000bee:	4192      	sbcs	r2, r2
 8000bf0:	4463      	add	r3, ip
 8000bf2:	4252      	negs	r2, r2
 8000bf4:	189b      	adds	r3, r3, r2
 8000bf6:	07dd      	lsls	r5, r3, #31
 8000bf8:	0849      	lsrs	r1, r1, #1
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	0006      	movs	r6, r0
 8000c00:	430d      	orrs	r5, r1
 8000c02:	e6a5      	b.n	8000950 <__aeabi_dadd+0x238>
 8000c04:	464a      	mov	r2, r9
 8000c06:	1abd      	subs	r5, r7, r2
 8000c08:	42af      	cmp	r7, r5
 8000c0a:	4189      	sbcs	r1, r1
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	4249      	negs	r1, r1
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	1a5b      	subs	r3, r3, r1
 8000c14:	4698      	mov	r8, r3
 8000c16:	4654      	mov	r4, sl
 8000c18:	e5d1      	b.n	80007be <__aeabi_dadd+0xa6>
 8000c1a:	076c      	lsls	r4, r5, #29
 8000c1c:	08f9      	lsrs	r1, r7, #3
 8000c1e:	4321      	orrs	r1, r4
 8000c20:	08eb      	lsrs	r3, r5, #3
 8000c22:	0004      	movs	r4, r0
 8000c24:	e69d      	b.n	8000962 <__aeabi_dadd+0x24a>
 8000c26:	464a      	mov	r2, r9
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	d175      	bne.n	8000d18 <__aeabi_dadd+0x600>
 8000c2c:	4661      	mov	r1, ip
 8000c2e:	4339      	orrs	r1, r7
 8000c30:	d114      	bne.n	8000c5c <__aeabi_dadd+0x544>
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	2400      	movs	r4, #0
 8000c36:	031b      	lsls	r3, r3, #12
 8000c38:	e6bc      	b.n	80009b4 <__aeabi_dadd+0x29c>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	1bd5      	subs	r5, r2, r7
 8000c3e:	45a9      	cmp	r9, r5
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4662      	mov	r2, ip
 8000c44:	4249      	negs	r1, r1
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	2601      	movs	r6, #1
 8000c4e:	e5ae      	b.n	80007ae <__aeabi_dadd+0x96>
 8000c50:	464a      	mov	r2, r9
 8000c52:	08d1      	lsrs	r1, r2, #3
 8000c54:	075a      	lsls	r2, r3, #29
 8000c56:	4311      	orrs	r1, r2
 8000c58:	08db      	lsrs	r3, r3, #3
 8000c5a:	e6a7      	b.n	80009ac <__aeabi_dadd+0x294>
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08f9      	lsrs	r1, r7, #3
 8000c60:	075a      	lsls	r2, r3, #29
 8000c62:	4654      	mov	r4, sl
 8000c64:	4311      	orrs	r1, r2
 8000c66:	08db      	lsrs	r3, r3, #3
 8000c68:	e6a0      	b.n	80009ac <__aeabi_dadd+0x294>
 8000c6a:	464a      	mov	r2, r9
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	001d      	movs	r5, r3
 8000c70:	1e6b      	subs	r3, r5, #1
 8000c72:	419d      	sbcs	r5, r3
 8000c74:	e6c7      	b.n	8000a06 <__aeabi_dadd+0x2ee>
 8000c76:	0014      	movs	r4, r2
 8000c78:	001e      	movs	r6, r3
 8000c7a:	3c20      	subs	r4, #32
 8000c7c:	40e6      	lsrs	r6, r4
 8000c7e:	2a20      	cmp	r2, #32
 8000c80:	d005      	beq.n	8000c8e <__aeabi_dadd+0x576>
 8000c82:	2440      	movs	r4, #64	; 0x40
 8000c84:	1aa2      	subs	r2, r4, r2
 8000c86:	4093      	lsls	r3, r2
 8000c88:	464a      	mov	r2, r9
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	4691      	mov	r9, r2
 8000c8e:	464d      	mov	r5, r9
 8000c90:	1e6b      	subs	r3, r5, #1
 8000c92:	419d      	sbcs	r5, r3
 8000c94:	4335      	orrs	r5, r6
 8000c96:	e778      	b.n	8000b8a <__aeabi_dadd+0x472>
 8000c98:	464a      	mov	r2, r9
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x588>
 8000c9e:	e66b      	b.n	8000978 <__aeabi_dadd+0x260>
 8000ca0:	076b      	lsls	r3, r5, #29
 8000ca2:	08f9      	lsrs	r1, r7, #3
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	08eb      	lsrs	r3, r5, #3
 8000ca8:	e680      	b.n	80009ac <__aeabi_dadd+0x294>
 8000caa:	4661      	mov	r1, ip
 8000cac:	4339      	orrs	r1, r7
 8000cae:	d054      	beq.n	8000d5a <__aeabi_dadd+0x642>
 8000cb0:	4663      	mov	r3, ip
 8000cb2:	08f9      	lsrs	r1, r7, #3
 8000cb4:	075c      	lsls	r4, r3, #29
 8000cb6:	4321      	orrs	r1, r4
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	0004      	movs	r4, r0
 8000cbc:	e654      	b.n	8000968 <__aeabi_dadd+0x250>
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	1abd      	subs	r5, r7, r2
 8000cc2:	42af      	cmp	r7, r5
 8000cc4:	4189      	sbcs	r1, r1
 8000cc6:	4662      	mov	r2, ip
 8000cc8:	4249      	negs	r1, r1
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	4698      	mov	r8, r3
 8000cd0:	0004      	movs	r4, r0
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	e56b      	b.n	80007ae <__aeabi_dadd+0x96>
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	1bd5      	subs	r5, r2, r7
 8000cda:	45a9      	cmp	r9, r5
 8000cdc:	4189      	sbcs	r1, r1
 8000cde:	4662      	mov	r2, ip
 8000ce0:	4249      	negs	r1, r1
 8000ce2:	1a9a      	subs	r2, r3, r2
 8000ce4:	1a52      	subs	r2, r2, r1
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	0212      	lsls	r2, r2, #8
 8000cea:	d532      	bpl.n	8000d52 <__aeabi_dadd+0x63a>
 8000cec:	464a      	mov	r2, r9
 8000cee:	1abd      	subs	r5, r7, r2
 8000cf0:	42af      	cmp	r7, r5
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	1a5b      	subs	r3, r3, r1
 8000cfc:	4698      	mov	r8, r3
 8000cfe:	0004      	movs	r4, r0
 8000d00:	e584      	b.n	800080c <__aeabi_dadd+0xf4>
 8000d02:	4663      	mov	r3, ip
 8000d04:	08f9      	lsrs	r1, r7, #3
 8000d06:	075a      	lsls	r2, r3, #29
 8000d08:	4311      	orrs	r1, r2
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	e64e      	b.n	80009ac <__aeabi_dadd+0x294>
 8000d0e:	08f9      	lsrs	r1, r7, #3
 8000d10:	0768      	lsls	r0, r5, #29
 8000d12:	4301      	orrs	r1, r0
 8000d14:	08eb      	lsrs	r3, r5, #3
 8000d16:	e624      	b.n	8000962 <__aeabi_dadd+0x24a>
 8000d18:	4662      	mov	r2, ip
 8000d1a:	433a      	orrs	r2, r7
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dadd+0x608>
 8000d1e:	e698      	b.n	8000a52 <__aeabi_dadd+0x33a>
 8000d20:	464a      	mov	r2, r9
 8000d22:	08d1      	lsrs	r1, r2, #3
 8000d24:	075a      	lsls	r2, r3, #29
 8000d26:	4311      	orrs	r1, r2
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	031b      	lsls	r3, r3, #12
 8000d2e:	421a      	tst	r2, r3
 8000d30:	d008      	beq.n	8000d44 <__aeabi_dadd+0x62c>
 8000d32:	4660      	mov	r0, ip
 8000d34:	08c5      	lsrs	r5, r0, #3
 8000d36:	421d      	tst	r5, r3
 8000d38:	d104      	bne.n	8000d44 <__aeabi_dadd+0x62c>
 8000d3a:	4654      	mov	r4, sl
 8000d3c:	002a      	movs	r2, r5
 8000d3e:	08f9      	lsrs	r1, r7, #3
 8000d40:	0743      	lsls	r3, r0, #29
 8000d42:	4319      	orrs	r1, r3
 8000d44:	0f4b      	lsrs	r3, r1, #29
 8000d46:	00c9      	lsls	r1, r1, #3
 8000d48:	075b      	lsls	r3, r3, #29
 8000d4a:	08c9      	lsrs	r1, r1, #3
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	e62c      	b.n	80009ac <__aeabi_dadd+0x294>
 8000d52:	4641      	mov	r1, r8
 8000d54:	4329      	orrs	r1, r5
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x642>
 8000d58:	e5fa      	b.n	8000950 <__aeabi_dadd+0x238>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	000a      	movs	r2, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	e602      	b.n	8000968 <__aeabi_dadd+0x250>
 8000d62:	076b      	lsls	r3, r5, #29
 8000d64:	08f9      	lsrs	r1, r7, #3
 8000d66:	4319      	orrs	r1, r3
 8000d68:	08eb      	lsrs	r3, r5, #3
 8000d6a:	e5fd      	b.n	8000968 <__aeabi_dadd+0x250>
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	08f9      	lsrs	r1, r7, #3
 8000d70:	075b      	lsls	r3, r3, #29
 8000d72:	4319      	orrs	r1, r3
 8000d74:	4663      	mov	r3, ip
 8000d76:	0004      	movs	r4, r0
 8000d78:	08db      	lsrs	r3, r3, #3
 8000d7a:	e617      	b.n	80009ac <__aeabi_dadd+0x294>
 8000d7c:	003d      	movs	r5, r7
 8000d7e:	444d      	add	r5, r9
 8000d80:	4463      	add	r3, ip
 8000d82:	454d      	cmp	r5, r9
 8000d84:	4189      	sbcs	r1, r1
 8000d86:	4698      	mov	r8, r3
 8000d88:	4249      	negs	r1, r1
 8000d8a:	4488      	add	r8, r1
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	d400      	bmi.n	8000d94 <__aeabi_dadd+0x67c>
 8000d92:	e5dd      	b.n	8000950 <__aeabi_dadd+0x238>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <__aeabi_dadd+0x6d0>)
 8000d98:	2601      	movs	r6, #1
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	4690      	mov	r8, r2
 8000d9e:	e5d7      	b.n	8000950 <__aeabi_dadd+0x238>
 8000da0:	0010      	movs	r0, r2
 8000da2:	001e      	movs	r6, r3
 8000da4:	3820      	subs	r0, #32
 8000da6:	40c6      	lsrs	r6, r0
 8000da8:	2a20      	cmp	r2, #32
 8000daa:	d005      	beq.n	8000db8 <__aeabi_dadd+0x6a0>
 8000dac:	2040      	movs	r0, #64	; 0x40
 8000dae:	1a82      	subs	r2, r0, r2
 8000db0:	4093      	lsls	r3, r2
 8000db2:	464a      	mov	r2, r9
 8000db4:	431a      	orrs	r2, r3
 8000db6:	4691      	mov	r9, r2
 8000db8:	464d      	mov	r5, r9
 8000dba:	1e6b      	subs	r3, r5, #1
 8000dbc:	419d      	sbcs	r5, r3
 8000dbe:	4335      	orrs	r5, r6
 8000dc0:	e621      	b.n	8000a06 <__aeabi_dadd+0x2ee>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e540      	b.n	800084c <__aeabi_dadd+0x134>
 8000dca:	464a      	mov	r2, r9
 8000dcc:	19d5      	adds	r5, r2, r7
 8000dce:	42bd      	cmp	r5, r7
 8000dd0:	4189      	sbcs	r1, r1
 8000dd2:	4463      	add	r3, ip
 8000dd4:	4698      	mov	r8, r3
 8000dd6:	4249      	negs	r1, r1
 8000dd8:	4488      	add	r8, r1
 8000dda:	e5b3      	b.n	8000944 <__aeabi_dadd+0x22c>
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4a01      	ldr	r2, [pc, #4]	; (8000de4 <__aeabi_dadd+0x6cc>)
 8000de0:	000b      	movs	r3, r1
 8000de2:	e533      	b.n	800084c <__aeabi_dadd+0x134>
 8000de4:	000007ff 	.word	0x000007ff
 8000de8:	ff7fffff 	.word	0xff7fffff

08000dec <__aeabi_ddiv>:
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	4657      	mov	r7, sl
 8000df0:	464e      	mov	r6, r9
 8000df2:	4645      	mov	r5, r8
 8000df4:	46de      	mov	lr, fp
 8000df6:	b5e0      	push	{r5, r6, r7, lr}
 8000df8:	4681      	mov	r9, r0
 8000dfa:	0005      	movs	r5, r0
 8000dfc:	030c      	lsls	r4, r1, #12
 8000dfe:	0048      	lsls	r0, r1, #1
 8000e00:	4692      	mov	sl, r2
 8000e02:	001f      	movs	r7, r3
 8000e04:	b085      	sub	sp, #20
 8000e06:	0b24      	lsrs	r4, r4, #12
 8000e08:	0d40      	lsrs	r0, r0, #21
 8000e0a:	0fce      	lsrs	r6, r1, #31
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d059      	beq.n	8000ec4 <__aeabi_ddiv+0xd8>
 8000e10:	4b87      	ldr	r3, [pc, #540]	; (8001030 <__aeabi_ddiv+0x244>)
 8000e12:	4298      	cmp	r0, r3
 8000e14:	d100      	bne.n	8000e18 <__aeabi_ddiv+0x2c>
 8000e16:	e098      	b.n	8000f4a <__aeabi_ddiv+0x15e>
 8000e18:	0f6b      	lsrs	r3, r5, #29
 8000e1a:	00e4      	lsls	r4, r4, #3
 8000e1c:	431c      	orrs	r4, r3
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	041b      	lsls	r3, r3, #16
 8000e22:	4323      	orrs	r3, r4
 8000e24:	4698      	mov	r8, r3
 8000e26:	4b83      	ldr	r3, [pc, #524]	; (8001034 <__aeabi_ddiv+0x248>)
 8000e28:	00ed      	lsls	r5, r5, #3
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	4483      	add	fp, r0
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	033c      	lsls	r4, r7, #12
 8000e36:	007b      	lsls	r3, r7, #1
 8000e38:	4650      	mov	r0, sl
 8000e3a:	0b24      	lsrs	r4, r4, #12
 8000e3c:	0d5b      	lsrs	r3, r3, #21
 8000e3e:	0fff      	lsrs	r7, r7, #31
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d067      	beq.n	8000f14 <__aeabi_ddiv+0x128>
 8000e44:	4a7a      	ldr	r2, [pc, #488]	; (8001030 <__aeabi_ddiv+0x244>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d018      	beq.n	8000e7c <__aeabi_ddiv+0x90>
 8000e4a:	497a      	ldr	r1, [pc, #488]	; (8001034 <__aeabi_ddiv+0x248>)
 8000e4c:	0f42      	lsrs	r2, r0, #29
 8000e4e:	468c      	mov	ip, r1
 8000e50:	00e4      	lsls	r4, r4, #3
 8000e52:	4659      	mov	r1, fp
 8000e54:	4314      	orrs	r4, r2
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	4463      	add	r3, ip
 8000e5a:	0412      	lsls	r2, r2, #16
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	4314      	orrs	r4, r2
 8000e60:	469b      	mov	fp, r3
 8000e62:	00c2      	lsls	r2, r0, #3
 8000e64:	2000      	movs	r0, #0
 8000e66:	0033      	movs	r3, r6
 8000e68:	407b      	eors	r3, r7
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	d900      	bls.n	8000e74 <__aeabi_ddiv+0x88>
 8000e72:	e0ef      	b.n	8001054 <__aeabi_ddiv+0x268>
 8000e74:	4970      	ldr	r1, [pc, #448]	; (8001038 <__aeabi_ddiv+0x24c>)
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	58cb      	ldr	r3, [r1, r3]
 8000e7a:	469f      	mov	pc, r3
 8000e7c:	4b6f      	ldr	r3, [pc, #444]	; (800103c <__aeabi_ddiv+0x250>)
 8000e7e:	4652      	mov	r2, sl
 8000e80:	469c      	mov	ip, r3
 8000e82:	4322      	orrs	r2, r4
 8000e84:	44e3      	add	fp, ip
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d000      	beq.n	8000e8c <__aeabi_ddiv+0xa0>
 8000e8a:	e095      	b.n	8000fb8 <__aeabi_ddiv+0x1cc>
 8000e8c:	4649      	mov	r1, r9
 8000e8e:	2302      	movs	r3, #2
 8000e90:	4319      	orrs	r1, r3
 8000e92:	4689      	mov	r9, r1
 8000e94:	2400      	movs	r4, #0
 8000e96:	2002      	movs	r0, #2
 8000e98:	e7e5      	b.n	8000e66 <__aeabi_ddiv+0x7a>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	4652      	mov	r2, sl
 8000ea2:	051b      	lsls	r3, r3, #20
 8000ea4:	4323      	orrs	r3, r4
 8000ea6:	07d2      	lsls	r2, r2, #31
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	0028      	movs	r0, r5
 8000eac:	0019      	movs	r1, r3
 8000eae:	b005      	add	sp, #20
 8000eb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb2:	46bb      	mov	fp, r7
 8000eb4:	46b2      	mov	sl, r6
 8000eb6:	46a9      	mov	r9, r5
 8000eb8:	46a0      	mov	r8, r4
 8000eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	2500      	movs	r5, #0
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <__aeabi_ddiv+0x244>)
 8000ec2:	e7ed      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	4323      	orrs	r3, r4
 8000ec8:	4698      	mov	r8, r3
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0xe2>
 8000ecc:	e089      	b.n	8000fe2 <__aeabi_ddiv+0x1f6>
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0xe8>
 8000ed2:	e1e0      	b.n	8001296 <__aeabi_ddiv+0x4aa>
 8000ed4:	0020      	movs	r0, r4
 8000ed6:	f001 fa63 	bl	80023a0 <__clzsi2>
 8000eda:	0001      	movs	r1, r0
 8000edc:	0002      	movs	r2, r0
 8000ede:	390b      	subs	r1, #11
 8000ee0:	231d      	movs	r3, #29
 8000ee2:	1a5b      	subs	r3, r3, r1
 8000ee4:	4649      	mov	r1, r9
 8000ee6:	0010      	movs	r0, r2
 8000ee8:	40d9      	lsrs	r1, r3
 8000eea:	3808      	subs	r0, #8
 8000eec:	4084      	lsls	r4, r0
 8000eee:	000b      	movs	r3, r1
 8000ef0:	464d      	mov	r5, r9
 8000ef2:	4323      	orrs	r3, r4
 8000ef4:	4698      	mov	r8, r3
 8000ef6:	4085      	lsls	r5, r0
 8000ef8:	4851      	ldr	r0, [pc, #324]	; (8001040 <__aeabi_ddiv+0x254>)
 8000efa:	033c      	lsls	r4, r7, #12
 8000efc:	1a83      	subs	r3, r0, r2
 8000efe:	469b      	mov	fp, r3
 8000f00:	2300      	movs	r3, #0
 8000f02:	4699      	mov	r9, r3
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	007b      	lsls	r3, r7, #1
 8000f08:	4650      	mov	r0, sl
 8000f0a:	0b24      	lsrs	r4, r4, #12
 8000f0c:	0d5b      	lsrs	r3, r3, #21
 8000f0e:	0fff      	lsrs	r7, r7, #31
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d197      	bne.n	8000e44 <__aeabi_ddiv+0x58>
 8000f14:	4652      	mov	r2, sl
 8000f16:	4322      	orrs	r2, r4
 8000f18:	d055      	beq.n	8000fc6 <__aeabi_ddiv+0x1da>
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x134>
 8000f1e:	e1ca      	b.n	80012b6 <__aeabi_ddiv+0x4ca>
 8000f20:	0020      	movs	r0, r4
 8000f22:	f001 fa3d 	bl	80023a0 <__clzsi2>
 8000f26:	0002      	movs	r2, r0
 8000f28:	3a0b      	subs	r2, #11
 8000f2a:	231d      	movs	r3, #29
 8000f2c:	0001      	movs	r1, r0
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	4652      	mov	r2, sl
 8000f32:	3908      	subs	r1, #8
 8000f34:	40da      	lsrs	r2, r3
 8000f36:	408c      	lsls	r4, r1
 8000f38:	4314      	orrs	r4, r2
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	408a      	lsls	r2, r1
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <__aeabi_ddiv+0x258>)
 8000f40:	4458      	add	r0, fp
 8000f42:	469b      	mov	fp, r3
 8000f44:	4483      	add	fp, r0
 8000f46:	2000      	movs	r0, #0
 8000f48:	e78d      	b.n	8000e66 <__aeabi_ddiv+0x7a>
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	4323      	orrs	r3, r4
 8000f4e:	4698      	mov	r8, r3
 8000f50:	d140      	bne.n	8000fd4 <__aeabi_ddiv+0x1e8>
 8000f52:	2308      	movs	r3, #8
 8000f54:	4699      	mov	r9, r3
 8000f56:	3b06      	subs	r3, #6
 8000f58:	2500      	movs	r5, #0
 8000f5a:	4683      	mov	fp, r0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	e769      	b.n	8000e34 <__aeabi_ddiv+0x48>
 8000f60:	46b2      	mov	sl, r6
 8000f62:	9b00      	ldr	r3, [sp, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d0a9      	beq.n	8000ebc <__aeabi_ddiv+0xd0>
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_ddiv+0x182>
 8000f6c:	e211      	b.n	8001392 <__aeabi_ddiv+0x5a6>
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d093      	beq.n	8000e9a <__aeabi_ddiv+0xae>
 8000f72:	4a35      	ldr	r2, [pc, #212]	; (8001048 <__aeabi_ddiv+0x25c>)
 8000f74:	445a      	add	r2, fp
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	dc00      	bgt.n	8000f7c <__aeabi_ddiv+0x190>
 8000f7a:	e13c      	b.n	80011f6 <__aeabi_ddiv+0x40a>
 8000f7c:	076b      	lsls	r3, r5, #29
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_ddiv+0x196>
 8000f80:	e1a7      	b.n	80012d2 <__aeabi_ddiv+0x4e6>
 8000f82:	08ed      	lsrs	r5, r5, #3
 8000f84:	4643      	mov	r3, r8
 8000f86:	01db      	lsls	r3, r3, #7
 8000f88:	d506      	bpl.n	8000f98 <__aeabi_ddiv+0x1ac>
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <__aeabi_ddiv+0x260>)
 8000f8e:	401a      	ands	r2, r3
 8000f90:	4690      	mov	r8, r2
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	445a      	add	r2, fp
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <__aeabi_ddiv+0x264>)
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dc8e      	bgt.n	8000ebc <__aeabi_ddiv+0xd0>
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	0552      	lsls	r2, r2, #21
 8000fa2:	0758      	lsls	r0, r3, #29
 8000fa4:	025c      	lsls	r4, r3, #9
 8000fa6:	4305      	orrs	r5, r0
 8000fa8:	0b24      	lsrs	r4, r4, #12
 8000faa:	0d53      	lsrs	r3, r2, #21
 8000fac:	e778      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 8000fae:	46ba      	mov	sl, r7
 8000fb0:	46a0      	mov	r8, r4
 8000fb2:	0015      	movs	r5, r2
 8000fb4:	9000      	str	r0, [sp, #0]
 8000fb6:	e7d4      	b.n	8000f62 <__aeabi_ddiv+0x176>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	2303      	movs	r3, #3
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	4691      	mov	r9, r2
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	4652      	mov	r2, sl
 8000fc4:	e74f      	b.n	8000e66 <__aeabi_ddiv+0x7a>
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4319      	orrs	r1, r3
 8000fcc:	4689      	mov	r9, r1
 8000fce:	2400      	movs	r4, #0
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	e748      	b.n	8000e66 <__aeabi_ddiv+0x7a>
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	4699      	mov	r9, r3
 8000fd8:	3b09      	subs	r3, #9
 8000fda:	46a0      	mov	r8, r4
 8000fdc:	4683      	mov	fp, r0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	e728      	b.n	8000e34 <__aeabi_ddiv+0x48>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	469b      	mov	fp, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	2500      	movs	r5, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	e720      	b.n	8000e34 <__aeabi_ddiv+0x48>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	2480      	movs	r4, #128	; 0x80
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <__aeabi_ddiv+0x244>)
 8000ffc:	0324      	lsls	r4, r4, #12
 8000ffe:	e74f      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	4641      	mov	r1, r8
 8001004:	031b      	lsls	r3, r3, #12
 8001006:	4219      	tst	r1, r3
 8001008:	d008      	beq.n	800101c <__aeabi_ddiv+0x230>
 800100a:	421c      	tst	r4, r3
 800100c:	d106      	bne.n	800101c <__aeabi_ddiv+0x230>
 800100e:	431c      	orrs	r4, r3
 8001010:	0324      	lsls	r4, r4, #12
 8001012:	46ba      	mov	sl, r7
 8001014:	0015      	movs	r5, r2
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <__aeabi_ddiv+0x244>)
 8001018:	0b24      	lsrs	r4, r4, #12
 800101a:	e741      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 800101c:	2480      	movs	r4, #128	; 0x80
 800101e:	4643      	mov	r3, r8
 8001020:	0324      	lsls	r4, r4, #12
 8001022:	431c      	orrs	r4, r3
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	46b2      	mov	sl, r6
 8001028:	4b01      	ldr	r3, [pc, #4]	; (8001030 <__aeabi_ddiv+0x244>)
 800102a:	0b24      	lsrs	r4, r4, #12
 800102c:	e738      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	000007ff 	.word	0x000007ff
 8001034:	fffffc01 	.word	0xfffffc01
 8001038:	080049c4 	.word	0x080049c4
 800103c:	fffff801 	.word	0xfffff801
 8001040:	fffffc0d 	.word	0xfffffc0d
 8001044:	000003f3 	.word	0x000003f3
 8001048:	000003ff 	.word	0x000003ff
 800104c:	feffffff 	.word	0xfeffffff
 8001050:	000007fe 	.word	0x000007fe
 8001054:	4544      	cmp	r4, r8
 8001056:	d200      	bcs.n	800105a <__aeabi_ddiv+0x26e>
 8001058:	e116      	b.n	8001288 <__aeabi_ddiv+0x49c>
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x272>
 800105c:	e111      	b.n	8001282 <__aeabi_ddiv+0x496>
 800105e:	2301      	movs	r3, #1
 8001060:	425b      	negs	r3, r3
 8001062:	469c      	mov	ip, r3
 8001064:	002e      	movs	r6, r5
 8001066:	4640      	mov	r0, r8
 8001068:	2500      	movs	r5, #0
 800106a:	44e3      	add	fp, ip
 800106c:	0223      	lsls	r3, r4, #8
 800106e:	0e14      	lsrs	r4, r2, #24
 8001070:	431c      	orrs	r4, r3
 8001072:	0c1b      	lsrs	r3, r3, #16
 8001074:	4699      	mov	r9, r3
 8001076:	0423      	lsls	r3, r4, #16
 8001078:	0c1f      	lsrs	r7, r3, #16
 800107a:	0212      	lsls	r2, r2, #8
 800107c:	4649      	mov	r1, r9
 800107e:	9200      	str	r2, [sp, #0]
 8001080:	9701      	str	r7, [sp, #4]
 8001082:	f7ff f8c7 	bl	8000214 <__aeabi_uidivmod>
 8001086:	0002      	movs	r2, r0
 8001088:	437a      	muls	r2, r7
 800108a:	040b      	lsls	r3, r1, #16
 800108c:	0c31      	lsrs	r1, r6, #16
 800108e:	4680      	mov	r8, r0
 8001090:	4319      	orrs	r1, r3
 8001092:	428a      	cmp	r2, r1
 8001094:	d90b      	bls.n	80010ae <__aeabi_ddiv+0x2c2>
 8001096:	2301      	movs	r3, #1
 8001098:	425b      	negs	r3, r3
 800109a:	469c      	mov	ip, r3
 800109c:	1909      	adds	r1, r1, r4
 800109e:	44e0      	add	r8, ip
 80010a0:	428c      	cmp	r4, r1
 80010a2:	d804      	bhi.n	80010ae <__aeabi_ddiv+0x2c2>
 80010a4:	428a      	cmp	r2, r1
 80010a6:	d902      	bls.n	80010ae <__aeabi_ddiv+0x2c2>
 80010a8:	1e83      	subs	r3, r0, #2
 80010aa:	4698      	mov	r8, r3
 80010ac:	1909      	adds	r1, r1, r4
 80010ae:	1a88      	subs	r0, r1, r2
 80010b0:	4649      	mov	r1, r9
 80010b2:	f7ff f8af 	bl	8000214 <__aeabi_uidivmod>
 80010b6:	0409      	lsls	r1, r1, #16
 80010b8:	468c      	mov	ip, r1
 80010ba:	0431      	lsls	r1, r6, #16
 80010bc:	4666      	mov	r6, ip
 80010be:	9a01      	ldr	r2, [sp, #4]
 80010c0:	0c09      	lsrs	r1, r1, #16
 80010c2:	4342      	muls	r2, r0
 80010c4:	0003      	movs	r3, r0
 80010c6:	4331      	orrs	r1, r6
 80010c8:	428a      	cmp	r2, r1
 80010ca:	d904      	bls.n	80010d6 <__aeabi_ddiv+0x2ea>
 80010cc:	1909      	adds	r1, r1, r4
 80010ce:	3b01      	subs	r3, #1
 80010d0:	428c      	cmp	r4, r1
 80010d2:	d800      	bhi.n	80010d6 <__aeabi_ddiv+0x2ea>
 80010d4:	e111      	b.n	80012fa <__aeabi_ddiv+0x50e>
 80010d6:	1a89      	subs	r1, r1, r2
 80010d8:	4642      	mov	r2, r8
 80010da:	9e00      	ldr	r6, [sp, #0]
 80010dc:	0412      	lsls	r2, r2, #16
 80010de:	431a      	orrs	r2, r3
 80010e0:	0c33      	lsrs	r3, r6, #16
 80010e2:	001f      	movs	r7, r3
 80010e4:	0c10      	lsrs	r0, r2, #16
 80010e6:	4690      	mov	r8, r2
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	0413      	lsls	r3, r2, #16
 80010ec:	0432      	lsls	r2, r6, #16
 80010ee:	0c16      	lsrs	r6, r2, #16
 80010f0:	0032      	movs	r2, r6
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	435a      	muls	r2, r3
 80010f6:	9603      	str	r6, [sp, #12]
 80010f8:	437b      	muls	r3, r7
 80010fa:	4346      	muls	r6, r0
 80010fc:	4378      	muls	r0, r7
 80010fe:	0c17      	lsrs	r7, r2, #16
 8001100:	46bc      	mov	ip, r7
 8001102:	199b      	adds	r3, r3, r6
 8001104:	4463      	add	r3, ip
 8001106:	429e      	cmp	r6, r3
 8001108:	d903      	bls.n	8001112 <__aeabi_ddiv+0x326>
 800110a:	2680      	movs	r6, #128	; 0x80
 800110c:	0276      	lsls	r6, r6, #9
 800110e:	46b4      	mov	ip, r6
 8001110:	4460      	add	r0, ip
 8001112:	0c1e      	lsrs	r6, r3, #16
 8001114:	1830      	adds	r0, r6, r0
 8001116:	0416      	lsls	r6, r2, #16
 8001118:	041b      	lsls	r3, r3, #16
 800111a:	0c36      	lsrs	r6, r6, #16
 800111c:	199e      	adds	r6, r3, r6
 800111e:	4281      	cmp	r1, r0
 8001120:	d200      	bcs.n	8001124 <__aeabi_ddiv+0x338>
 8001122:	e09c      	b.n	800125e <__aeabi_ddiv+0x472>
 8001124:	d100      	bne.n	8001128 <__aeabi_ddiv+0x33c>
 8001126:	e097      	b.n	8001258 <__aeabi_ddiv+0x46c>
 8001128:	1bae      	subs	r6, r5, r6
 800112a:	1a09      	subs	r1, r1, r0
 800112c:	42b5      	cmp	r5, r6
 800112e:	4180      	sbcs	r0, r0
 8001130:	4240      	negs	r0, r0
 8001132:	1a08      	subs	r0, r1, r0
 8001134:	4284      	cmp	r4, r0
 8001136:	d100      	bne.n	800113a <__aeabi_ddiv+0x34e>
 8001138:	e111      	b.n	800135e <__aeabi_ddiv+0x572>
 800113a:	4649      	mov	r1, r9
 800113c:	f7ff f86a 	bl	8000214 <__aeabi_uidivmod>
 8001140:	9a01      	ldr	r2, [sp, #4]
 8001142:	040b      	lsls	r3, r1, #16
 8001144:	4342      	muls	r2, r0
 8001146:	0c31      	lsrs	r1, r6, #16
 8001148:	0005      	movs	r5, r0
 800114a:	4319      	orrs	r1, r3
 800114c:	428a      	cmp	r2, r1
 800114e:	d907      	bls.n	8001160 <__aeabi_ddiv+0x374>
 8001150:	1909      	adds	r1, r1, r4
 8001152:	3d01      	subs	r5, #1
 8001154:	428c      	cmp	r4, r1
 8001156:	d803      	bhi.n	8001160 <__aeabi_ddiv+0x374>
 8001158:	428a      	cmp	r2, r1
 800115a:	d901      	bls.n	8001160 <__aeabi_ddiv+0x374>
 800115c:	1e85      	subs	r5, r0, #2
 800115e:	1909      	adds	r1, r1, r4
 8001160:	1a88      	subs	r0, r1, r2
 8001162:	4649      	mov	r1, r9
 8001164:	f7ff f856 	bl	8000214 <__aeabi_uidivmod>
 8001168:	0409      	lsls	r1, r1, #16
 800116a:	468c      	mov	ip, r1
 800116c:	0431      	lsls	r1, r6, #16
 800116e:	4666      	mov	r6, ip
 8001170:	9a01      	ldr	r2, [sp, #4]
 8001172:	0c09      	lsrs	r1, r1, #16
 8001174:	4342      	muls	r2, r0
 8001176:	0003      	movs	r3, r0
 8001178:	4331      	orrs	r1, r6
 800117a:	428a      	cmp	r2, r1
 800117c:	d907      	bls.n	800118e <__aeabi_ddiv+0x3a2>
 800117e:	1909      	adds	r1, r1, r4
 8001180:	3b01      	subs	r3, #1
 8001182:	428c      	cmp	r4, r1
 8001184:	d803      	bhi.n	800118e <__aeabi_ddiv+0x3a2>
 8001186:	428a      	cmp	r2, r1
 8001188:	d901      	bls.n	800118e <__aeabi_ddiv+0x3a2>
 800118a:	1e83      	subs	r3, r0, #2
 800118c:	1909      	adds	r1, r1, r4
 800118e:	9e03      	ldr	r6, [sp, #12]
 8001190:	1a89      	subs	r1, r1, r2
 8001192:	0032      	movs	r2, r6
 8001194:	042d      	lsls	r5, r5, #16
 8001196:	431d      	orrs	r5, r3
 8001198:	9f02      	ldr	r7, [sp, #8]
 800119a:	042b      	lsls	r3, r5, #16
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	435a      	muls	r2, r3
 80011a0:	437b      	muls	r3, r7
 80011a2:	469c      	mov	ip, r3
 80011a4:	0c28      	lsrs	r0, r5, #16
 80011a6:	4346      	muls	r6, r0
 80011a8:	0c13      	lsrs	r3, r2, #16
 80011aa:	44b4      	add	ip, r6
 80011ac:	4463      	add	r3, ip
 80011ae:	4378      	muls	r0, r7
 80011b0:	429e      	cmp	r6, r3
 80011b2:	d903      	bls.n	80011bc <__aeabi_ddiv+0x3d0>
 80011b4:	2680      	movs	r6, #128	; 0x80
 80011b6:	0276      	lsls	r6, r6, #9
 80011b8:	46b4      	mov	ip, r6
 80011ba:	4460      	add	r0, ip
 80011bc:	0c1e      	lsrs	r6, r3, #16
 80011be:	0412      	lsls	r2, r2, #16
 80011c0:	041b      	lsls	r3, r3, #16
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	1830      	adds	r0, r6, r0
 80011c6:	189b      	adds	r3, r3, r2
 80011c8:	4281      	cmp	r1, r0
 80011ca:	d306      	bcc.n	80011da <__aeabi_ddiv+0x3ee>
 80011cc:	d002      	beq.n	80011d4 <__aeabi_ddiv+0x3e8>
 80011ce:	2301      	movs	r3, #1
 80011d0:	431d      	orrs	r5, r3
 80011d2:	e6ce      	b.n	8000f72 <__aeabi_ddiv+0x186>
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x3ee>
 80011d8:	e6cb      	b.n	8000f72 <__aeabi_ddiv+0x186>
 80011da:	1861      	adds	r1, r4, r1
 80011dc:	1e6e      	subs	r6, r5, #1
 80011de:	42a1      	cmp	r1, r4
 80011e0:	d200      	bcs.n	80011e4 <__aeabi_ddiv+0x3f8>
 80011e2:	e0a4      	b.n	800132e <__aeabi_ddiv+0x542>
 80011e4:	4281      	cmp	r1, r0
 80011e6:	d200      	bcs.n	80011ea <__aeabi_ddiv+0x3fe>
 80011e8:	e0c9      	b.n	800137e <__aeabi_ddiv+0x592>
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x402>
 80011ec:	e0d9      	b.n	80013a2 <__aeabi_ddiv+0x5b6>
 80011ee:	0035      	movs	r5, r6
 80011f0:	e7ed      	b.n	80011ce <__aeabi_ddiv+0x3e2>
 80011f2:	2501      	movs	r5, #1
 80011f4:	426d      	negs	r5, r5
 80011f6:	2101      	movs	r1, #1
 80011f8:	1a89      	subs	r1, r1, r2
 80011fa:	2938      	cmp	r1, #56	; 0x38
 80011fc:	dd00      	ble.n	8001200 <__aeabi_ddiv+0x414>
 80011fe:	e64c      	b.n	8000e9a <__aeabi_ddiv+0xae>
 8001200:	291f      	cmp	r1, #31
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x41a>
 8001204:	e07f      	b.n	8001306 <__aeabi_ddiv+0x51a>
 8001206:	231f      	movs	r3, #31
 8001208:	425b      	negs	r3, r3
 800120a:	1a9a      	subs	r2, r3, r2
 800120c:	4643      	mov	r3, r8
 800120e:	40d3      	lsrs	r3, r2
 8001210:	2920      	cmp	r1, #32
 8001212:	d004      	beq.n	800121e <__aeabi_ddiv+0x432>
 8001214:	4644      	mov	r4, r8
 8001216:	4a65      	ldr	r2, [pc, #404]	; (80013ac <__aeabi_ddiv+0x5c0>)
 8001218:	445a      	add	r2, fp
 800121a:	4094      	lsls	r4, r2
 800121c:	4325      	orrs	r5, r4
 800121e:	1e6a      	subs	r2, r5, #1
 8001220:	4195      	sbcs	r5, r2
 8001222:	2207      	movs	r2, #7
 8001224:	432b      	orrs	r3, r5
 8001226:	0015      	movs	r5, r2
 8001228:	2400      	movs	r4, #0
 800122a:	401d      	ands	r5, r3
 800122c:	421a      	tst	r2, r3
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x446>
 8001230:	e0a1      	b.n	8001376 <__aeabi_ddiv+0x58a>
 8001232:	220f      	movs	r2, #15
 8001234:	2400      	movs	r4, #0
 8001236:	401a      	ands	r2, r3
 8001238:	2a04      	cmp	r2, #4
 800123a:	d100      	bne.n	800123e <__aeabi_ddiv+0x452>
 800123c:	e098      	b.n	8001370 <__aeabi_ddiv+0x584>
 800123e:	1d1a      	adds	r2, r3, #4
 8001240:	429a      	cmp	r2, r3
 8001242:	419b      	sbcs	r3, r3
 8001244:	425b      	negs	r3, r3
 8001246:	18e4      	adds	r4, r4, r3
 8001248:	0013      	movs	r3, r2
 800124a:	0222      	lsls	r2, r4, #8
 800124c:	d400      	bmi.n	8001250 <__aeabi_ddiv+0x464>
 800124e:	e08f      	b.n	8001370 <__aeabi_ddiv+0x584>
 8001250:	2301      	movs	r3, #1
 8001252:	2400      	movs	r4, #0
 8001254:	2500      	movs	r5, #0
 8001256:	e623      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 8001258:	42b5      	cmp	r5, r6
 800125a:	d300      	bcc.n	800125e <__aeabi_ddiv+0x472>
 800125c:	e764      	b.n	8001128 <__aeabi_ddiv+0x33c>
 800125e:	4643      	mov	r3, r8
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	469c      	mov	ip, r3
 8001266:	4465      	add	r5, ip
 8001268:	001f      	movs	r7, r3
 800126a:	429d      	cmp	r5, r3
 800126c:	419b      	sbcs	r3, r3
 800126e:	425b      	negs	r3, r3
 8001270:	191b      	adds	r3, r3, r4
 8001272:	18c9      	adds	r1, r1, r3
 8001274:	428c      	cmp	r4, r1
 8001276:	d23a      	bcs.n	80012ee <__aeabi_ddiv+0x502>
 8001278:	4288      	cmp	r0, r1
 800127a:	d863      	bhi.n	8001344 <__aeabi_ddiv+0x558>
 800127c:	d060      	beq.n	8001340 <__aeabi_ddiv+0x554>
 800127e:	4690      	mov	r8, r2
 8001280:	e752      	b.n	8001128 <__aeabi_ddiv+0x33c>
 8001282:	42aa      	cmp	r2, r5
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x49c>
 8001286:	e6ea      	b.n	800105e <__aeabi_ddiv+0x272>
 8001288:	4643      	mov	r3, r8
 800128a:	07de      	lsls	r6, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	086b      	lsrs	r3, r5, #1
 8001290:	431e      	orrs	r6, r3
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	e6ea      	b.n	800106c <__aeabi_ddiv+0x280>
 8001296:	4648      	mov	r0, r9
 8001298:	f001 f882 	bl	80023a0 <__clzsi2>
 800129c:	0001      	movs	r1, r0
 800129e:	0002      	movs	r2, r0
 80012a0:	3115      	adds	r1, #21
 80012a2:	3220      	adds	r2, #32
 80012a4:	291c      	cmp	r1, #28
 80012a6:	dc00      	bgt.n	80012aa <__aeabi_ddiv+0x4be>
 80012a8:	e61a      	b.n	8000ee0 <__aeabi_ddiv+0xf4>
 80012aa:	464b      	mov	r3, r9
 80012ac:	3808      	subs	r0, #8
 80012ae:	4083      	lsls	r3, r0
 80012b0:	2500      	movs	r5, #0
 80012b2:	4698      	mov	r8, r3
 80012b4:	e620      	b.n	8000ef8 <__aeabi_ddiv+0x10c>
 80012b6:	f001 f873 	bl	80023a0 <__clzsi2>
 80012ba:	0003      	movs	r3, r0
 80012bc:	001a      	movs	r2, r3
 80012be:	3215      	adds	r2, #21
 80012c0:	3020      	adds	r0, #32
 80012c2:	2a1c      	cmp	r2, #28
 80012c4:	dc00      	bgt.n	80012c8 <__aeabi_ddiv+0x4dc>
 80012c6:	e630      	b.n	8000f2a <__aeabi_ddiv+0x13e>
 80012c8:	4654      	mov	r4, sl
 80012ca:	3b08      	subs	r3, #8
 80012cc:	2200      	movs	r2, #0
 80012ce:	409c      	lsls	r4, r3
 80012d0:	e635      	b.n	8000f3e <__aeabi_ddiv+0x152>
 80012d2:	230f      	movs	r3, #15
 80012d4:	402b      	ands	r3, r5
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d100      	bne.n	80012dc <__aeabi_ddiv+0x4f0>
 80012da:	e652      	b.n	8000f82 <__aeabi_ddiv+0x196>
 80012dc:	2305      	movs	r3, #5
 80012de:	425b      	negs	r3, r3
 80012e0:	42ab      	cmp	r3, r5
 80012e2:	419b      	sbcs	r3, r3
 80012e4:	3504      	adds	r5, #4
 80012e6:	425b      	negs	r3, r3
 80012e8:	08ed      	lsrs	r5, r5, #3
 80012ea:	4498      	add	r8, r3
 80012ec:	e64a      	b.n	8000f84 <__aeabi_ddiv+0x198>
 80012ee:	428c      	cmp	r4, r1
 80012f0:	d1c5      	bne.n	800127e <__aeabi_ddiv+0x492>
 80012f2:	42af      	cmp	r7, r5
 80012f4:	d9c0      	bls.n	8001278 <__aeabi_ddiv+0x48c>
 80012f6:	4690      	mov	r8, r2
 80012f8:	e716      	b.n	8001128 <__aeabi_ddiv+0x33c>
 80012fa:	428a      	cmp	r2, r1
 80012fc:	d800      	bhi.n	8001300 <__aeabi_ddiv+0x514>
 80012fe:	e6ea      	b.n	80010d6 <__aeabi_ddiv+0x2ea>
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	1909      	adds	r1, r1, r4
 8001304:	e6e7      	b.n	80010d6 <__aeabi_ddiv+0x2ea>
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <__aeabi_ddiv+0x5c4>)
 8001308:	0028      	movs	r0, r5
 800130a:	445a      	add	r2, fp
 800130c:	4643      	mov	r3, r8
 800130e:	4095      	lsls	r5, r2
 8001310:	4093      	lsls	r3, r2
 8001312:	40c8      	lsrs	r0, r1
 8001314:	1e6a      	subs	r2, r5, #1
 8001316:	4195      	sbcs	r5, r2
 8001318:	4644      	mov	r4, r8
 800131a:	4303      	orrs	r3, r0
 800131c:	432b      	orrs	r3, r5
 800131e:	40cc      	lsrs	r4, r1
 8001320:	075a      	lsls	r2, r3, #29
 8001322:	d092      	beq.n	800124a <__aeabi_ddiv+0x45e>
 8001324:	220f      	movs	r2, #15
 8001326:	401a      	ands	r2, r3
 8001328:	2a04      	cmp	r2, #4
 800132a:	d188      	bne.n	800123e <__aeabi_ddiv+0x452>
 800132c:	e78d      	b.n	800124a <__aeabi_ddiv+0x45e>
 800132e:	0035      	movs	r5, r6
 8001330:	4281      	cmp	r1, r0
 8001332:	d000      	beq.n	8001336 <__aeabi_ddiv+0x54a>
 8001334:	e74b      	b.n	80011ce <__aeabi_ddiv+0x3e2>
 8001336:	9a00      	ldr	r2, [sp, #0]
 8001338:	4293      	cmp	r3, r2
 800133a:	d000      	beq.n	800133e <__aeabi_ddiv+0x552>
 800133c:	e747      	b.n	80011ce <__aeabi_ddiv+0x3e2>
 800133e:	e618      	b.n	8000f72 <__aeabi_ddiv+0x186>
 8001340:	42ae      	cmp	r6, r5
 8001342:	d99c      	bls.n	800127e <__aeabi_ddiv+0x492>
 8001344:	2302      	movs	r3, #2
 8001346:	425b      	negs	r3, r3
 8001348:	469c      	mov	ip, r3
 800134a:	9b00      	ldr	r3, [sp, #0]
 800134c:	44e0      	add	r8, ip
 800134e:	469c      	mov	ip, r3
 8001350:	4465      	add	r5, ip
 8001352:	429d      	cmp	r5, r3
 8001354:	419b      	sbcs	r3, r3
 8001356:	425b      	negs	r3, r3
 8001358:	191b      	adds	r3, r3, r4
 800135a:	18c9      	adds	r1, r1, r3
 800135c:	e6e4      	b.n	8001128 <__aeabi_ddiv+0x33c>
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <__aeabi_ddiv+0x5c8>)
 8001360:	445a      	add	r2, fp
 8001362:	2a00      	cmp	r2, #0
 8001364:	dc00      	bgt.n	8001368 <__aeabi_ddiv+0x57c>
 8001366:	e744      	b.n	80011f2 <__aeabi_ddiv+0x406>
 8001368:	2301      	movs	r3, #1
 800136a:	2500      	movs	r5, #0
 800136c:	4498      	add	r8, r3
 800136e:	e609      	b.n	8000f84 <__aeabi_ddiv+0x198>
 8001370:	0765      	lsls	r5, r4, #29
 8001372:	0264      	lsls	r4, r4, #9
 8001374:	0b24      	lsrs	r4, r4, #12
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	431d      	orrs	r5, r3
 800137a:	2300      	movs	r3, #0
 800137c:	e590      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 800137e:	9e00      	ldr	r6, [sp, #0]
 8001380:	3d02      	subs	r5, #2
 8001382:	0072      	lsls	r2, r6, #1
 8001384:	42b2      	cmp	r2, r6
 8001386:	41bf      	sbcs	r7, r7
 8001388:	427f      	negs	r7, r7
 800138a:	193c      	adds	r4, r7, r4
 800138c:	1909      	adds	r1, r1, r4
 800138e:	9200      	str	r2, [sp, #0]
 8001390:	e7ce      	b.n	8001330 <__aeabi_ddiv+0x544>
 8001392:	2480      	movs	r4, #128	; 0x80
 8001394:	4643      	mov	r3, r8
 8001396:	0324      	lsls	r4, r4, #12
 8001398:	431c      	orrs	r4, r3
 800139a:	0324      	lsls	r4, r4, #12
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <__aeabi_ddiv+0x5cc>)
 800139e:	0b24      	lsrs	r4, r4, #12
 80013a0:	e57e      	b.n	8000ea0 <__aeabi_ddiv+0xb4>
 80013a2:	9a00      	ldr	r2, [sp, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3ea      	bcc.n	800137e <__aeabi_ddiv+0x592>
 80013a8:	0035      	movs	r5, r6
 80013aa:	e7c4      	b.n	8001336 <__aeabi_ddiv+0x54a>
 80013ac:	0000043e 	.word	0x0000043e
 80013b0:	0000041e 	.word	0x0000041e
 80013b4:	000003ff 	.word	0x000003ff
 80013b8:	000007ff 	.word	0x000007ff

080013bc <__eqdf2>:
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	464f      	mov	r7, r9
 80013c0:	4646      	mov	r6, r8
 80013c2:	46d6      	mov	lr, sl
 80013c4:	4694      	mov	ip, r2
 80013c6:	4691      	mov	r9, r2
 80013c8:	031a      	lsls	r2, r3, #12
 80013ca:	0b12      	lsrs	r2, r2, #12
 80013cc:	4d18      	ldr	r5, [pc, #96]	; (8001430 <__eqdf2+0x74>)
 80013ce:	b5c0      	push	{r6, r7, lr}
 80013d0:	004c      	lsls	r4, r1, #1
 80013d2:	030f      	lsls	r7, r1, #12
 80013d4:	4692      	mov	sl, r2
 80013d6:	005a      	lsls	r2, r3, #1
 80013d8:	0006      	movs	r6, r0
 80013da:	4680      	mov	r8, r0
 80013dc:	0b3f      	lsrs	r7, r7, #12
 80013de:	2001      	movs	r0, #1
 80013e0:	0d64      	lsrs	r4, r4, #21
 80013e2:	0fc9      	lsrs	r1, r1, #31
 80013e4:	0d52      	lsrs	r2, r2, #21
 80013e6:	0fdb      	lsrs	r3, r3, #31
 80013e8:	42ac      	cmp	r4, r5
 80013ea:	d00a      	beq.n	8001402 <__eqdf2+0x46>
 80013ec:	42aa      	cmp	r2, r5
 80013ee:	d003      	beq.n	80013f8 <__eqdf2+0x3c>
 80013f0:	4294      	cmp	r4, r2
 80013f2:	d101      	bne.n	80013f8 <__eqdf2+0x3c>
 80013f4:	4557      	cmp	r7, sl
 80013f6:	d00d      	beq.n	8001414 <__eqdf2+0x58>
 80013f8:	bce0      	pop	{r5, r6, r7}
 80013fa:	46ba      	mov	sl, r7
 80013fc:	46b1      	mov	r9, r6
 80013fe:	46a8      	mov	r8, r5
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	003d      	movs	r5, r7
 8001404:	4335      	orrs	r5, r6
 8001406:	d1f7      	bne.n	80013f8 <__eqdf2+0x3c>
 8001408:	42a2      	cmp	r2, r4
 800140a:	d1f5      	bne.n	80013f8 <__eqdf2+0x3c>
 800140c:	4652      	mov	r2, sl
 800140e:	4665      	mov	r5, ip
 8001410:	432a      	orrs	r2, r5
 8001412:	d1f1      	bne.n	80013f8 <__eqdf2+0x3c>
 8001414:	2001      	movs	r0, #1
 8001416:	45c8      	cmp	r8, r9
 8001418:	d1ee      	bne.n	80013f8 <__eqdf2+0x3c>
 800141a:	4299      	cmp	r1, r3
 800141c:	d006      	beq.n	800142c <__eqdf2+0x70>
 800141e:	2c00      	cmp	r4, #0
 8001420:	d1ea      	bne.n	80013f8 <__eqdf2+0x3c>
 8001422:	433e      	orrs	r6, r7
 8001424:	0030      	movs	r0, r6
 8001426:	1e46      	subs	r6, r0, #1
 8001428:	41b0      	sbcs	r0, r6
 800142a:	e7e5      	b.n	80013f8 <__eqdf2+0x3c>
 800142c:	2000      	movs	r0, #0
 800142e:	e7e3      	b.n	80013f8 <__eqdf2+0x3c>
 8001430:	000007ff 	.word	0x000007ff

08001434 <__gedf2>:
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	464e      	mov	r6, r9
 8001438:	4645      	mov	r5, r8
 800143a:	4657      	mov	r7, sl
 800143c:	46de      	mov	lr, fp
 800143e:	0004      	movs	r4, r0
 8001440:	0018      	movs	r0, r3
 8001442:	b5e0      	push	{r5, r6, r7, lr}
 8001444:	0016      	movs	r6, r2
 8001446:	031b      	lsls	r3, r3, #12
 8001448:	0b1b      	lsrs	r3, r3, #12
 800144a:	4d32      	ldr	r5, [pc, #200]	; (8001514 <__gedf2+0xe0>)
 800144c:	030f      	lsls	r7, r1, #12
 800144e:	004a      	lsls	r2, r1, #1
 8001450:	4699      	mov	r9, r3
 8001452:	0043      	lsls	r3, r0, #1
 8001454:	46a4      	mov	ip, r4
 8001456:	46b0      	mov	r8, r6
 8001458:	0b3f      	lsrs	r7, r7, #12
 800145a:	0d52      	lsrs	r2, r2, #21
 800145c:	0fc9      	lsrs	r1, r1, #31
 800145e:	0d5b      	lsrs	r3, r3, #21
 8001460:	0fc0      	lsrs	r0, r0, #31
 8001462:	42aa      	cmp	r2, r5
 8001464:	d029      	beq.n	80014ba <__gedf2+0x86>
 8001466:	42ab      	cmp	r3, r5
 8001468:	d018      	beq.n	800149c <__gedf2+0x68>
 800146a:	2a00      	cmp	r2, #0
 800146c:	d12a      	bne.n	80014c4 <__gedf2+0x90>
 800146e:	433c      	orrs	r4, r7
 8001470:	46a3      	mov	fp, r4
 8001472:	4265      	negs	r5, r4
 8001474:	4165      	adcs	r5, r4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <__gedf2+0x4c>
 800147a:	464c      	mov	r4, r9
 800147c:	4326      	orrs	r6, r4
 800147e:	d027      	beq.n	80014d0 <__gedf2+0x9c>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d115      	bne.n	80014b0 <__gedf2+0x7c>
 8001484:	4281      	cmp	r1, r0
 8001486:	d028      	beq.n	80014da <__gedf2+0xa6>
 8001488:	2002      	movs	r0, #2
 800148a:	3901      	subs	r1, #1
 800148c:	4008      	ands	r0, r1
 800148e:	3801      	subs	r0, #1
 8001490:	bcf0      	pop	{r4, r5, r6, r7}
 8001492:	46bb      	mov	fp, r7
 8001494:	46b2      	mov	sl, r6
 8001496:	46a9      	mov	r9, r5
 8001498:	46a0      	mov	r8, r4
 800149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149c:	464d      	mov	r5, r9
 800149e:	432e      	orrs	r6, r5
 80014a0:	d12f      	bne.n	8001502 <__gedf2+0xce>
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d1ee      	bne.n	8001484 <__gedf2+0x50>
 80014a6:	433c      	orrs	r4, r7
 80014a8:	4265      	negs	r5, r4
 80014aa:	4165      	adcs	r5, r4
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	d0e9      	beq.n	8001484 <__gedf2+0x50>
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d1ed      	bne.n	8001490 <__gedf2+0x5c>
 80014b4:	2001      	movs	r0, #1
 80014b6:	4240      	negs	r0, r0
 80014b8:	e7ea      	b.n	8001490 <__gedf2+0x5c>
 80014ba:	003d      	movs	r5, r7
 80014bc:	4325      	orrs	r5, r4
 80014be:	d120      	bne.n	8001502 <__gedf2+0xce>
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d0eb      	beq.n	800149c <__gedf2+0x68>
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1dd      	bne.n	8001484 <__gedf2+0x50>
 80014c8:	464c      	mov	r4, r9
 80014ca:	4326      	orrs	r6, r4
 80014cc:	d1da      	bne.n	8001484 <__gedf2+0x50>
 80014ce:	e7db      	b.n	8001488 <__gedf2+0x54>
 80014d0:	465b      	mov	r3, fp
 80014d2:	2000      	movs	r0, #0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0db      	beq.n	8001490 <__gedf2+0x5c>
 80014d8:	e7d6      	b.n	8001488 <__gedf2+0x54>
 80014da:	429a      	cmp	r2, r3
 80014dc:	dc0a      	bgt.n	80014f4 <__gedf2+0xc0>
 80014de:	dbe7      	blt.n	80014b0 <__gedf2+0x7c>
 80014e0:	454f      	cmp	r7, r9
 80014e2:	d8d1      	bhi.n	8001488 <__gedf2+0x54>
 80014e4:	d010      	beq.n	8001508 <__gedf2+0xd4>
 80014e6:	2000      	movs	r0, #0
 80014e8:	454f      	cmp	r7, r9
 80014ea:	d2d1      	bcs.n	8001490 <__gedf2+0x5c>
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d0e1      	beq.n	80014b4 <__gedf2+0x80>
 80014f0:	0008      	movs	r0, r1
 80014f2:	e7cd      	b.n	8001490 <__gedf2+0x5c>
 80014f4:	4243      	negs	r3, r0
 80014f6:	4158      	adcs	r0, r3
 80014f8:	2302      	movs	r3, #2
 80014fa:	4240      	negs	r0, r0
 80014fc:	4018      	ands	r0, r3
 80014fe:	3801      	subs	r0, #1
 8001500:	e7c6      	b.n	8001490 <__gedf2+0x5c>
 8001502:	2002      	movs	r0, #2
 8001504:	4240      	negs	r0, r0
 8001506:	e7c3      	b.n	8001490 <__gedf2+0x5c>
 8001508:	45c4      	cmp	ip, r8
 800150a:	d8bd      	bhi.n	8001488 <__gedf2+0x54>
 800150c:	2000      	movs	r0, #0
 800150e:	45c4      	cmp	ip, r8
 8001510:	d2be      	bcs.n	8001490 <__gedf2+0x5c>
 8001512:	e7eb      	b.n	80014ec <__gedf2+0xb8>
 8001514:	000007ff 	.word	0x000007ff

08001518 <__ledf2>:
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	464e      	mov	r6, r9
 800151c:	4645      	mov	r5, r8
 800151e:	4657      	mov	r7, sl
 8001520:	46de      	mov	lr, fp
 8001522:	0004      	movs	r4, r0
 8001524:	0018      	movs	r0, r3
 8001526:	b5e0      	push	{r5, r6, r7, lr}
 8001528:	0016      	movs	r6, r2
 800152a:	031b      	lsls	r3, r3, #12
 800152c:	0b1b      	lsrs	r3, r3, #12
 800152e:	4d31      	ldr	r5, [pc, #196]	; (80015f4 <__ledf2+0xdc>)
 8001530:	030f      	lsls	r7, r1, #12
 8001532:	004a      	lsls	r2, r1, #1
 8001534:	4699      	mov	r9, r3
 8001536:	0043      	lsls	r3, r0, #1
 8001538:	46a4      	mov	ip, r4
 800153a:	46b0      	mov	r8, r6
 800153c:	0b3f      	lsrs	r7, r7, #12
 800153e:	0d52      	lsrs	r2, r2, #21
 8001540:	0fc9      	lsrs	r1, r1, #31
 8001542:	0d5b      	lsrs	r3, r3, #21
 8001544:	0fc0      	lsrs	r0, r0, #31
 8001546:	42aa      	cmp	r2, r5
 8001548:	d011      	beq.n	800156e <__ledf2+0x56>
 800154a:	42ab      	cmp	r3, r5
 800154c:	d014      	beq.n	8001578 <__ledf2+0x60>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d12f      	bne.n	80015b2 <__ledf2+0x9a>
 8001552:	433c      	orrs	r4, r7
 8001554:	46a3      	mov	fp, r4
 8001556:	4265      	negs	r5, r4
 8001558:	4165      	adcs	r5, r4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d114      	bne.n	8001588 <__ledf2+0x70>
 800155e:	464c      	mov	r4, r9
 8001560:	4326      	orrs	r6, r4
 8001562:	d111      	bne.n	8001588 <__ledf2+0x70>
 8001564:	465b      	mov	r3, fp
 8001566:	2000      	movs	r0, #0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d017      	beq.n	800159c <__ledf2+0x84>
 800156c:	e010      	b.n	8001590 <__ledf2+0x78>
 800156e:	003d      	movs	r5, r7
 8001570:	4325      	orrs	r5, r4
 8001572:	d112      	bne.n	800159a <__ledf2+0x82>
 8001574:	4293      	cmp	r3, r2
 8001576:	d11c      	bne.n	80015b2 <__ledf2+0x9a>
 8001578:	464d      	mov	r5, r9
 800157a:	432e      	orrs	r6, r5
 800157c:	d10d      	bne.n	800159a <__ledf2+0x82>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d104      	bne.n	800158c <__ledf2+0x74>
 8001582:	433c      	orrs	r4, r7
 8001584:	4265      	negs	r5, r4
 8001586:	4165      	adcs	r5, r4
 8001588:	2d00      	cmp	r5, #0
 800158a:	d10d      	bne.n	80015a8 <__ledf2+0x90>
 800158c:	4281      	cmp	r1, r0
 800158e:	d016      	beq.n	80015be <__ledf2+0xa6>
 8001590:	2002      	movs	r0, #2
 8001592:	3901      	subs	r1, #1
 8001594:	4008      	ands	r0, r1
 8001596:	3801      	subs	r0, #1
 8001598:	e000      	b.n	800159c <__ledf2+0x84>
 800159a:	2002      	movs	r0, #2
 800159c:	bcf0      	pop	{r4, r5, r6, r7}
 800159e:	46bb      	mov	fp, r7
 80015a0:	46b2      	mov	sl, r6
 80015a2:	46a9      	mov	r9, r5
 80015a4:	46a0      	mov	r8, r4
 80015a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d1f7      	bne.n	800159c <__ledf2+0x84>
 80015ac:	2001      	movs	r0, #1
 80015ae:	4240      	negs	r0, r0
 80015b0:	e7f4      	b.n	800159c <__ledf2+0x84>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ea      	bne.n	800158c <__ledf2+0x74>
 80015b6:	464c      	mov	r4, r9
 80015b8:	4326      	orrs	r6, r4
 80015ba:	d1e7      	bne.n	800158c <__ledf2+0x74>
 80015bc:	e7e8      	b.n	8001590 <__ledf2+0x78>
 80015be:	429a      	cmp	r2, r3
 80015c0:	dd06      	ble.n	80015d0 <__ledf2+0xb8>
 80015c2:	4243      	negs	r3, r0
 80015c4:	4158      	adcs	r0, r3
 80015c6:	2302      	movs	r3, #2
 80015c8:	4240      	negs	r0, r0
 80015ca:	4018      	ands	r0, r3
 80015cc:	3801      	subs	r0, #1
 80015ce:	e7e5      	b.n	800159c <__ledf2+0x84>
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbe9      	blt.n	80015a8 <__ledf2+0x90>
 80015d4:	454f      	cmp	r7, r9
 80015d6:	d8db      	bhi.n	8001590 <__ledf2+0x78>
 80015d8:	d006      	beq.n	80015e8 <__ledf2+0xd0>
 80015da:	2000      	movs	r0, #0
 80015dc:	454f      	cmp	r7, r9
 80015de:	d2dd      	bcs.n	800159c <__ledf2+0x84>
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d0e3      	beq.n	80015ac <__ledf2+0x94>
 80015e4:	0008      	movs	r0, r1
 80015e6:	e7d9      	b.n	800159c <__ledf2+0x84>
 80015e8:	45c4      	cmp	ip, r8
 80015ea:	d8d1      	bhi.n	8001590 <__ledf2+0x78>
 80015ec:	2000      	movs	r0, #0
 80015ee:	45c4      	cmp	ip, r8
 80015f0:	d2d4      	bcs.n	800159c <__ledf2+0x84>
 80015f2:	e7f5      	b.n	80015e0 <__ledf2+0xc8>
 80015f4:	000007ff 	.word	0x000007ff

080015f8 <__aeabi_dmul>:
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	4657      	mov	r7, sl
 80015fc:	464e      	mov	r6, r9
 80015fe:	4645      	mov	r5, r8
 8001600:	46de      	mov	lr, fp
 8001602:	b5e0      	push	{r5, r6, r7, lr}
 8001604:	4698      	mov	r8, r3
 8001606:	030c      	lsls	r4, r1, #12
 8001608:	004b      	lsls	r3, r1, #1
 800160a:	0006      	movs	r6, r0
 800160c:	4692      	mov	sl, r2
 800160e:	b087      	sub	sp, #28
 8001610:	0b24      	lsrs	r4, r4, #12
 8001612:	0d5b      	lsrs	r3, r3, #21
 8001614:	0fcf      	lsrs	r7, r1, #31
 8001616:	2b00      	cmp	r3, #0
 8001618:	d06c      	beq.n	80016f4 <__aeabi_dmul+0xfc>
 800161a:	4add      	ldr	r2, [pc, #884]	; (8001990 <__aeabi_dmul+0x398>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d100      	bne.n	8001622 <__aeabi_dmul+0x2a>
 8001620:	e086      	b.n	8001730 <__aeabi_dmul+0x138>
 8001622:	0f42      	lsrs	r2, r0, #29
 8001624:	00e4      	lsls	r4, r4, #3
 8001626:	4314      	orrs	r4, r2
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	0412      	lsls	r2, r2, #16
 800162c:	4314      	orrs	r4, r2
 800162e:	4ad9      	ldr	r2, [pc, #868]	; (8001994 <__aeabi_dmul+0x39c>)
 8001630:	00c5      	lsls	r5, r0, #3
 8001632:	4694      	mov	ip, r2
 8001634:	4463      	add	r3, ip
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	4699      	mov	r9, r3
 800163c:	469b      	mov	fp, r3
 800163e:	4643      	mov	r3, r8
 8001640:	4642      	mov	r2, r8
 8001642:	031e      	lsls	r6, r3, #12
 8001644:	0fd2      	lsrs	r2, r2, #31
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4650      	mov	r0, sl
 800164a:	4690      	mov	r8, r2
 800164c:	0b36      	lsrs	r6, r6, #12
 800164e:	0d5b      	lsrs	r3, r3, #21
 8001650:	d100      	bne.n	8001654 <__aeabi_dmul+0x5c>
 8001652:	e078      	b.n	8001746 <__aeabi_dmul+0x14e>
 8001654:	4ace      	ldr	r2, [pc, #824]	; (8001990 <__aeabi_dmul+0x398>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01d      	beq.n	8001696 <__aeabi_dmul+0x9e>
 800165a:	49ce      	ldr	r1, [pc, #824]	; (8001994 <__aeabi_dmul+0x39c>)
 800165c:	0f42      	lsrs	r2, r0, #29
 800165e:	468c      	mov	ip, r1
 8001660:	9900      	ldr	r1, [sp, #0]
 8001662:	4463      	add	r3, ip
 8001664:	00f6      	lsls	r6, r6, #3
 8001666:	468c      	mov	ip, r1
 8001668:	4316      	orrs	r6, r2
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	449c      	add	ip, r3
 800166e:	0412      	lsls	r2, r2, #16
 8001670:	4663      	mov	r3, ip
 8001672:	4316      	orrs	r6, r2
 8001674:	00c2      	lsls	r2, r0, #3
 8001676:	2000      	movs	r0, #0
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	9900      	ldr	r1, [sp, #0]
 800167c:	4643      	mov	r3, r8
 800167e:	3101      	adds	r1, #1
 8001680:	468c      	mov	ip, r1
 8001682:	4649      	mov	r1, r9
 8001684:	407b      	eors	r3, r7
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	290f      	cmp	r1, #15
 800168a:	d900      	bls.n	800168e <__aeabi_dmul+0x96>
 800168c:	e07e      	b.n	800178c <__aeabi_dmul+0x194>
 800168e:	4bc2      	ldr	r3, [pc, #776]	; (8001998 <__aeabi_dmul+0x3a0>)
 8001690:	0089      	lsls	r1, r1, #2
 8001692:	5859      	ldr	r1, [r3, r1]
 8001694:	468f      	mov	pc, r1
 8001696:	4652      	mov	r2, sl
 8001698:	9b00      	ldr	r3, [sp, #0]
 800169a:	4332      	orrs	r2, r6
 800169c:	d000      	beq.n	80016a0 <__aeabi_dmul+0xa8>
 800169e:	e156      	b.n	800194e <__aeabi_dmul+0x356>
 80016a0:	49bb      	ldr	r1, [pc, #748]	; (8001990 <__aeabi_dmul+0x398>)
 80016a2:	2600      	movs	r6, #0
 80016a4:	468c      	mov	ip, r1
 80016a6:	4463      	add	r3, ip
 80016a8:	4649      	mov	r1, r9
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2302      	movs	r3, #2
 80016ae:	4319      	orrs	r1, r3
 80016b0:	4689      	mov	r9, r1
 80016b2:	2002      	movs	r0, #2
 80016b4:	e7e1      	b.n	800167a <__aeabi_dmul+0x82>
 80016b6:	4643      	mov	r3, r8
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	0034      	movs	r4, r6
 80016bc:	0015      	movs	r5, r2
 80016be:	4683      	mov	fp, r0
 80016c0:	465b      	mov	r3, fp
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d05e      	beq.n	8001784 <__aeabi_dmul+0x18c>
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0xd4>
 80016ca:	e1f3      	b.n	8001ab4 <__aeabi_dmul+0x4bc>
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d000      	beq.n	80016d2 <__aeabi_dmul+0xda>
 80016d0:	e118      	b.n	8001904 <__aeabi_dmul+0x30c>
 80016d2:	2200      	movs	r2, #0
 80016d4:	2400      	movs	r4, #0
 80016d6:	2500      	movs	r5, #0
 80016d8:	9b01      	ldr	r3, [sp, #4]
 80016da:	0512      	lsls	r2, r2, #20
 80016dc:	4322      	orrs	r2, r4
 80016de:	07db      	lsls	r3, r3, #31
 80016e0:	431a      	orrs	r2, r3
 80016e2:	0028      	movs	r0, r5
 80016e4:	0011      	movs	r1, r2
 80016e6:	b007      	add	sp, #28
 80016e8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ea:	46bb      	mov	fp, r7
 80016ec:	46b2      	mov	sl, r6
 80016ee:	46a9      	mov	r9, r5
 80016f0:	46a0      	mov	r8, r4
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	0025      	movs	r5, r4
 80016f6:	4305      	orrs	r5, r0
 80016f8:	d100      	bne.n	80016fc <__aeabi_dmul+0x104>
 80016fa:	e141      	b.n	8001980 <__aeabi_dmul+0x388>
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_dmul+0x10a>
 8001700:	e1ad      	b.n	8001a5e <__aeabi_dmul+0x466>
 8001702:	0020      	movs	r0, r4
 8001704:	f000 fe4c 	bl	80023a0 <__clzsi2>
 8001708:	0001      	movs	r1, r0
 800170a:	0002      	movs	r2, r0
 800170c:	390b      	subs	r1, #11
 800170e:	231d      	movs	r3, #29
 8001710:	0010      	movs	r0, r2
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	0031      	movs	r1, r6
 8001716:	0035      	movs	r5, r6
 8001718:	3808      	subs	r0, #8
 800171a:	4084      	lsls	r4, r0
 800171c:	40d9      	lsrs	r1, r3
 800171e:	4085      	lsls	r5, r0
 8001720:	430c      	orrs	r4, r1
 8001722:	489e      	ldr	r0, [pc, #632]	; (800199c <__aeabi_dmul+0x3a4>)
 8001724:	1a83      	subs	r3, r0, r2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	4699      	mov	r9, r3
 800172c:	469b      	mov	fp, r3
 800172e:	e786      	b.n	800163e <__aeabi_dmul+0x46>
 8001730:	0005      	movs	r5, r0
 8001732:	4325      	orrs	r5, r4
 8001734:	d000      	beq.n	8001738 <__aeabi_dmul+0x140>
 8001736:	e11c      	b.n	8001972 <__aeabi_dmul+0x37a>
 8001738:	2208      	movs	r2, #8
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2302      	movs	r3, #2
 800173e:	2400      	movs	r4, #0
 8001740:	4691      	mov	r9, r2
 8001742:	469b      	mov	fp, r3
 8001744:	e77b      	b.n	800163e <__aeabi_dmul+0x46>
 8001746:	4652      	mov	r2, sl
 8001748:	4332      	orrs	r2, r6
 800174a:	d100      	bne.n	800174e <__aeabi_dmul+0x156>
 800174c:	e10a      	b.n	8001964 <__aeabi_dmul+0x36c>
 800174e:	2e00      	cmp	r6, #0
 8001750:	d100      	bne.n	8001754 <__aeabi_dmul+0x15c>
 8001752:	e176      	b.n	8001a42 <__aeabi_dmul+0x44a>
 8001754:	0030      	movs	r0, r6
 8001756:	f000 fe23 	bl	80023a0 <__clzsi2>
 800175a:	0002      	movs	r2, r0
 800175c:	3a0b      	subs	r2, #11
 800175e:	231d      	movs	r3, #29
 8001760:	0001      	movs	r1, r0
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	4652      	mov	r2, sl
 8001766:	3908      	subs	r1, #8
 8001768:	40da      	lsrs	r2, r3
 800176a:	408e      	lsls	r6, r1
 800176c:	4316      	orrs	r6, r2
 800176e:	4652      	mov	r2, sl
 8001770:	408a      	lsls	r2, r1
 8001772:	9b00      	ldr	r3, [sp, #0]
 8001774:	4989      	ldr	r1, [pc, #548]	; (800199c <__aeabi_dmul+0x3a4>)
 8001776:	1a18      	subs	r0, r3, r0
 8001778:	0003      	movs	r3, r0
 800177a:	468c      	mov	ip, r1
 800177c:	4463      	add	r3, ip
 800177e:	2000      	movs	r0, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	e77a      	b.n	800167a <__aeabi_dmul+0x82>
 8001784:	2400      	movs	r4, #0
 8001786:	2500      	movs	r5, #0
 8001788:	4a81      	ldr	r2, [pc, #516]	; (8001990 <__aeabi_dmul+0x398>)
 800178a:	e7a5      	b.n	80016d8 <__aeabi_dmul+0xe0>
 800178c:	0c2f      	lsrs	r7, r5, #16
 800178e:	042d      	lsls	r5, r5, #16
 8001790:	0c2d      	lsrs	r5, r5, #16
 8001792:	002b      	movs	r3, r5
 8001794:	0c11      	lsrs	r1, r2, #16
 8001796:	0412      	lsls	r2, r2, #16
 8001798:	0c12      	lsrs	r2, r2, #16
 800179a:	4353      	muls	r3, r2
 800179c:	4698      	mov	r8, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	0028      	movs	r0, r5
 80017a2:	437b      	muls	r3, r7
 80017a4:	4699      	mov	r9, r3
 80017a6:	4348      	muls	r0, r1
 80017a8:	4448      	add	r0, r9
 80017aa:	4683      	mov	fp, r0
 80017ac:	4640      	mov	r0, r8
 80017ae:	000b      	movs	r3, r1
 80017b0:	0c00      	lsrs	r0, r0, #16
 80017b2:	4682      	mov	sl, r0
 80017b4:	4658      	mov	r0, fp
 80017b6:	437b      	muls	r3, r7
 80017b8:	4450      	add	r0, sl
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	4581      	cmp	r9, r0
 80017be:	d906      	bls.n	80017ce <__aeabi_dmul+0x1d6>
 80017c0:	469a      	mov	sl, r3
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	4699      	mov	r9, r3
 80017c8:	44ca      	add	sl, r9
 80017ca:	4653      	mov	r3, sl
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	0c03      	lsrs	r3, r0, #16
 80017d0:	469b      	mov	fp, r3
 80017d2:	4643      	mov	r3, r8
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	0400      	lsls	r0, r0, #16
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	4698      	mov	r8, r3
 80017dc:	0003      	movs	r3, r0
 80017de:	4443      	add	r3, r8
 80017e0:	9304      	str	r3, [sp, #16]
 80017e2:	0c33      	lsrs	r3, r6, #16
 80017e4:	4699      	mov	r9, r3
 80017e6:	002b      	movs	r3, r5
 80017e8:	0436      	lsls	r6, r6, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	4373      	muls	r3, r6
 80017ee:	4698      	mov	r8, r3
 80017f0:	0033      	movs	r3, r6
 80017f2:	437b      	muls	r3, r7
 80017f4:	469a      	mov	sl, r3
 80017f6:	464b      	mov	r3, r9
 80017f8:	435d      	muls	r5, r3
 80017fa:	435f      	muls	r7, r3
 80017fc:	4643      	mov	r3, r8
 80017fe:	4455      	add	r5, sl
 8001800:	0c18      	lsrs	r0, r3, #16
 8001802:	1940      	adds	r0, r0, r5
 8001804:	4582      	cmp	sl, r0
 8001806:	d903      	bls.n	8001810 <__aeabi_dmul+0x218>
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	025b      	lsls	r3, r3, #9
 800180c:	469a      	mov	sl, r3
 800180e:	4457      	add	r7, sl
 8001810:	0c05      	lsrs	r5, r0, #16
 8001812:	19eb      	adds	r3, r5, r7
 8001814:	9305      	str	r3, [sp, #20]
 8001816:	4643      	mov	r3, r8
 8001818:	041d      	lsls	r5, r3, #16
 800181a:	0c2d      	lsrs	r5, r5, #16
 800181c:	0400      	lsls	r0, r0, #16
 800181e:	1940      	adds	r0, r0, r5
 8001820:	0c25      	lsrs	r5, r4, #16
 8001822:	0424      	lsls	r4, r4, #16
 8001824:	0c24      	lsrs	r4, r4, #16
 8001826:	0027      	movs	r7, r4
 8001828:	4357      	muls	r7, r2
 800182a:	436a      	muls	r2, r5
 800182c:	4690      	mov	r8, r2
 800182e:	002a      	movs	r2, r5
 8001830:	0c3b      	lsrs	r3, r7, #16
 8001832:	469a      	mov	sl, r3
 8001834:	434a      	muls	r2, r1
 8001836:	4361      	muls	r1, r4
 8001838:	4441      	add	r1, r8
 800183a:	4451      	add	r1, sl
 800183c:	4483      	add	fp, r0
 800183e:	4588      	cmp	r8, r1
 8001840:	d903      	bls.n	800184a <__aeabi_dmul+0x252>
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	4698      	mov	r8, r3
 8001848:	4442      	add	r2, r8
 800184a:	043f      	lsls	r7, r7, #16
 800184c:	0c0b      	lsrs	r3, r1, #16
 800184e:	0c3f      	lsrs	r7, r7, #16
 8001850:	0409      	lsls	r1, r1, #16
 8001852:	19c9      	adds	r1, r1, r7
 8001854:	0027      	movs	r7, r4
 8001856:	4698      	mov	r8, r3
 8001858:	464b      	mov	r3, r9
 800185a:	4377      	muls	r7, r6
 800185c:	435c      	muls	r4, r3
 800185e:	436e      	muls	r6, r5
 8001860:	435d      	muls	r5, r3
 8001862:	0c3b      	lsrs	r3, r7, #16
 8001864:	4699      	mov	r9, r3
 8001866:	19a4      	adds	r4, r4, r6
 8001868:	444c      	add	r4, r9
 800186a:	4442      	add	r2, r8
 800186c:	9503      	str	r5, [sp, #12]
 800186e:	42a6      	cmp	r6, r4
 8001870:	d904      	bls.n	800187c <__aeabi_dmul+0x284>
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	025b      	lsls	r3, r3, #9
 8001876:	4698      	mov	r8, r3
 8001878:	4445      	add	r5, r8
 800187a:	9503      	str	r5, [sp, #12]
 800187c:	9b02      	ldr	r3, [sp, #8]
 800187e:	043f      	lsls	r7, r7, #16
 8001880:	445b      	add	r3, fp
 8001882:	001e      	movs	r6, r3
 8001884:	4283      	cmp	r3, r0
 8001886:	4180      	sbcs	r0, r0
 8001888:	0423      	lsls	r3, r4, #16
 800188a:	4698      	mov	r8, r3
 800188c:	9b05      	ldr	r3, [sp, #20]
 800188e:	0c3f      	lsrs	r7, r7, #16
 8001890:	4447      	add	r7, r8
 8001892:	4698      	mov	r8, r3
 8001894:	1876      	adds	r6, r6, r1
 8001896:	428e      	cmp	r6, r1
 8001898:	4189      	sbcs	r1, r1
 800189a:	4447      	add	r7, r8
 800189c:	4240      	negs	r0, r0
 800189e:	183d      	adds	r5, r7, r0
 80018a0:	46a8      	mov	r8, r5
 80018a2:	4693      	mov	fp, r2
 80018a4:	4249      	negs	r1, r1
 80018a6:	468a      	mov	sl, r1
 80018a8:	44c3      	add	fp, r8
 80018aa:	429f      	cmp	r7, r3
 80018ac:	41bf      	sbcs	r7, r7
 80018ae:	4580      	cmp	r8, r0
 80018b0:	4180      	sbcs	r0, r0
 80018b2:	9b03      	ldr	r3, [sp, #12]
 80018b4:	44da      	add	sl, fp
 80018b6:	4698      	mov	r8, r3
 80018b8:	4653      	mov	r3, sl
 80018ba:	4240      	negs	r0, r0
 80018bc:	427f      	negs	r7, r7
 80018be:	4307      	orrs	r7, r0
 80018c0:	0c24      	lsrs	r4, r4, #16
 80018c2:	4593      	cmp	fp, r2
 80018c4:	4192      	sbcs	r2, r2
 80018c6:	458a      	cmp	sl, r1
 80018c8:	4189      	sbcs	r1, r1
 80018ca:	193f      	adds	r7, r7, r4
 80018cc:	0ddc      	lsrs	r4, r3, #23
 80018ce:	9b04      	ldr	r3, [sp, #16]
 80018d0:	0275      	lsls	r5, r6, #9
 80018d2:	431d      	orrs	r5, r3
 80018d4:	1e68      	subs	r0, r5, #1
 80018d6:	4185      	sbcs	r5, r0
 80018d8:	4653      	mov	r3, sl
 80018da:	4252      	negs	r2, r2
 80018dc:	4249      	negs	r1, r1
 80018de:	430a      	orrs	r2, r1
 80018e0:	18bf      	adds	r7, r7, r2
 80018e2:	4447      	add	r7, r8
 80018e4:	0df6      	lsrs	r6, r6, #23
 80018e6:	027f      	lsls	r7, r7, #9
 80018e8:	4335      	orrs	r5, r6
 80018ea:	025a      	lsls	r2, r3, #9
 80018ec:	433c      	orrs	r4, r7
 80018ee:	4315      	orrs	r5, r2
 80018f0:	01fb      	lsls	r3, r7, #7
 80018f2:	d400      	bmi.n	80018f6 <__aeabi_dmul+0x2fe>
 80018f4:	e0c1      	b.n	8001a7a <__aeabi_dmul+0x482>
 80018f6:	2101      	movs	r1, #1
 80018f8:	086a      	lsrs	r2, r5, #1
 80018fa:	400d      	ands	r5, r1
 80018fc:	4315      	orrs	r5, r2
 80018fe:	07e2      	lsls	r2, r4, #31
 8001900:	4315      	orrs	r5, r2
 8001902:	0864      	lsrs	r4, r4, #1
 8001904:	4926      	ldr	r1, [pc, #152]	; (80019a0 <__aeabi_dmul+0x3a8>)
 8001906:	4461      	add	r1, ip
 8001908:	2900      	cmp	r1, #0
 800190a:	dd56      	ble.n	80019ba <__aeabi_dmul+0x3c2>
 800190c:	076b      	lsls	r3, r5, #29
 800190e:	d009      	beq.n	8001924 <__aeabi_dmul+0x32c>
 8001910:	220f      	movs	r2, #15
 8001912:	402a      	ands	r2, r5
 8001914:	2a04      	cmp	r2, #4
 8001916:	d005      	beq.n	8001924 <__aeabi_dmul+0x32c>
 8001918:	1d2a      	adds	r2, r5, #4
 800191a:	42aa      	cmp	r2, r5
 800191c:	41ad      	sbcs	r5, r5
 800191e:	426d      	negs	r5, r5
 8001920:	1964      	adds	r4, r4, r5
 8001922:	0015      	movs	r5, r2
 8001924:	01e3      	lsls	r3, r4, #7
 8001926:	d504      	bpl.n	8001932 <__aeabi_dmul+0x33a>
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <__aeabi_dmul+0x3ac>)
 800192c:	00c9      	lsls	r1, r1, #3
 800192e:	4014      	ands	r4, r2
 8001930:	4461      	add	r1, ip
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <__aeabi_dmul+0x3b0>)
 8001934:	4291      	cmp	r1, r2
 8001936:	dd00      	ble.n	800193a <__aeabi_dmul+0x342>
 8001938:	e724      	b.n	8001784 <__aeabi_dmul+0x18c>
 800193a:	0762      	lsls	r2, r4, #29
 800193c:	08ed      	lsrs	r5, r5, #3
 800193e:	0264      	lsls	r4, r4, #9
 8001940:	0549      	lsls	r1, r1, #21
 8001942:	4315      	orrs	r5, r2
 8001944:	0b24      	lsrs	r4, r4, #12
 8001946:	0d4a      	lsrs	r2, r1, #21
 8001948:	e6c6      	b.n	80016d8 <__aeabi_dmul+0xe0>
 800194a:	9701      	str	r7, [sp, #4]
 800194c:	e6b8      	b.n	80016c0 <__aeabi_dmul+0xc8>
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <__aeabi_dmul+0x398>)
 8001950:	2003      	movs	r0, #3
 8001952:	4694      	mov	ip, r2
 8001954:	4463      	add	r3, ip
 8001956:	464a      	mov	r2, r9
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2303      	movs	r3, #3
 800195c:	431a      	orrs	r2, r3
 800195e:	4691      	mov	r9, r2
 8001960:	4652      	mov	r2, sl
 8001962:	e68a      	b.n	800167a <__aeabi_dmul+0x82>
 8001964:	4649      	mov	r1, r9
 8001966:	2301      	movs	r3, #1
 8001968:	4319      	orrs	r1, r3
 800196a:	4689      	mov	r9, r1
 800196c:	2600      	movs	r6, #0
 800196e:	2001      	movs	r0, #1
 8001970:	e683      	b.n	800167a <__aeabi_dmul+0x82>
 8001972:	220c      	movs	r2, #12
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2303      	movs	r3, #3
 8001978:	0005      	movs	r5, r0
 800197a:	4691      	mov	r9, r2
 800197c:	469b      	mov	fp, r3
 800197e:	e65e      	b.n	800163e <__aeabi_dmul+0x46>
 8001980:	2304      	movs	r3, #4
 8001982:	4699      	mov	r9, r3
 8001984:	2300      	movs	r3, #0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	2400      	movs	r4, #0
 800198c:	469b      	mov	fp, r3
 800198e:	e656      	b.n	800163e <__aeabi_dmul+0x46>
 8001990:	000007ff 	.word	0x000007ff
 8001994:	fffffc01 	.word	0xfffffc01
 8001998:	08004a04 	.word	0x08004a04
 800199c:	fffffc0d 	.word	0xfffffc0d
 80019a0:	000003ff 	.word	0x000003ff
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	000007fe 	.word	0x000007fe
 80019ac:	2300      	movs	r3, #0
 80019ae:	2480      	movs	r4, #128	; 0x80
 80019b0:	2500      	movs	r5, #0
 80019b2:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <__aeabi_dmul+0x4cc>)
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	0324      	lsls	r4, r4, #12
 80019b8:	e68e      	b.n	80016d8 <__aeabi_dmul+0xe0>
 80019ba:	2001      	movs	r0, #1
 80019bc:	1a40      	subs	r0, r0, r1
 80019be:	2838      	cmp	r0, #56	; 0x38
 80019c0:	dd00      	ble.n	80019c4 <__aeabi_dmul+0x3cc>
 80019c2:	e686      	b.n	80016d2 <__aeabi_dmul+0xda>
 80019c4:	281f      	cmp	r0, #31
 80019c6:	dd5b      	ble.n	8001a80 <__aeabi_dmul+0x488>
 80019c8:	221f      	movs	r2, #31
 80019ca:	0023      	movs	r3, r4
 80019cc:	4252      	negs	r2, r2
 80019ce:	1a51      	subs	r1, r2, r1
 80019d0:	40cb      	lsrs	r3, r1
 80019d2:	0019      	movs	r1, r3
 80019d4:	2820      	cmp	r0, #32
 80019d6:	d003      	beq.n	80019e0 <__aeabi_dmul+0x3e8>
 80019d8:	4a3b      	ldr	r2, [pc, #236]	; (8001ac8 <__aeabi_dmul+0x4d0>)
 80019da:	4462      	add	r2, ip
 80019dc:	4094      	lsls	r4, r2
 80019de:	4325      	orrs	r5, r4
 80019e0:	1e6a      	subs	r2, r5, #1
 80019e2:	4195      	sbcs	r5, r2
 80019e4:	002a      	movs	r2, r5
 80019e6:	430a      	orrs	r2, r1
 80019e8:	2107      	movs	r1, #7
 80019ea:	000d      	movs	r5, r1
 80019ec:	2400      	movs	r4, #0
 80019ee:	4015      	ands	r5, r2
 80019f0:	4211      	tst	r1, r2
 80019f2:	d05b      	beq.n	8001aac <__aeabi_dmul+0x4b4>
 80019f4:	210f      	movs	r1, #15
 80019f6:	2400      	movs	r4, #0
 80019f8:	4011      	ands	r1, r2
 80019fa:	2904      	cmp	r1, #4
 80019fc:	d053      	beq.n	8001aa6 <__aeabi_dmul+0x4ae>
 80019fe:	1d11      	adds	r1, r2, #4
 8001a00:	4291      	cmp	r1, r2
 8001a02:	4192      	sbcs	r2, r2
 8001a04:	4252      	negs	r2, r2
 8001a06:	18a4      	adds	r4, r4, r2
 8001a08:	000a      	movs	r2, r1
 8001a0a:	0223      	lsls	r3, r4, #8
 8001a0c:	d54b      	bpl.n	8001aa6 <__aeabi_dmul+0x4ae>
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2400      	movs	r4, #0
 8001a12:	2500      	movs	r5, #0
 8001a14:	e660      	b.n	80016d8 <__aeabi_dmul+0xe0>
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	031b      	lsls	r3, r3, #12
 8001a1a:	421c      	tst	r4, r3
 8001a1c:	d009      	beq.n	8001a32 <__aeabi_dmul+0x43a>
 8001a1e:	421e      	tst	r6, r3
 8001a20:	d107      	bne.n	8001a32 <__aeabi_dmul+0x43a>
 8001a22:	4333      	orrs	r3, r6
 8001a24:	031c      	lsls	r4, r3, #12
 8001a26:	4643      	mov	r3, r8
 8001a28:	0015      	movs	r5, r2
 8001a2a:	0b24      	lsrs	r4, r4, #12
 8001a2c:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <__aeabi_dmul+0x4cc>)
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	e652      	b.n	80016d8 <__aeabi_dmul+0xe0>
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	0312      	lsls	r2, r2, #12
 8001a36:	4314      	orrs	r4, r2
 8001a38:	0324      	lsls	r4, r4, #12
 8001a3a:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <__aeabi_dmul+0x4cc>)
 8001a3c:	0b24      	lsrs	r4, r4, #12
 8001a3e:	9701      	str	r7, [sp, #4]
 8001a40:	e64a      	b.n	80016d8 <__aeabi_dmul+0xe0>
 8001a42:	f000 fcad 	bl	80023a0 <__clzsi2>
 8001a46:	0003      	movs	r3, r0
 8001a48:	001a      	movs	r2, r3
 8001a4a:	3215      	adds	r2, #21
 8001a4c:	3020      	adds	r0, #32
 8001a4e:	2a1c      	cmp	r2, #28
 8001a50:	dc00      	bgt.n	8001a54 <__aeabi_dmul+0x45c>
 8001a52:	e684      	b.n	800175e <__aeabi_dmul+0x166>
 8001a54:	4656      	mov	r6, sl
 8001a56:	3b08      	subs	r3, #8
 8001a58:	2200      	movs	r2, #0
 8001a5a:	409e      	lsls	r6, r3
 8001a5c:	e689      	b.n	8001772 <__aeabi_dmul+0x17a>
 8001a5e:	f000 fc9f 	bl	80023a0 <__clzsi2>
 8001a62:	0001      	movs	r1, r0
 8001a64:	0002      	movs	r2, r0
 8001a66:	3115      	adds	r1, #21
 8001a68:	3220      	adds	r2, #32
 8001a6a:	291c      	cmp	r1, #28
 8001a6c:	dc00      	bgt.n	8001a70 <__aeabi_dmul+0x478>
 8001a6e:	e64e      	b.n	800170e <__aeabi_dmul+0x116>
 8001a70:	0034      	movs	r4, r6
 8001a72:	3808      	subs	r0, #8
 8001a74:	2500      	movs	r5, #0
 8001a76:	4084      	lsls	r4, r0
 8001a78:	e653      	b.n	8001722 <__aeabi_dmul+0x12a>
 8001a7a:	9b00      	ldr	r3, [sp, #0]
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	e741      	b.n	8001904 <__aeabi_dmul+0x30c>
 8001a80:	4912      	ldr	r1, [pc, #72]	; (8001acc <__aeabi_dmul+0x4d4>)
 8001a82:	0022      	movs	r2, r4
 8001a84:	4461      	add	r1, ip
 8001a86:	002e      	movs	r6, r5
 8001a88:	408d      	lsls	r5, r1
 8001a8a:	408a      	lsls	r2, r1
 8001a8c:	40c6      	lsrs	r6, r0
 8001a8e:	1e69      	subs	r1, r5, #1
 8001a90:	418d      	sbcs	r5, r1
 8001a92:	4332      	orrs	r2, r6
 8001a94:	432a      	orrs	r2, r5
 8001a96:	40c4      	lsrs	r4, r0
 8001a98:	0753      	lsls	r3, r2, #29
 8001a9a:	d0b6      	beq.n	8001a0a <__aeabi_dmul+0x412>
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	4011      	ands	r1, r2
 8001aa0:	2904      	cmp	r1, #4
 8001aa2:	d1ac      	bne.n	80019fe <__aeabi_dmul+0x406>
 8001aa4:	e7b1      	b.n	8001a0a <__aeabi_dmul+0x412>
 8001aa6:	0765      	lsls	r5, r4, #29
 8001aa8:	0264      	lsls	r4, r4, #9
 8001aaa:	0b24      	lsrs	r4, r4, #12
 8001aac:	08d2      	lsrs	r2, r2, #3
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	e611      	b.n	80016d8 <__aeabi_dmul+0xe0>
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0312      	lsls	r2, r2, #12
 8001ab8:	4314      	orrs	r4, r2
 8001aba:	0324      	lsls	r4, r4, #12
 8001abc:	4a01      	ldr	r2, [pc, #4]	; (8001ac4 <__aeabi_dmul+0x4cc>)
 8001abe:	0b24      	lsrs	r4, r4, #12
 8001ac0:	e60a      	b.n	80016d8 <__aeabi_dmul+0xe0>
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	000007ff 	.word	0x000007ff
 8001ac8:	0000043e 	.word	0x0000043e
 8001acc:	0000041e 	.word	0x0000041e

08001ad0 <__aeabi_dsub>:
 8001ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad2:	4657      	mov	r7, sl
 8001ad4:	464e      	mov	r6, r9
 8001ad6:	4645      	mov	r5, r8
 8001ad8:	46de      	mov	lr, fp
 8001ada:	0004      	movs	r4, r0
 8001adc:	b5e0      	push	{r5, r6, r7, lr}
 8001ade:	001f      	movs	r7, r3
 8001ae0:	0010      	movs	r0, r2
 8001ae2:	030b      	lsls	r3, r1, #12
 8001ae4:	0f62      	lsrs	r2, r4, #29
 8001ae6:	004e      	lsls	r6, r1, #1
 8001ae8:	0fcd      	lsrs	r5, r1, #31
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	0339      	lsls	r1, r7, #12
 8001aee:	4313      	orrs	r3, r2
 8001af0:	0a49      	lsrs	r1, r1, #9
 8001af2:	00e2      	lsls	r2, r4, #3
 8001af4:	0f44      	lsrs	r4, r0, #29
 8001af6:	4321      	orrs	r1, r4
 8001af8:	4cc2      	ldr	r4, [pc, #776]	; (8001e04 <__aeabi_dsub+0x334>)
 8001afa:	4691      	mov	r9, r2
 8001afc:	4692      	mov	sl, r2
 8001afe:	00c0      	lsls	r0, r0, #3
 8001b00:	007a      	lsls	r2, r7, #1
 8001b02:	4680      	mov	r8, r0
 8001b04:	0d76      	lsrs	r6, r6, #21
 8001b06:	0d52      	lsrs	r2, r2, #21
 8001b08:	0fff      	lsrs	r7, r7, #31
 8001b0a:	42a2      	cmp	r2, r4
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x40>
 8001b0e:	e0b4      	b.n	8001c7a <__aeabi_dsub+0x1aa>
 8001b10:	2401      	movs	r4, #1
 8001b12:	4067      	eors	r7, r4
 8001b14:	46bb      	mov	fp, r7
 8001b16:	42bd      	cmp	r5, r7
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x4c>
 8001b1a:	e088      	b.n	8001c2e <__aeabi_dsub+0x15e>
 8001b1c:	1ab4      	subs	r4, r6, r2
 8001b1e:	46a4      	mov	ip, r4
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_dsub+0x56>
 8001b24:	e0b2      	b.n	8001c8c <__aeabi_dsub+0x1bc>
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x5c>
 8001b2a:	e0c5      	b.n	8001cb8 <__aeabi_dsub+0x1e8>
 8001b2c:	4ab5      	ldr	r2, [pc, #724]	; (8001e04 <__aeabi_dsub+0x334>)
 8001b2e:	4296      	cmp	r6, r2
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dsub+0x64>
 8001b32:	e28b      	b.n	800204c <__aeabi_dsub+0x57c>
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0412      	lsls	r2, r2, #16
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	4662      	mov	r2, ip
 8001b3c:	2a38      	cmp	r2, #56	; 0x38
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dsub+0x72>
 8001b40:	e1a1      	b.n	8001e86 <__aeabi_dsub+0x3b6>
 8001b42:	2a1f      	cmp	r2, #31
 8001b44:	dd00      	ble.n	8001b48 <__aeabi_dsub+0x78>
 8001b46:	e216      	b.n	8001f76 <__aeabi_dsub+0x4a6>
 8001b48:	2720      	movs	r7, #32
 8001b4a:	000c      	movs	r4, r1
 8001b4c:	1abf      	subs	r7, r7, r2
 8001b4e:	40bc      	lsls	r4, r7
 8001b50:	0002      	movs	r2, r0
 8001b52:	46a0      	mov	r8, r4
 8001b54:	4664      	mov	r4, ip
 8001b56:	40b8      	lsls	r0, r7
 8001b58:	40e2      	lsrs	r2, r4
 8001b5a:	4644      	mov	r4, r8
 8001b5c:	4314      	orrs	r4, r2
 8001b5e:	0002      	movs	r2, r0
 8001b60:	1e50      	subs	r0, r2, #1
 8001b62:	4182      	sbcs	r2, r0
 8001b64:	4660      	mov	r0, ip
 8001b66:	40c1      	lsrs	r1, r0
 8001b68:	4322      	orrs	r2, r4
 8001b6a:	1a5b      	subs	r3, r3, r1
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	1a8c      	subs	r4, r1, r2
 8001b70:	45a1      	cmp	r9, r4
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	4698      	mov	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d400      	bmi.n	8001b82 <__aeabi_dsub+0xb2>
 8001b80:	e117      	b.n	8001db2 <__aeabi_dsub+0x2e2>
 8001b82:	4643      	mov	r3, r8
 8001b84:	025b      	lsls	r3, r3, #9
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	4698      	mov	r8, r3
 8001b8a:	4643      	mov	r3, r8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0xc2>
 8001b90:	e16c      	b.n	8001e6c <__aeabi_dsub+0x39c>
 8001b92:	4640      	mov	r0, r8
 8001b94:	f000 fc04 	bl	80023a0 <__clzsi2>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	3a08      	subs	r2, #8
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	0020      	movs	r0, r4
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	1a89      	subs	r1, r1, r2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	40c8      	lsrs	r0, r1
 8001ba8:	4094      	lsls	r4, r2
 8001baa:	4303      	orrs	r3, r0
 8001bac:	4296      	cmp	r6, r2
 8001bae:	dd00      	ble.n	8001bb2 <__aeabi_dsub+0xe2>
 8001bb0:	e157      	b.n	8001e62 <__aeabi_dsub+0x392>
 8001bb2:	1b96      	subs	r6, r2, r6
 8001bb4:	1c71      	adds	r1, r6, #1
 8001bb6:	291f      	cmp	r1, #31
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0xec>
 8001bba:	e1cb      	b.n	8001f54 <__aeabi_dsub+0x484>
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	0026      	movs	r6, r4
 8001bc2:	1a52      	subs	r2, r2, r1
 8001bc4:	4094      	lsls	r4, r2
 8001bc6:	4090      	lsls	r0, r2
 8001bc8:	40ce      	lsrs	r6, r1
 8001bca:	40cb      	lsrs	r3, r1
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4330      	orrs	r0, r6
 8001bd2:	4698      	mov	r8, r3
 8001bd4:	2600      	movs	r6, #0
 8001bd6:	4304      	orrs	r4, r0
 8001bd8:	0763      	lsls	r3, r4, #29
 8001bda:	d009      	beq.n	8001bf0 <__aeabi_dsub+0x120>
 8001bdc:	230f      	movs	r3, #15
 8001bde:	4023      	ands	r3, r4
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d005      	beq.n	8001bf0 <__aeabi_dsub+0x120>
 8001be4:	1d23      	adds	r3, r4, #4
 8001be6:	42a3      	cmp	r3, r4
 8001be8:	41a4      	sbcs	r4, r4
 8001bea:	4264      	negs	r4, r4
 8001bec:	44a0      	add	r8, r4
 8001bee:	001c      	movs	r4, r3
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dsub+0x128>
 8001bf6:	e0df      	b.n	8001db8 <__aeabi_dsub+0x2e8>
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <__aeabi_dsub+0x334>)
 8001bfa:	3601      	adds	r6, #1
 8001bfc:	429e      	cmp	r6, r3
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x132>
 8001c00:	e0fb      	b.n	8001dfa <__aeabi_dsub+0x32a>
 8001c02:	4642      	mov	r2, r8
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <__aeabi_dsub+0x338>)
 8001c06:	08e4      	lsrs	r4, r4, #3
 8001c08:	401a      	ands	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	0571      	lsls	r1, r6, #21
 8001c0e:	0752      	lsls	r2, r2, #29
 8001c10:	025b      	lsls	r3, r3, #9
 8001c12:	4322      	orrs	r2, r4
 8001c14:	0b1b      	lsrs	r3, r3, #12
 8001c16:	0d49      	lsrs	r1, r1, #21
 8001c18:	0509      	lsls	r1, r1, #20
 8001c1a:	07ed      	lsls	r5, r5, #31
 8001c1c:	4319      	orrs	r1, r3
 8001c1e:	4329      	orrs	r1, r5
 8001c20:	0010      	movs	r0, r2
 8001c22:	bcf0      	pop	{r4, r5, r6, r7}
 8001c24:	46bb      	mov	fp, r7
 8001c26:	46b2      	mov	sl, r6
 8001c28:	46a9      	mov	r9, r5
 8001c2a:	46a0      	mov	r8, r4
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c2e:	1ab4      	subs	r4, r6, r2
 8001c30:	46a4      	mov	ip, r4
 8001c32:	2c00      	cmp	r4, #0
 8001c34:	dd58      	ble.n	8001ce8 <__aeabi_dsub+0x218>
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x16c>
 8001c3a:	e09e      	b.n	8001d7a <__aeabi_dsub+0x2aa>
 8001c3c:	4a71      	ldr	r2, [pc, #452]	; (8001e04 <__aeabi_dsub+0x334>)
 8001c3e:	4296      	cmp	r6, r2
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dsub+0x174>
 8001c42:	e13b      	b.n	8001ebc <__aeabi_dsub+0x3ec>
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	0412      	lsls	r2, r2, #16
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	4662      	mov	r2, ip
 8001c4c:	2a38      	cmp	r2, #56	; 0x38
 8001c4e:	dd00      	ble.n	8001c52 <__aeabi_dsub+0x182>
 8001c50:	e0c1      	b.n	8001dd6 <__aeabi_dsub+0x306>
 8001c52:	2a1f      	cmp	r2, #31
 8001c54:	dc00      	bgt.n	8001c58 <__aeabi_dsub+0x188>
 8001c56:	e1bb      	b.n	8001fd0 <__aeabi_dsub+0x500>
 8001c58:	000c      	movs	r4, r1
 8001c5a:	3a20      	subs	r2, #32
 8001c5c:	40d4      	lsrs	r4, r2
 8001c5e:	0022      	movs	r2, r4
 8001c60:	4664      	mov	r4, ip
 8001c62:	2c20      	cmp	r4, #32
 8001c64:	d004      	beq.n	8001c70 <__aeabi_dsub+0x1a0>
 8001c66:	2740      	movs	r7, #64	; 0x40
 8001c68:	1b3f      	subs	r7, r7, r4
 8001c6a:	40b9      	lsls	r1, r7
 8001c6c:	4308      	orrs	r0, r1
 8001c6e:	4680      	mov	r8, r0
 8001c70:	4644      	mov	r4, r8
 8001c72:	1e61      	subs	r1, r4, #1
 8001c74:	418c      	sbcs	r4, r1
 8001c76:	4314      	orrs	r4, r2
 8001c78:	e0b1      	b.n	8001dde <__aeabi_dsub+0x30e>
 8001c7a:	000c      	movs	r4, r1
 8001c7c:	4304      	orrs	r4, r0
 8001c7e:	d02a      	beq.n	8001cd6 <__aeabi_dsub+0x206>
 8001c80:	46bb      	mov	fp, r7
 8001c82:	42bd      	cmp	r5, r7
 8001c84:	d02d      	beq.n	8001ce2 <__aeabi_dsub+0x212>
 8001c86:	4c61      	ldr	r4, [pc, #388]	; (8001e0c <__aeabi_dsub+0x33c>)
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	44b4      	add	ip, r6
 8001c8c:	4664      	mov	r4, ip
 8001c8e:	2c00      	cmp	r4, #0
 8001c90:	d05c      	beq.n	8001d4c <__aeabi_dsub+0x27c>
 8001c92:	1b94      	subs	r4, r2, r6
 8001c94:	46a4      	mov	ip, r4
 8001c96:	2e00      	cmp	r6, #0
 8001c98:	d000      	beq.n	8001c9c <__aeabi_dsub+0x1cc>
 8001c9a:	e115      	b.n	8001ec8 <__aeabi_dsub+0x3f8>
 8001c9c:	464d      	mov	r5, r9
 8001c9e:	431d      	orrs	r5, r3
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x1d4>
 8001ca2:	e1c3      	b.n	800202c <__aeabi_dsub+0x55c>
 8001ca4:	1e65      	subs	r5, r4, #1
 8001ca6:	2c01      	cmp	r4, #1
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x1dc>
 8001caa:	e20c      	b.n	80020c6 <__aeabi_dsub+0x5f6>
 8001cac:	4e55      	ldr	r6, [pc, #340]	; (8001e04 <__aeabi_dsub+0x334>)
 8001cae:	42b4      	cmp	r4, r6
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x1e4>
 8001cb2:	e1f8      	b.n	80020a6 <__aeabi_dsub+0x5d6>
 8001cb4:	46ac      	mov	ip, r5
 8001cb6:	e10e      	b.n	8001ed6 <__aeabi_dsub+0x406>
 8001cb8:	000a      	movs	r2, r1
 8001cba:	4302      	orrs	r2, r0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x1f0>
 8001cbe:	e136      	b.n	8001f2e <__aeabi_dsub+0x45e>
 8001cc0:	0022      	movs	r2, r4
 8001cc2:	3a01      	subs	r2, #1
 8001cc4:	2c01      	cmp	r4, #1
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x1fa>
 8001cc8:	e1c6      	b.n	8002058 <__aeabi_dsub+0x588>
 8001cca:	4c4e      	ldr	r4, [pc, #312]	; (8001e04 <__aeabi_dsub+0x334>)
 8001ccc:	45a4      	cmp	ip, r4
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x202>
 8001cd0:	e0f4      	b.n	8001ebc <__aeabi_dsub+0x3ec>
 8001cd2:	4694      	mov	ip, r2
 8001cd4:	e731      	b.n	8001b3a <__aeabi_dsub+0x6a>
 8001cd6:	2401      	movs	r4, #1
 8001cd8:	4067      	eors	r7, r4
 8001cda:	46bb      	mov	fp, r7
 8001cdc:	42bd      	cmp	r5, r7
 8001cde:	d000      	beq.n	8001ce2 <__aeabi_dsub+0x212>
 8001ce0:	e71c      	b.n	8001b1c <__aeabi_dsub+0x4c>
 8001ce2:	4c4a      	ldr	r4, [pc, #296]	; (8001e0c <__aeabi_dsub+0x33c>)
 8001ce4:	46a4      	mov	ip, r4
 8001ce6:	44b4      	add	ip, r6
 8001ce8:	4664      	mov	r4, ip
 8001cea:	2c00      	cmp	r4, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x220>
 8001cee:	e0cf      	b.n	8001e90 <__aeabi_dsub+0x3c0>
 8001cf0:	1b94      	subs	r4, r2, r6
 8001cf2:	46a4      	mov	ip, r4
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x22a>
 8001cf8:	e15c      	b.n	8001fb4 <__aeabi_dsub+0x4e4>
 8001cfa:	4e42      	ldr	r6, [pc, #264]	; (8001e04 <__aeabi_dsub+0x334>)
 8001cfc:	42b2      	cmp	r2, r6
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x232>
 8001d00:	e1ec      	b.n	80020dc <__aeabi_dsub+0x60c>
 8001d02:	2680      	movs	r6, #128	; 0x80
 8001d04:	0436      	lsls	r6, r6, #16
 8001d06:	4333      	orrs	r3, r6
 8001d08:	4664      	mov	r4, ip
 8001d0a:	2c38      	cmp	r4, #56	; 0x38
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x240>
 8001d0e:	e1b3      	b.n	8002078 <__aeabi_dsub+0x5a8>
 8001d10:	2c1f      	cmp	r4, #31
 8001d12:	dd00      	ble.n	8001d16 <__aeabi_dsub+0x246>
 8001d14:	e238      	b.n	8002188 <__aeabi_dsub+0x6b8>
 8001d16:	2620      	movs	r6, #32
 8001d18:	1b36      	subs	r6, r6, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	40b4      	lsls	r4, r6
 8001d1e:	464f      	mov	r7, r9
 8001d20:	46a0      	mov	r8, r4
 8001d22:	4664      	mov	r4, ip
 8001d24:	40e7      	lsrs	r7, r4
 8001d26:	4644      	mov	r4, r8
 8001d28:	433c      	orrs	r4, r7
 8001d2a:	464f      	mov	r7, r9
 8001d2c:	40b7      	lsls	r7, r6
 8001d2e:	003e      	movs	r6, r7
 8001d30:	1e77      	subs	r7, r6, #1
 8001d32:	41be      	sbcs	r6, r7
 8001d34:	4334      	orrs	r4, r6
 8001d36:	4666      	mov	r6, ip
 8001d38:	40f3      	lsrs	r3, r6
 8001d3a:	18c9      	adds	r1, r1, r3
 8001d3c:	1824      	adds	r4, r4, r0
 8001d3e:	4284      	cmp	r4, r0
 8001d40:	419b      	sbcs	r3, r3
 8001d42:	425b      	negs	r3, r3
 8001d44:	4698      	mov	r8, r3
 8001d46:	0016      	movs	r6, r2
 8001d48:	4488      	add	r8, r1
 8001d4a:	e04e      	b.n	8001dea <__aeabi_dsub+0x31a>
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <__aeabi_dsub+0x340>)
 8001d4e:	1c74      	adds	r4, r6, #1
 8001d50:	4214      	tst	r4, r2
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x286>
 8001d54:	e0d6      	b.n	8001f04 <__aeabi_dsub+0x434>
 8001d56:	464a      	mov	r2, r9
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	2e00      	cmp	r6, #0
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_dsub+0x290>
 8001d5e:	e15b      	b.n	8002018 <__aeabi_dsub+0x548>
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x296>
 8001d64:	e1a5      	b.n	80020b2 <__aeabi_dsub+0x5e2>
 8001d66:	000a      	movs	r2, r1
 8001d68:	4302      	orrs	r2, r0
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_dsub+0x29e>
 8001d6c:	e1bb      	b.n	80020e6 <__aeabi_dsub+0x616>
 8001d6e:	464a      	mov	r2, r9
 8001d70:	0759      	lsls	r1, r3, #29
 8001d72:	08d2      	lsrs	r2, r2, #3
 8001d74:	430a      	orrs	r2, r1
 8001d76:	08db      	lsrs	r3, r3, #3
 8001d78:	e027      	b.n	8001dca <__aeabi_dsub+0x2fa>
 8001d7a:	000a      	movs	r2, r1
 8001d7c:	4302      	orrs	r2, r0
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x2b2>
 8001d80:	e174      	b.n	800206c <__aeabi_dsub+0x59c>
 8001d82:	0022      	movs	r2, r4
 8001d84:	3a01      	subs	r2, #1
 8001d86:	2c01      	cmp	r4, #1
 8001d88:	d005      	beq.n	8001d96 <__aeabi_dsub+0x2c6>
 8001d8a:	4c1e      	ldr	r4, [pc, #120]	; (8001e04 <__aeabi_dsub+0x334>)
 8001d8c:	45a4      	cmp	ip, r4
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x2c2>
 8001d90:	e094      	b.n	8001ebc <__aeabi_dsub+0x3ec>
 8001d92:	4694      	mov	ip, r2
 8001d94:	e759      	b.n	8001c4a <__aeabi_dsub+0x17a>
 8001d96:	4448      	add	r0, r9
 8001d98:	4548      	cmp	r0, r9
 8001d9a:	4192      	sbcs	r2, r2
 8001d9c:	185b      	adds	r3, r3, r1
 8001d9e:	4698      	mov	r8, r3
 8001da0:	0004      	movs	r4, r0
 8001da2:	4252      	negs	r2, r2
 8001da4:	4490      	add	r8, r2
 8001da6:	4643      	mov	r3, r8
 8001da8:	2602      	movs	r6, #2
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	d500      	bpl.n	8001db0 <__aeabi_dsub+0x2e0>
 8001dae:	e0c4      	b.n	8001f3a <__aeabi_dsub+0x46a>
 8001db0:	3e01      	subs	r6, #1
 8001db2:	0763      	lsls	r3, r4, #29
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x2e8>
 8001db6:	e711      	b.n	8001bdc <__aeabi_dsub+0x10c>
 8001db8:	4643      	mov	r3, r8
 8001dba:	46b4      	mov	ip, r6
 8001dbc:	0759      	lsls	r1, r3, #29
 8001dbe:	08e2      	lsrs	r2, r4, #3
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	490f      	ldr	r1, [pc, #60]	; (8001e04 <__aeabi_dsub+0x334>)
 8001dc6:	458c      	cmp	ip, r1
 8001dc8:	d040      	beq.n	8001e4c <__aeabi_dsub+0x37c>
 8001dca:	4661      	mov	r1, ip
 8001dcc:	031b      	lsls	r3, r3, #12
 8001dce:	0549      	lsls	r1, r1, #21
 8001dd0:	0b1b      	lsrs	r3, r3, #12
 8001dd2:	0d49      	lsrs	r1, r1, #21
 8001dd4:	e720      	b.n	8001c18 <__aeabi_dsub+0x148>
 8001dd6:	4301      	orrs	r1, r0
 8001dd8:	000c      	movs	r4, r1
 8001dda:	1e61      	subs	r1, r4, #1
 8001ddc:	418c      	sbcs	r4, r1
 8001dde:	444c      	add	r4, r9
 8001de0:	454c      	cmp	r4, r9
 8001de2:	4192      	sbcs	r2, r2
 8001de4:	4252      	negs	r2, r2
 8001de6:	4690      	mov	r8, r2
 8001de8:	4498      	add	r8, r3
 8001dea:	4643      	mov	r3, r8
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	d5e0      	bpl.n	8001db2 <__aeabi_dsub+0x2e2>
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__aeabi_dsub+0x334>)
 8001df2:	3601      	adds	r6, #1
 8001df4:	429e      	cmp	r6, r3
 8001df6:	d000      	beq.n	8001dfa <__aeabi_dsub+0x32a>
 8001df8:	e09f      	b.n	8001f3a <__aeabi_dsub+0x46a>
 8001dfa:	0031      	movs	r1, r6
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2200      	movs	r2, #0
 8001e00:	e70a      	b.n	8001c18 <__aeabi_dsub+0x148>
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	000007ff 	.word	0x000007ff
 8001e08:	ff7fffff 	.word	0xff7fffff
 8001e0c:	fffff801 	.word	0xfffff801
 8001e10:	000007fe 	.word	0x000007fe
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x34a>
 8001e18:	e160      	b.n	80020dc <__aeabi_dsub+0x60c>
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	4302      	orrs	r2, r0
 8001e1e:	d04d      	beq.n	8001ebc <__aeabi_dsub+0x3ec>
 8001e20:	464a      	mov	r2, r9
 8001e22:	075c      	lsls	r4, r3, #29
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	4322      	orrs	r2, r4
 8001e28:	2480      	movs	r4, #128	; 0x80
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	0324      	lsls	r4, r4, #12
 8001e2e:	4223      	tst	r3, r4
 8001e30:	d007      	beq.n	8001e42 <__aeabi_dsub+0x372>
 8001e32:	08ce      	lsrs	r6, r1, #3
 8001e34:	4226      	tst	r6, r4
 8001e36:	d104      	bne.n	8001e42 <__aeabi_dsub+0x372>
 8001e38:	465d      	mov	r5, fp
 8001e3a:	0033      	movs	r3, r6
 8001e3c:	08c2      	lsrs	r2, r0, #3
 8001e3e:	0749      	lsls	r1, r1, #29
 8001e40:	430a      	orrs	r2, r1
 8001e42:	0f51      	lsrs	r1, r2, #29
 8001e44:	00d2      	lsls	r2, r2, #3
 8001e46:	08d2      	lsrs	r2, r2, #3
 8001e48:	0749      	lsls	r1, r1, #29
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	4319      	orrs	r1, r3
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x384>
 8001e52:	e1c8      	b.n	80021e6 <__aeabi_dsub+0x716>
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0309      	lsls	r1, r1, #12
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	031b      	lsls	r3, r3, #12
 8001e5c:	49d5      	ldr	r1, [pc, #852]	; (80021b4 <__aeabi_dsub+0x6e4>)
 8001e5e:	0b1b      	lsrs	r3, r3, #12
 8001e60:	e6da      	b.n	8001c18 <__aeabi_dsub+0x148>
 8001e62:	49d5      	ldr	r1, [pc, #852]	; (80021b8 <__aeabi_dsub+0x6e8>)
 8001e64:	1ab6      	subs	r6, r6, r2
 8001e66:	400b      	ands	r3, r1
 8001e68:	4698      	mov	r8, r3
 8001e6a:	e6b5      	b.n	8001bd8 <__aeabi_dsub+0x108>
 8001e6c:	0020      	movs	r0, r4
 8001e6e:	f000 fa97 	bl	80023a0 <__clzsi2>
 8001e72:	0002      	movs	r2, r0
 8001e74:	3218      	adds	r2, #24
 8001e76:	2a1f      	cmp	r2, #31
 8001e78:	dc00      	bgt.n	8001e7c <__aeabi_dsub+0x3ac>
 8001e7a:	e68f      	b.n	8001b9c <__aeabi_dsub+0xcc>
 8001e7c:	0023      	movs	r3, r4
 8001e7e:	3808      	subs	r0, #8
 8001e80:	4083      	lsls	r3, r0
 8001e82:	2400      	movs	r4, #0
 8001e84:	e692      	b.n	8001bac <__aeabi_dsub+0xdc>
 8001e86:	4308      	orrs	r0, r1
 8001e88:	0002      	movs	r2, r0
 8001e8a:	1e50      	subs	r0, r2, #1
 8001e8c:	4182      	sbcs	r2, r0
 8001e8e:	e66d      	b.n	8001b6c <__aeabi_dsub+0x9c>
 8001e90:	4cca      	ldr	r4, [pc, #808]	; (80021bc <__aeabi_dsub+0x6ec>)
 8001e92:	1c72      	adds	r2, r6, #1
 8001e94:	4222      	tst	r2, r4
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x3ca>
 8001e98:	e0ad      	b.n	8001ff6 <__aeabi_dsub+0x526>
 8001e9a:	464a      	mov	r2, r9
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	2e00      	cmp	r6, #0
 8001ea0:	d1b8      	bne.n	8001e14 <__aeabi_dsub+0x344>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3d8>
 8001ea6:	e158      	b.n	800215a <__aeabi_dsub+0x68a>
 8001ea8:	000a      	movs	r2, r1
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d000      	beq.n	8001eb0 <__aeabi_dsub+0x3e0>
 8001eae:	e159      	b.n	8002164 <__aeabi_dsub+0x694>
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	0759      	lsls	r1, r3, #29
 8001eb4:	08d2      	lsrs	r2, r2, #3
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	e786      	b.n	8001dca <__aeabi_dsub+0x2fa>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	0759      	lsls	r1, r3, #29
 8001ec0:	08d2      	lsrs	r2, r2, #3
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	e7c1      	b.n	8001e4c <__aeabi_dsub+0x37c>
 8001ec8:	4dba      	ldr	r5, [pc, #744]	; (80021b4 <__aeabi_dsub+0x6e4>)
 8001eca:	42aa      	cmp	r2, r5
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x400>
 8001ece:	e11e      	b.n	800210e <__aeabi_dsub+0x63e>
 8001ed0:	2580      	movs	r5, #128	; 0x80
 8001ed2:	042d      	lsls	r5, r5, #16
 8001ed4:	432b      	orrs	r3, r5
 8001ed6:	4664      	mov	r4, ip
 8001ed8:	2c38      	cmp	r4, #56	; 0x38
 8001eda:	dc5d      	bgt.n	8001f98 <__aeabi_dsub+0x4c8>
 8001edc:	2c1f      	cmp	r4, #31
 8001ede:	dd00      	ble.n	8001ee2 <__aeabi_dsub+0x412>
 8001ee0:	e0d0      	b.n	8002084 <__aeabi_dsub+0x5b4>
 8001ee2:	2520      	movs	r5, #32
 8001ee4:	4667      	mov	r7, ip
 8001ee6:	1b2d      	subs	r5, r5, r4
 8001ee8:	464e      	mov	r6, r9
 8001eea:	001c      	movs	r4, r3
 8001eec:	40fe      	lsrs	r6, r7
 8001eee:	40ac      	lsls	r4, r5
 8001ef0:	4334      	orrs	r4, r6
 8001ef2:	464e      	mov	r6, r9
 8001ef4:	40ae      	lsls	r6, r5
 8001ef6:	0035      	movs	r5, r6
 8001ef8:	40fb      	lsrs	r3, r7
 8001efa:	1e6e      	subs	r6, r5, #1
 8001efc:	41b5      	sbcs	r5, r6
 8001efe:	1ac9      	subs	r1, r1, r3
 8001f00:	432c      	orrs	r4, r5
 8001f02:	e04e      	b.n	8001fa2 <__aeabi_dsub+0x4d2>
 8001f04:	464a      	mov	r2, r9
 8001f06:	1a14      	subs	r4, r2, r0
 8001f08:	45a1      	cmp	r9, r4
 8001f0a:	4192      	sbcs	r2, r2
 8001f0c:	4252      	negs	r2, r2
 8001f0e:	4690      	mov	r8, r2
 8001f10:	1a5f      	subs	r7, r3, r1
 8001f12:	003a      	movs	r2, r7
 8001f14:	4647      	mov	r7, r8
 8001f16:	1bd2      	subs	r2, r2, r7
 8001f18:	4690      	mov	r8, r2
 8001f1a:	0212      	lsls	r2, r2, #8
 8001f1c:	d500      	bpl.n	8001f20 <__aeabi_dsub+0x450>
 8001f1e:	e08b      	b.n	8002038 <__aeabi_dsub+0x568>
 8001f20:	4642      	mov	r2, r8
 8001f22:	4322      	orrs	r2, r4
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x458>
 8001f26:	e630      	b.n	8001b8a <__aeabi_dsub+0xba>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2500      	movs	r5, #0
 8001f2c:	e74d      	b.n	8001dca <__aeabi_dsub+0x2fa>
 8001f2e:	464a      	mov	r2, r9
 8001f30:	0759      	lsls	r1, r3, #29
 8001f32:	08d2      	lsrs	r2, r2, #3
 8001f34:	430a      	orrs	r2, r1
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	e744      	b.n	8001dc4 <__aeabi_dsub+0x2f4>
 8001f3a:	4642      	mov	r2, r8
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <__aeabi_dsub+0x6e8>)
 8001f3e:	0861      	lsrs	r1, r4, #1
 8001f40:	401a      	ands	r2, r3
 8001f42:	0013      	movs	r3, r2
 8001f44:	2201      	movs	r2, #1
 8001f46:	4014      	ands	r4, r2
 8001f48:	430c      	orrs	r4, r1
 8001f4a:	07da      	lsls	r2, r3, #31
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	4698      	mov	r8, r3
 8001f50:	4314      	orrs	r4, r2
 8001f52:	e641      	b.n	8001bd8 <__aeabi_dsub+0x108>
 8001f54:	001a      	movs	r2, r3
 8001f56:	3e1f      	subs	r6, #31
 8001f58:	40f2      	lsrs	r2, r6
 8001f5a:	0016      	movs	r6, r2
 8001f5c:	2920      	cmp	r1, #32
 8001f5e:	d003      	beq.n	8001f68 <__aeabi_dsub+0x498>
 8001f60:	2240      	movs	r2, #64	; 0x40
 8001f62:	1a51      	subs	r1, r2, r1
 8001f64:	408b      	lsls	r3, r1
 8001f66:	431c      	orrs	r4, r3
 8001f68:	1e62      	subs	r2, r4, #1
 8001f6a:	4194      	sbcs	r4, r2
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	4334      	orrs	r4, r6
 8001f70:	4698      	mov	r8, r3
 8001f72:	2600      	movs	r6, #0
 8001f74:	e71d      	b.n	8001db2 <__aeabi_dsub+0x2e2>
 8001f76:	000c      	movs	r4, r1
 8001f78:	3a20      	subs	r2, #32
 8001f7a:	40d4      	lsrs	r4, r2
 8001f7c:	0022      	movs	r2, r4
 8001f7e:	4664      	mov	r4, ip
 8001f80:	2c20      	cmp	r4, #32
 8001f82:	d004      	beq.n	8001f8e <__aeabi_dsub+0x4be>
 8001f84:	2740      	movs	r7, #64	; 0x40
 8001f86:	1b3f      	subs	r7, r7, r4
 8001f88:	40b9      	lsls	r1, r7
 8001f8a:	4308      	orrs	r0, r1
 8001f8c:	4680      	mov	r8, r0
 8001f8e:	4644      	mov	r4, r8
 8001f90:	1e61      	subs	r1, r4, #1
 8001f92:	418c      	sbcs	r4, r1
 8001f94:	4322      	orrs	r2, r4
 8001f96:	e5e9      	b.n	8001b6c <__aeabi_dsub+0x9c>
 8001f98:	464c      	mov	r4, r9
 8001f9a:	4323      	orrs	r3, r4
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	1e63      	subs	r3, r4, #1
 8001fa0:	419c      	sbcs	r4, r3
 8001fa2:	1b04      	subs	r4, r0, r4
 8001fa4:	42a0      	cmp	r0, r4
 8001fa6:	419b      	sbcs	r3, r3
 8001fa8:	425b      	negs	r3, r3
 8001faa:	1acb      	subs	r3, r1, r3
 8001fac:	4698      	mov	r8, r3
 8001fae:	465d      	mov	r5, fp
 8001fb0:	0016      	movs	r6, r2
 8001fb2:	e5e2      	b.n	8001b7a <__aeabi_dsub+0xaa>
 8001fb4:	464e      	mov	r6, r9
 8001fb6:	431e      	orrs	r6, r3
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x4ec>
 8001fba:	e0ae      	b.n	800211a <__aeabi_dsub+0x64a>
 8001fbc:	1e66      	subs	r6, r4, #1
 8001fbe:	2c01      	cmp	r4, #1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x4f4>
 8001fc2:	e0fd      	b.n	80021c0 <__aeabi_dsub+0x6f0>
 8001fc4:	4f7b      	ldr	r7, [pc, #492]	; (80021b4 <__aeabi_dsub+0x6e4>)
 8001fc6:	42bc      	cmp	r4, r7
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x4fc>
 8001fca:	e107      	b.n	80021dc <__aeabi_dsub+0x70c>
 8001fcc:	46b4      	mov	ip, r6
 8001fce:	e69b      	b.n	8001d08 <__aeabi_dsub+0x238>
 8001fd0:	4664      	mov	r4, ip
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	1b12      	subs	r2, r2, r4
 8001fd6:	000c      	movs	r4, r1
 8001fd8:	4094      	lsls	r4, r2
 8001fda:	0007      	movs	r7, r0
 8001fdc:	4090      	lsls	r0, r2
 8001fde:	46a0      	mov	r8, r4
 8001fe0:	4664      	mov	r4, ip
 8001fe2:	1e42      	subs	r2, r0, #1
 8001fe4:	4190      	sbcs	r0, r2
 8001fe6:	4662      	mov	r2, ip
 8001fe8:	40e7      	lsrs	r7, r4
 8001fea:	4644      	mov	r4, r8
 8001fec:	40d1      	lsrs	r1, r2
 8001fee:	433c      	orrs	r4, r7
 8001ff0:	4304      	orrs	r4, r0
 8001ff2:	185b      	adds	r3, r3, r1
 8001ff4:	e6f3      	b.n	8001dde <__aeabi_dsub+0x30e>
 8001ff6:	4c6f      	ldr	r4, [pc, #444]	; (80021b4 <__aeabi_dsub+0x6e4>)
 8001ff8:	42a2      	cmp	r2, r4
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x52e>
 8001ffc:	e0d5      	b.n	80021aa <__aeabi_dsub+0x6da>
 8001ffe:	4448      	add	r0, r9
 8002000:	185b      	adds	r3, r3, r1
 8002002:	4548      	cmp	r0, r9
 8002004:	4189      	sbcs	r1, r1
 8002006:	4249      	negs	r1, r1
 8002008:	185b      	adds	r3, r3, r1
 800200a:	07dc      	lsls	r4, r3, #31
 800200c:	0840      	lsrs	r0, r0, #1
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	4698      	mov	r8, r3
 8002012:	0016      	movs	r6, r2
 8002014:	4304      	orrs	r4, r0
 8002016:	e6cc      	b.n	8001db2 <__aeabi_dsub+0x2e2>
 8002018:	2a00      	cmp	r2, #0
 800201a:	d000      	beq.n	800201e <__aeabi_dsub+0x54e>
 800201c:	e082      	b.n	8002124 <__aeabi_dsub+0x654>
 800201e:	000a      	movs	r2, r1
 8002020:	4302      	orrs	r2, r0
 8002022:	d140      	bne.n	80020a6 <__aeabi_dsub+0x5d6>
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	2500      	movs	r5, #0
 8002028:	031b      	lsls	r3, r3, #12
 800202a:	e713      	b.n	8001e54 <__aeabi_dsub+0x384>
 800202c:	074b      	lsls	r3, r1, #29
 800202e:	08c2      	lsrs	r2, r0, #3
 8002030:	431a      	orrs	r2, r3
 8002032:	465d      	mov	r5, fp
 8002034:	08cb      	lsrs	r3, r1, #3
 8002036:	e6c5      	b.n	8001dc4 <__aeabi_dsub+0x2f4>
 8002038:	464a      	mov	r2, r9
 800203a:	1a84      	subs	r4, r0, r2
 800203c:	42a0      	cmp	r0, r4
 800203e:	4192      	sbcs	r2, r2
 8002040:	1acb      	subs	r3, r1, r3
 8002042:	4252      	negs	r2, r2
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	4698      	mov	r8, r3
 8002048:	465d      	mov	r5, fp
 800204a:	e59e      	b.n	8001b8a <__aeabi_dsub+0xba>
 800204c:	464a      	mov	r2, r9
 800204e:	0759      	lsls	r1, r3, #29
 8002050:	08d2      	lsrs	r2, r2, #3
 8002052:	430a      	orrs	r2, r1
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	e6f9      	b.n	8001e4c <__aeabi_dsub+0x37c>
 8002058:	464a      	mov	r2, r9
 800205a:	1a14      	subs	r4, r2, r0
 800205c:	45a1      	cmp	r9, r4
 800205e:	4192      	sbcs	r2, r2
 8002060:	1a5b      	subs	r3, r3, r1
 8002062:	4252      	negs	r2, r2
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	4698      	mov	r8, r3
 8002068:	2601      	movs	r6, #1
 800206a:	e586      	b.n	8001b7a <__aeabi_dsub+0xaa>
 800206c:	464a      	mov	r2, r9
 800206e:	0759      	lsls	r1, r3, #29
 8002070:	08d2      	lsrs	r2, r2, #3
 8002072:	430a      	orrs	r2, r1
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	e6a5      	b.n	8001dc4 <__aeabi_dsub+0x2f4>
 8002078:	464c      	mov	r4, r9
 800207a:	4323      	orrs	r3, r4
 800207c:	001c      	movs	r4, r3
 800207e:	1e63      	subs	r3, r4, #1
 8002080:	419c      	sbcs	r4, r3
 8002082:	e65b      	b.n	8001d3c <__aeabi_dsub+0x26c>
 8002084:	4665      	mov	r5, ip
 8002086:	001e      	movs	r6, r3
 8002088:	3d20      	subs	r5, #32
 800208a:	40ee      	lsrs	r6, r5
 800208c:	2c20      	cmp	r4, #32
 800208e:	d005      	beq.n	800209c <__aeabi_dsub+0x5cc>
 8002090:	2540      	movs	r5, #64	; 0x40
 8002092:	1b2d      	subs	r5, r5, r4
 8002094:	40ab      	lsls	r3, r5
 8002096:	464c      	mov	r4, r9
 8002098:	431c      	orrs	r4, r3
 800209a:	46a2      	mov	sl, r4
 800209c:	4654      	mov	r4, sl
 800209e:	1e63      	subs	r3, r4, #1
 80020a0:	419c      	sbcs	r4, r3
 80020a2:	4334      	orrs	r4, r6
 80020a4:	e77d      	b.n	8001fa2 <__aeabi_dsub+0x4d2>
 80020a6:	074b      	lsls	r3, r1, #29
 80020a8:	08c2      	lsrs	r2, r0, #3
 80020aa:	431a      	orrs	r2, r3
 80020ac:	465d      	mov	r5, fp
 80020ae:	08cb      	lsrs	r3, r1, #3
 80020b0:	e6cc      	b.n	8001e4c <__aeabi_dsub+0x37c>
 80020b2:	000a      	movs	r2, r1
 80020b4:	4302      	orrs	r2, r0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x5ea>
 80020b8:	e736      	b.n	8001f28 <__aeabi_dsub+0x458>
 80020ba:	074b      	lsls	r3, r1, #29
 80020bc:	08c2      	lsrs	r2, r0, #3
 80020be:	431a      	orrs	r2, r3
 80020c0:	465d      	mov	r5, fp
 80020c2:	08cb      	lsrs	r3, r1, #3
 80020c4:	e681      	b.n	8001dca <__aeabi_dsub+0x2fa>
 80020c6:	464a      	mov	r2, r9
 80020c8:	1a84      	subs	r4, r0, r2
 80020ca:	42a0      	cmp	r0, r4
 80020cc:	4192      	sbcs	r2, r2
 80020ce:	1acb      	subs	r3, r1, r3
 80020d0:	4252      	negs	r2, r2
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	4698      	mov	r8, r3
 80020d6:	465d      	mov	r5, fp
 80020d8:	2601      	movs	r6, #1
 80020da:	e54e      	b.n	8001b7a <__aeabi_dsub+0xaa>
 80020dc:	074b      	lsls	r3, r1, #29
 80020de:	08c2      	lsrs	r2, r0, #3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	08cb      	lsrs	r3, r1, #3
 80020e4:	e6b2      	b.n	8001e4c <__aeabi_dsub+0x37c>
 80020e6:	464a      	mov	r2, r9
 80020e8:	1a14      	subs	r4, r2, r0
 80020ea:	45a1      	cmp	r9, r4
 80020ec:	4192      	sbcs	r2, r2
 80020ee:	1a5f      	subs	r7, r3, r1
 80020f0:	4252      	negs	r2, r2
 80020f2:	1aba      	subs	r2, r7, r2
 80020f4:	4690      	mov	r8, r2
 80020f6:	0212      	lsls	r2, r2, #8
 80020f8:	d56b      	bpl.n	80021d2 <__aeabi_dsub+0x702>
 80020fa:	464a      	mov	r2, r9
 80020fc:	1a84      	subs	r4, r0, r2
 80020fe:	42a0      	cmp	r0, r4
 8002100:	4192      	sbcs	r2, r2
 8002102:	1acb      	subs	r3, r1, r3
 8002104:	4252      	negs	r2, r2
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	4698      	mov	r8, r3
 800210a:	465d      	mov	r5, fp
 800210c:	e564      	b.n	8001bd8 <__aeabi_dsub+0x108>
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	08c2      	lsrs	r2, r0, #3
 8002112:	431a      	orrs	r2, r3
 8002114:	465d      	mov	r5, fp
 8002116:	08cb      	lsrs	r3, r1, #3
 8002118:	e698      	b.n	8001e4c <__aeabi_dsub+0x37c>
 800211a:	074b      	lsls	r3, r1, #29
 800211c:	08c2      	lsrs	r2, r0, #3
 800211e:	431a      	orrs	r2, r3
 8002120:	08cb      	lsrs	r3, r1, #3
 8002122:	e64f      	b.n	8001dc4 <__aeabi_dsub+0x2f4>
 8002124:	000a      	movs	r2, r1
 8002126:	4302      	orrs	r2, r0
 8002128:	d090      	beq.n	800204c <__aeabi_dsub+0x57c>
 800212a:	464a      	mov	r2, r9
 800212c:	075c      	lsls	r4, r3, #29
 800212e:	08d2      	lsrs	r2, r2, #3
 8002130:	4314      	orrs	r4, r2
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	0312      	lsls	r2, r2, #12
 8002138:	4213      	tst	r3, r2
 800213a:	d008      	beq.n	800214e <__aeabi_dsub+0x67e>
 800213c:	08ce      	lsrs	r6, r1, #3
 800213e:	4216      	tst	r6, r2
 8002140:	d105      	bne.n	800214e <__aeabi_dsub+0x67e>
 8002142:	08c0      	lsrs	r0, r0, #3
 8002144:	0749      	lsls	r1, r1, #29
 8002146:	4308      	orrs	r0, r1
 8002148:	0004      	movs	r4, r0
 800214a:	465d      	mov	r5, fp
 800214c:	0033      	movs	r3, r6
 800214e:	0f61      	lsrs	r1, r4, #29
 8002150:	00e2      	lsls	r2, r4, #3
 8002152:	0749      	lsls	r1, r1, #29
 8002154:	08d2      	lsrs	r2, r2, #3
 8002156:	430a      	orrs	r2, r1
 8002158:	e678      	b.n	8001e4c <__aeabi_dsub+0x37c>
 800215a:	074b      	lsls	r3, r1, #29
 800215c:	08c2      	lsrs	r2, r0, #3
 800215e:	431a      	orrs	r2, r3
 8002160:	08cb      	lsrs	r3, r1, #3
 8002162:	e632      	b.n	8001dca <__aeabi_dsub+0x2fa>
 8002164:	4448      	add	r0, r9
 8002166:	185b      	adds	r3, r3, r1
 8002168:	4548      	cmp	r0, r9
 800216a:	4192      	sbcs	r2, r2
 800216c:	4698      	mov	r8, r3
 800216e:	4252      	negs	r2, r2
 8002170:	4490      	add	r8, r2
 8002172:	4643      	mov	r3, r8
 8002174:	0004      	movs	r4, r0
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	d400      	bmi.n	800217c <__aeabi_dsub+0x6ac>
 800217a:	e61a      	b.n	8001db2 <__aeabi_dsub+0x2e2>
 800217c:	4642      	mov	r2, r8
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <__aeabi_dsub+0x6e8>)
 8002180:	2601      	movs	r6, #1
 8002182:	401a      	ands	r2, r3
 8002184:	4690      	mov	r8, r2
 8002186:	e614      	b.n	8001db2 <__aeabi_dsub+0x2e2>
 8002188:	4666      	mov	r6, ip
 800218a:	001f      	movs	r7, r3
 800218c:	3e20      	subs	r6, #32
 800218e:	40f7      	lsrs	r7, r6
 8002190:	2c20      	cmp	r4, #32
 8002192:	d005      	beq.n	80021a0 <__aeabi_dsub+0x6d0>
 8002194:	2640      	movs	r6, #64	; 0x40
 8002196:	1b36      	subs	r6, r6, r4
 8002198:	40b3      	lsls	r3, r6
 800219a:	464c      	mov	r4, r9
 800219c:	431c      	orrs	r4, r3
 800219e:	46a2      	mov	sl, r4
 80021a0:	4654      	mov	r4, sl
 80021a2:	1e63      	subs	r3, r4, #1
 80021a4:	419c      	sbcs	r4, r3
 80021a6:	433c      	orrs	r4, r7
 80021a8:	e5c8      	b.n	8001d3c <__aeabi_dsub+0x26c>
 80021aa:	0011      	movs	r1, r2
 80021ac:	2300      	movs	r3, #0
 80021ae:	2200      	movs	r2, #0
 80021b0:	e532      	b.n	8001c18 <__aeabi_dsub+0x148>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	000007ff 	.word	0x000007ff
 80021b8:	ff7fffff 	.word	0xff7fffff
 80021bc:	000007fe 	.word	0x000007fe
 80021c0:	464a      	mov	r2, r9
 80021c2:	1814      	adds	r4, r2, r0
 80021c4:	4284      	cmp	r4, r0
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	185b      	adds	r3, r3, r1
 80021ca:	4698      	mov	r8, r3
 80021cc:	4252      	negs	r2, r2
 80021ce:	4490      	add	r8, r2
 80021d0:	e5e9      	b.n	8001da6 <__aeabi_dsub+0x2d6>
 80021d2:	4642      	mov	r2, r8
 80021d4:	4322      	orrs	r2, r4
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x70a>
 80021d8:	e6a6      	b.n	8001f28 <__aeabi_dsub+0x458>
 80021da:	e5ea      	b.n	8001db2 <__aeabi_dsub+0x2e2>
 80021dc:	074b      	lsls	r3, r1, #29
 80021de:	08c2      	lsrs	r2, r0, #3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	08cb      	lsrs	r3, r1, #3
 80021e4:	e632      	b.n	8001e4c <__aeabi_dsub+0x37c>
 80021e6:	2200      	movs	r2, #0
 80021e8:	4901      	ldr	r1, [pc, #4]	; (80021f0 <__aeabi_dsub+0x720>)
 80021ea:	0013      	movs	r3, r2
 80021ec:	e514      	b.n	8001c18 <__aeabi_dsub+0x148>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_dcmpun>:
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	0005      	movs	r5, r0
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <__aeabi_dcmpun+0x38>)
 80021fa:	030c      	lsls	r4, r1, #12
 80021fc:	0016      	movs	r6, r2
 80021fe:	0049      	lsls	r1, r1, #1
 8002200:	031a      	lsls	r2, r3, #12
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	0b24      	lsrs	r4, r4, #12
 8002206:	0d49      	lsrs	r1, r1, #21
 8002208:	0b12      	lsrs	r2, r2, #12
 800220a:	0d5b      	lsrs	r3, r3, #21
 800220c:	4281      	cmp	r1, r0
 800220e:	d008      	beq.n	8002222 <__aeabi_dcmpun+0x2e>
 8002210:	4906      	ldr	r1, [pc, #24]	; (800222c <__aeabi_dcmpun+0x38>)
 8002212:	2000      	movs	r0, #0
 8002214:	428b      	cmp	r3, r1
 8002216:	d103      	bne.n	8002220 <__aeabi_dcmpun+0x2c>
 8002218:	4332      	orrs	r2, r6
 800221a:	0010      	movs	r0, r2
 800221c:	1e42      	subs	r2, r0, #1
 800221e:	4190      	sbcs	r0, r2
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	2001      	movs	r0, #1
 8002224:	432c      	orrs	r4, r5
 8002226:	d1fb      	bne.n	8002220 <__aeabi_dcmpun+0x2c>
 8002228:	e7f2      	b.n	8002210 <__aeabi_dcmpun+0x1c>
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	000007ff 	.word	0x000007ff

08002230 <__aeabi_i2d>:
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	2800      	cmp	r0, #0
 8002234:	d016      	beq.n	8002264 <__aeabi_i2d+0x34>
 8002236:	17c3      	asrs	r3, r0, #31
 8002238:	18c5      	adds	r5, r0, r3
 800223a:	405d      	eors	r5, r3
 800223c:	0fc4      	lsrs	r4, r0, #31
 800223e:	0028      	movs	r0, r5
 8002240:	f000 f8ae 	bl	80023a0 <__clzsi2>
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <__aeabi_i2d+0x5c>)
 8002246:	1a12      	subs	r2, r2, r0
 8002248:	280a      	cmp	r0, #10
 800224a:	dc16      	bgt.n	800227a <__aeabi_i2d+0x4a>
 800224c:	0003      	movs	r3, r0
 800224e:	002e      	movs	r6, r5
 8002250:	3315      	adds	r3, #21
 8002252:	409e      	lsls	r6, r3
 8002254:	230b      	movs	r3, #11
 8002256:	1a18      	subs	r0, r3, r0
 8002258:	40c5      	lsrs	r5, r0
 800225a:	0553      	lsls	r3, r2, #21
 800225c:	032d      	lsls	r5, r5, #12
 800225e:	0b2d      	lsrs	r5, r5, #12
 8002260:	0d5b      	lsrs	r3, r3, #21
 8002262:	e003      	b.n	800226c <__aeabi_i2d+0x3c>
 8002264:	2400      	movs	r4, #0
 8002266:	2300      	movs	r3, #0
 8002268:	2500      	movs	r5, #0
 800226a:	2600      	movs	r6, #0
 800226c:	051b      	lsls	r3, r3, #20
 800226e:	432b      	orrs	r3, r5
 8002270:	07e4      	lsls	r4, r4, #31
 8002272:	4323      	orrs	r3, r4
 8002274:	0030      	movs	r0, r6
 8002276:	0019      	movs	r1, r3
 8002278:	bd70      	pop	{r4, r5, r6, pc}
 800227a:	380b      	subs	r0, #11
 800227c:	4085      	lsls	r5, r0
 800227e:	0553      	lsls	r3, r2, #21
 8002280:	032d      	lsls	r5, r5, #12
 8002282:	2600      	movs	r6, #0
 8002284:	0b2d      	lsrs	r5, r5, #12
 8002286:	0d5b      	lsrs	r3, r3, #21
 8002288:	e7f0      	b.n	800226c <__aeabi_i2d+0x3c>
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	0000041e 	.word	0x0000041e

08002290 <__aeabi_d2f>:
 8002290:	0002      	movs	r2, r0
 8002292:	004b      	lsls	r3, r1, #1
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	0308      	lsls	r0, r1, #12
 8002298:	0d5b      	lsrs	r3, r3, #21
 800229a:	4e3d      	ldr	r6, [pc, #244]	; (8002390 <__aeabi_d2f+0x100>)
 800229c:	0fcc      	lsrs	r4, r1, #31
 800229e:	0a40      	lsrs	r0, r0, #9
 80022a0:	0f51      	lsrs	r1, r2, #29
 80022a2:	1c5f      	adds	r7, r3, #1
 80022a4:	4308      	orrs	r0, r1
 80022a6:	00d5      	lsls	r5, r2, #3
 80022a8:	4237      	tst	r7, r6
 80022aa:	d00a      	beq.n	80022c2 <__aeabi_d2f+0x32>
 80022ac:	4939      	ldr	r1, [pc, #228]	; (8002394 <__aeabi_d2f+0x104>)
 80022ae:	185e      	adds	r6, r3, r1
 80022b0:	2efe      	cmp	r6, #254	; 0xfe
 80022b2:	dd16      	ble.n	80022e2 <__aeabi_d2f+0x52>
 80022b4:	23ff      	movs	r3, #255	; 0xff
 80022b6:	2100      	movs	r1, #0
 80022b8:	05db      	lsls	r3, r3, #23
 80022ba:	430b      	orrs	r3, r1
 80022bc:	07e0      	lsls	r0, r4, #31
 80022be:	4318      	orrs	r0, r3
 80022c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <__aeabi_d2f+0x44>
 80022c6:	4328      	orrs	r0, r5
 80022c8:	d027      	beq.n	800231a <__aeabi_d2f+0x8a>
 80022ca:	2105      	movs	r1, #5
 80022cc:	0189      	lsls	r1, r1, #6
 80022ce:	0a49      	lsrs	r1, r1, #9
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e7f1      	b.n	80022b8 <__aeabi_d2f+0x28>
 80022d4:	4305      	orrs	r5, r0
 80022d6:	d0ed      	beq.n	80022b4 <__aeabi_d2f+0x24>
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	03c9      	lsls	r1, r1, #15
 80022dc:	23ff      	movs	r3, #255	; 0xff
 80022de:	4301      	orrs	r1, r0
 80022e0:	e7ea      	b.n	80022b8 <__aeabi_d2f+0x28>
 80022e2:	2e00      	cmp	r6, #0
 80022e4:	dd1c      	ble.n	8002320 <__aeabi_d2f+0x90>
 80022e6:	0192      	lsls	r2, r2, #6
 80022e8:	0011      	movs	r1, r2
 80022ea:	1e4a      	subs	r2, r1, #1
 80022ec:	4191      	sbcs	r1, r2
 80022ee:	00c0      	lsls	r0, r0, #3
 80022f0:	0f6d      	lsrs	r5, r5, #29
 80022f2:	4301      	orrs	r1, r0
 80022f4:	4329      	orrs	r1, r5
 80022f6:	074b      	lsls	r3, r1, #29
 80022f8:	d048      	beq.n	800238c <__aeabi_d2f+0xfc>
 80022fa:	230f      	movs	r3, #15
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d000      	beq.n	8002304 <__aeabi_d2f+0x74>
 8002302:	3104      	adds	r1, #4
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	04db      	lsls	r3, r3, #19
 8002308:	400b      	ands	r3, r1
 800230a:	d03f      	beq.n	800238c <__aeabi_d2f+0xfc>
 800230c:	1c72      	adds	r2, r6, #1
 800230e:	2efe      	cmp	r6, #254	; 0xfe
 8002310:	d0d0      	beq.n	80022b4 <__aeabi_d2f+0x24>
 8002312:	0189      	lsls	r1, r1, #6
 8002314:	0a49      	lsrs	r1, r1, #9
 8002316:	b2d3      	uxtb	r3, r2
 8002318:	e7ce      	b.n	80022b8 <__aeabi_d2f+0x28>
 800231a:	2300      	movs	r3, #0
 800231c:	2100      	movs	r1, #0
 800231e:	e7cb      	b.n	80022b8 <__aeabi_d2f+0x28>
 8002320:	0032      	movs	r2, r6
 8002322:	3217      	adds	r2, #23
 8002324:	db22      	blt.n	800236c <__aeabi_d2f+0xdc>
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	221e      	movs	r2, #30
 800232a:	0409      	lsls	r1, r1, #16
 800232c:	4308      	orrs	r0, r1
 800232e:	1b92      	subs	r2, r2, r6
 8002330:	2a1f      	cmp	r2, #31
 8002332:	dd1d      	ble.n	8002370 <__aeabi_d2f+0xe0>
 8002334:	2102      	movs	r1, #2
 8002336:	4249      	negs	r1, r1
 8002338:	1b8e      	subs	r6, r1, r6
 800233a:	0001      	movs	r1, r0
 800233c:	40f1      	lsrs	r1, r6
 800233e:	000e      	movs	r6, r1
 8002340:	2a20      	cmp	r2, #32
 8002342:	d004      	beq.n	800234e <__aeabi_d2f+0xbe>
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <__aeabi_d2f+0x108>)
 8002346:	4694      	mov	ip, r2
 8002348:	4463      	add	r3, ip
 800234a:	4098      	lsls	r0, r3
 800234c:	4305      	orrs	r5, r0
 800234e:	0029      	movs	r1, r5
 8002350:	1e4d      	subs	r5, r1, #1
 8002352:	41a9      	sbcs	r1, r5
 8002354:	4331      	orrs	r1, r6
 8002356:	2600      	movs	r6, #0
 8002358:	074b      	lsls	r3, r1, #29
 800235a:	d1ce      	bne.n	80022fa <__aeabi_d2f+0x6a>
 800235c:	2080      	movs	r0, #128	; 0x80
 800235e:	000b      	movs	r3, r1
 8002360:	04c0      	lsls	r0, r0, #19
 8002362:	2201      	movs	r2, #1
 8002364:	4003      	ands	r3, r0
 8002366:	4201      	tst	r1, r0
 8002368:	d1d3      	bne.n	8002312 <__aeabi_d2f+0x82>
 800236a:	e7af      	b.n	80022cc <__aeabi_d2f+0x3c>
 800236c:	2300      	movs	r3, #0
 800236e:	e7ac      	b.n	80022ca <__aeabi_d2f+0x3a>
 8002370:	490a      	ldr	r1, [pc, #40]	; (800239c <__aeabi_d2f+0x10c>)
 8002372:	468c      	mov	ip, r1
 8002374:	0029      	movs	r1, r5
 8002376:	4463      	add	r3, ip
 8002378:	40d1      	lsrs	r1, r2
 800237a:	409d      	lsls	r5, r3
 800237c:	000a      	movs	r2, r1
 800237e:	0029      	movs	r1, r5
 8002380:	4098      	lsls	r0, r3
 8002382:	1e4d      	subs	r5, r1, #1
 8002384:	41a9      	sbcs	r1, r5
 8002386:	4301      	orrs	r1, r0
 8002388:	4311      	orrs	r1, r2
 800238a:	e7e4      	b.n	8002356 <__aeabi_d2f+0xc6>
 800238c:	0033      	movs	r3, r6
 800238e:	e79d      	b.n	80022cc <__aeabi_d2f+0x3c>
 8002390:	000007fe 	.word	0x000007fe
 8002394:	fffffc80 	.word	0xfffffc80
 8002398:	fffffca2 	.word	0xfffffca2
 800239c:	fffffc82 	.word	0xfffffc82

080023a0 <__clzsi2>:
 80023a0:	211c      	movs	r1, #28
 80023a2:	2301      	movs	r3, #1
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	4298      	cmp	r0, r3
 80023a8:	d301      	bcc.n	80023ae <__clzsi2+0xe>
 80023aa:	0c00      	lsrs	r0, r0, #16
 80023ac:	3910      	subs	r1, #16
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	4298      	cmp	r0, r3
 80023b2:	d301      	bcc.n	80023b8 <__clzsi2+0x18>
 80023b4:	0a00      	lsrs	r0, r0, #8
 80023b6:	3908      	subs	r1, #8
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	4298      	cmp	r0, r3
 80023bc:	d301      	bcc.n	80023c2 <__clzsi2+0x22>
 80023be:	0900      	lsrs	r0, r0, #4
 80023c0:	3904      	subs	r1, #4
 80023c2:	a202      	add	r2, pc, #8	; (adr r2, 80023cc <__clzsi2+0x2c>)
 80023c4:	5c10      	ldrb	r0, [r2, r0]
 80023c6:	1840      	adds	r0, r0, r1
 80023c8:	4770      	bx	lr
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	02020304 	.word	0x02020304
 80023d0:	01010101 	.word	0x01010101
	...

080023dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e0:	f000 fb3a 	bl	8002a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e4:	f000 f84c 	bl	8002480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e8:	f000 f928 	bl	800263c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023ec:	f000 f8f6 	bl	80025dc <MX_USART2_UART_Init>
  MX_ADC_Init();
 80023f0:	f000 f898 	bl	8002524 <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc);
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <main+0x90>)
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fcf6 	bl	8002de8 <HAL_ADC_Start>
	  analog = HAL_ADC_GetValue(&hadc);
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <main+0x90>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 fd46 	bl	8002e90 <HAL_ADC_GetValue>
 8002404:	0003      	movs	r3, r0
 8002406:	0018      	movs	r0, r3
 8002408:	f7fe f94a 	bl	80006a0 <__aeabi_ui2f>
 800240c:	1c02      	adds	r2, r0, #0
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <main+0x94>)
 8002410:	601a      	str	r2, [r3, #0]
	  temperature = Termistor(analog);
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <main+0x94>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c18      	adds	r0, r3, #0
 8002418:	f7fe f922 	bl	8000660 <__aeabi_f2iz>
 800241c:	0003      	movs	r3, r0
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f9a0 	bl	8002764 <Termistor>
 8002424:	0002      	movs	r2, r0
 8002426:	000b      	movs	r3, r1
 8002428:	0010      	movs	r0, r2
 800242a:	0019      	movs	r1, r3
 800242c:	f7ff ff30 	bl	8002290 <__aeabi_d2f>
 8002430:	1c02      	adds	r2, r0, #0
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <main+0x98>)
 8002434:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 8002436:	2064      	movs	r0, #100	; 0x64
 8002438:	f000 fb72 	bl	8002b20 <HAL_Delay>

	  if(temperature > 25){
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <main+0x98>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	490d      	ldr	r1, [pc, #52]	; (8002478 <main+0x9c>)
 8002442:	1c18      	adds	r0, r3, #0
 8002444:	f7fe f83a 	bl	80004bc <__aeabi_fcmpgt>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d007      	beq.n	800245c <main+0x80>
		  GPIOB->ODR = 0x100;
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <main+0xa0>)
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	0052      	lsls	r2, r2, #1
 8002452:	615a      	str	r2, [r3, #20]
		  HAL_Delay(100);
 8002454:	2064      	movs	r0, #100	; 0x64
 8002456:	f000 fb63 	bl	8002b20 <HAL_Delay>
 800245a:	e7cb      	b.n	80023f4 <main+0x18>
	  }
	  else{
		  GPIOB->ODR = 0;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <main+0xa0>)
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
		  HAL_Delay(100);
 8002462:	2064      	movs	r0, #100	; 0x64
 8002464:	f000 fb5c 	bl	8002b20 <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 8002468:	e7c4      	b.n	80023f4 <main+0x18>
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	2000011c 	.word	0x2000011c
 8002470:	20000090 	.word	0x20000090
 8002474:	20000094 	.word	0x20000094
 8002478:	41c80000 	.word	0x41c80000
 800247c:	48000400 	.word	0x48000400

08002480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b091      	sub	sp, #68	; 0x44
 8002484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002486:	2410      	movs	r4, #16
 8002488:	193b      	adds	r3, r7, r4
 800248a:	0018      	movs	r0, r3
 800248c:	2330      	movs	r3, #48	; 0x30
 800248e:	001a      	movs	r2, r3
 8002490:	2100      	movs	r1, #0
 8002492:	f002 f87f 	bl	8004594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002496:	003b      	movs	r3, r7
 8002498:	0018      	movs	r0, r3
 800249a:	2310      	movs	r3, #16
 800249c:	001a      	movs	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	f002 f878 	bl	8004594 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80024a4:	0021      	movs	r1, r4
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	2212      	movs	r2, #18
 80024aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	2201      	movs	r2, #1
 80024b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	2201      	movs	r2, #1
 80024b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	2210      	movs	r2, #16
 80024bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2210      	movs	r2, #16
 80024c2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2202      	movs	r2, #2
 80024c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	0212      	lsls	r2, r2, #8
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	0352      	lsls	r2, r2, #13
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2200      	movs	r2, #0
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	0018      	movs	r0, r3
 80024e4:	f001 f894 	bl	8003610 <HAL_RCC_OscConfig>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80024ec:	f000 f9b2 	bl	8002854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f0:	003b      	movs	r3, r7
 80024f2:	2207      	movs	r2, #7
 80024f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f6:	003b      	movs	r3, r7
 80024f8:	2202      	movs	r2, #2
 80024fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fc:	003b      	movs	r3, r7
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002502:	003b      	movs	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002508:	003b      	movs	r3, r7
 800250a:	2101      	movs	r1, #1
 800250c:	0018      	movs	r0, r3
 800250e:	f001 fb9d 	bl	8003c4c <HAL_RCC_ClockConfig>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d001      	beq.n	800251a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002516:	f000 f99d 	bl	8002854 <Error_Handler>
  }
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b011      	add	sp, #68	; 0x44
 8002520:	bd90      	pop	{r4, r7, pc}
	...

08002524 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	0018      	movs	r0, r3
 800252e:	230c      	movs	r3, #12
 8002530:	001a      	movs	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	f002 f82e 	bl	8004594 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <MX_ADC_Init+0xb0>)
 800253a:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <MX_ADC_Init+0xb4>)
 800253c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <MX_ADC_Init+0xb0>)
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002552:	2201      	movs	r2, #1
 8002554:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002558:	2204      	movs	r2, #4
 800255a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <MX_ADC_Init+0xb0>)
 800255e:	2200      	movs	r2, #0
 8002560:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002564:	2200      	movs	r2, #0
 8002566:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <MX_ADC_Init+0xb0>)
 800256a:	2200      	movs	r2, #0
 800256c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002570:	2200      	movs	r2, #0
 8002572:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002576:	22c2      	movs	r2, #194	; 0xc2
 8002578:	32ff      	adds	r2, #255	; 0xff
 800257a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <MX_ADC_Init+0xb0>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002584:	2224      	movs	r2, #36	; 0x24
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <MX_ADC_Init+0xb0>)
 800258c:	2201      	movs	r2, #1
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <MX_ADC_Init+0xb0>)
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fae8 	bl	8002b68 <HAL_ADC_Init>
 8002598:	1e03      	subs	r3, r0, #0
 800259a:	d001      	beq.n	80025a0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800259c:	f000 f95a 	bl	8002854 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	2207      	movs	r2, #7
 80025a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	0152      	lsls	r2, r2, #5
 80025ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	0552      	lsls	r2, r2, #21
 80025b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025b6:	1d3a      	adds	r2, r7, #4
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <MX_ADC_Init+0xb0>)
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fc73 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80025c6:	f000 f945 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	2000011c 	.word	0x2000011c
 80025d8:	40012400 	.word	0x40012400

080025dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <MX_USART2_UART_Init+0x58>)
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <MX_USART2_UART_Init+0x5c>)
 80025e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <MX_USART2_UART_Init+0x58>)
 80025e8:	2296      	movs	r2, #150	; 0x96
 80025ea:	0212      	lsls	r2, r2, #8
 80025ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_USART2_UART_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <MX_USART2_UART_Init+0x58>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_USART2_UART_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_USART2_UART_Init+0x58>)
 8002602:	220c      	movs	r2, #12
 8002604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_USART2_UART_Init+0x58>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_USART2_UART_Init+0x58>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_USART2_UART_Init+0x58>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_USART2_UART_Init+0x58>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <MX_USART2_UART_Init+0x58>)
 8002620:	0018      	movs	r0, r3
 8002622:	f001 fc67 	bl	8003ef4 <HAL_UART_Init>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800262a:	f000 f913 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000098 	.word	0x20000098
 8002638:	40004400 	.word	0x40004400

0800263c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b08b      	sub	sp, #44	; 0x2c
 8002640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	2414      	movs	r4, #20
 8002644:	193b      	adds	r3, r7, r4
 8002646:	0018      	movs	r0, r3
 8002648:	2314      	movs	r3, #20
 800264a:	001a      	movs	r2, r3
 800264c:	2100      	movs	r1, #0
 800264e:	f001 ffa1 	bl	8004594 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	4b40      	ldr	r3, [pc, #256]	; (8002754 <MX_GPIO_Init+0x118>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <MX_GPIO_Init+0x118>)
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0309      	lsls	r1, r1, #12
 800265c:	430a      	orrs	r2, r1
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <MX_GPIO_Init+0x118>)
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	031b      	lsls	r3, r3, #12
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <MX_GPIO_Init+0x118>)
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <MX_GPIO_Init+0x118>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	03c9      	lsls	r1, r1, #15
 8002678:	430a      	orrs	r2, r1
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <MX_GPIO_Init+0x118>)
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	03db      	lsls	r3, r3, #15
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b32      	ldr	r3, [pc, #200]	; (8002754 <MX_GPIO_Init+0x118>)
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <MX_GPIO_Init+0x118>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0289      	lsls	r1, r1, #10
 8002694:	430a      	orrs	r2, r1
 8002696:	615a      	str	r2, [r3, #20]
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <MX_GPIO_Init+0x118>)
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <MX_GPIO_Init+0x118>)
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <MX_GPIO_Init+0x118>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	02c9      	lsls	r1, r1, #11
 80026b0:	430a      	orrs	r2, r1
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <MX_GPIO_Init+0x118>)
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	02db      	lsls	r3, r3, #11
 80026bc:	4013      	ands	r3, r2
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026c2:	2390      	movs	r3, #144	; 0x90
 80026c4:	05db      	lsls	r3, r3, #23
 80026c6:	2200      	movs	r2, #0
 80026c8:	2120      	movs	r1, #32
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 ff82 	bl	80035d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4820      	ldr	r0, [pc, #128]	; (8002758 <MX_GPIO_Init+0x11c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	0019      	movs	r1, r3
 80026da:	f000 ff7b 	bl	80035d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	0192      	lsls	r2, r2, #6
 80026e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	4a1c      	ldr	r2, [pc, #112]	; (800275c <MX_GPIO_Init+0x120>)
 80026ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <MX_GPIO_Init+0x124>)
 80026f6:	0019      	movs	r1, r3
 80026f8:	0010      	movs	r0, r2
 80026fa:	f000 fdfb 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	2220      	movs	r2, #32
 8002702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002704:	193b      	adds	r3, r7, r4
 8002706:	2201      	movs	r2, #1
 8002708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	193b      	adds	r3, r7, r4
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002716:	193a      	adds	r2, r7, r4
 8002718:	2390      	movs	r3, #144	; 0x90
 800271a:	05db      	lsls	r3, r3, #23
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f000 fde8 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002724:	0021      	movs	r1, r4
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	0052      	lsls	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2201      	movs	r2, #1
 8002732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002740:	187b      	adds	r3, r7, r1
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <MX_GPIO_Init+0x11c>)
 8002744:	0019      	movs	r1, r3
 8002746:	0010      	movs	r0, r2
 8002748:	f000 fdd4 	bl	80032f4 <HAL_GPIO_Init>

}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b00b      	add	sp, #44	; 0x2c
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	48000400 	.word	0x48000400
 800275c:	10210000 	.word	0x10210000
 8002760:	48000800 	.word	0x48000800

08002764 <Termistor>:

/* USER CODE BEGIN 4 */
double Termistor(int temp){
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	double tp;

	tp = log(((40960000 / temp) - 10000));
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	482e      	ldr	r0, [pc, #184]	; (8002828 <Termistor+0xc4>)
 8002770:	f7fd fd54 	bl	800021c <__divsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	4a2d      	ldr	r2, [pc, #180]	; (800282c <Termistor+0xc8>)
 8002778:	4694      	mov	ip, r2
 800277a:	4463      	add	r3, ip
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff fd57 	bl	8002230 <__aeabi_i2d>
 8002782:	0002      	movs	r2, r0
 8002784:	000b      	movs	r3, r1
 8002786:	0010      	movs	r0, r2
 8002788:	0019      	movs	r1, r3
 800278a:	f001 ff0b 	bl	80045a4 <log>
 800278e:	0002      	movs	r2, r0
 8002790:	000b      	movs	r3, r1
 8002792:	60ba      	str	r2, [r7, #8]
 8002794:	60fb      	str	r3, [r7, #12]
	tp = 1 / (0.001125308852122 + (0.000234711863267 * tp) + (0.000000085663516 * tp * tp * tp));
 8002796:	4a26      	ldr	r2, [pc, #152]	; (8002830 <Termistor+0xcc>)
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <Termistor+0xd0>)
 800279a:	68b8      	ldr	r0, [r7, #8]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	f7fe ff2b 	bl	80015f8 <__aeabi_dmul>
 80027a2:	0002      	movs	r2, r0
 80027a4:	000b      	movs	r3, r1
 80027a6:	0010      	movs	r0, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	4a23      	ldr	r2, [pc, #140]	; (8002838 <Termistor+0xd4>)
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <Termistor+0xd8>)
 80027ae:	f7fd ffb3 	bl	8000718 <__aeabi_dadd>
 80027b2:	0002      	movs	r2, r0
 80027b4:	000b      	movs	r3, r1
 80027b6:	0014      	movs	r4, r2
 80027b8:	001d      	movs	r5, r3
 80027ba:	4a21      	ldr	r2, [pc, #132]	; (8002840 <Termistor+0xdc>)
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <Termistor+0xe0>)
 80027be:	68b8      	ldr	r0, [r7, #8]
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	f7fe ff19 	bl	80015f8 <__aeabi_dmul>
 80027c6:	0002      	movs	r2, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	0010      	movs	r0, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f7fe ff11 	bl	80015f8 <__aeabi_dmul>
 80027d6:	0002      	movs	r2, r0
 80027d8:	000b      	movs	r3, r1
 80027da:	0010      	movs	r0, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f7fe ff09 	bl	80015f8 <__aeabi_dmul>
 80027e6:	0002      	movs	r2, r0
 80027e8:	000b      	movs	r3, r1
 80027ea:	0020      	movs	r0, r4
 80027ec:	0029      	movs	r1, r5
 80027ee:	f7fd ff93 	bl	8000718 <__aeabi_dadd>
 80027f2:	0002      	movs	r2, r0
 80027f4:	000b      	movs	r3, r1
 80027f6:	2000      	movs	r0, #0
 80027f8:	4913      	ldr	r1, [pc, #76]	; (8002848 <Termistor+0xe4>)
 80027fa:	f7fe faf7 	bl	8000dec <__aeabi_ddiv>
 80027fe:	0002      	movs	r2, r0
 8002800:	000b      	movs	r3, r1
 8002802:	60ba      	str	r2, [r7, #8]
 8002804:	60fb      	str	r3, [r7, #12]
	tp = tp - 273.15;
 8002806:	4a11      	ldr	r2, [pc, #68]	; (800284c <Termistor+0xe8>)
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <Termistor+0xec>)
 800280a:	68b8      	ldr	r0, [r7, #8]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	f7ff f95f 	bl	8001ad0 <__aeabi_dsub>
 8002812:	0002      	movs	r2, r0
 8002814:	000b      	movs	r3, r1
 8002816:	60ba      	str	r2, [r7, #8]
 8002818:	60fb      	str	r3, [r7, #12]

	return tp;
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
}
 800281e:	0010      	movs	r0, r2
 8002820:	0019      	movs	r1, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bdb0      	pop	{r4, r5, r7, pc}
 8002828:	02710000 	.word	0x02710000
 800282c:	ffffd8f0 	.word	0xffffd8f0
 8002830:	8dad9646 	.word	0x8dad9646
 8002834:	3f2ec39f 	.word	0x3f2ec39f
 8002838:	2defd570 	.word	0x2defd570
 800283c:	3f526fe3 	.word	0x3f526fe3
 8002840:	82bca1f9 	.word	0x82bca1f9
 8002844:	3e76fec0 	.word	0x3e76fec0
 8002848:	3ff00000 	.word	0x3ff00000
 800284c:	66666666 	.word	0x66666666
 8002850:	40711266 	.word	0x40711266

08002854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002858:	b672      	cpsid	i
}
 800285a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800285c:	e7fe      	b.n	800285c <Error_Handler+0x8>
	...

08002860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_MspInit+0x44>)
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_MspInit+0x44>)
 800286c:	2101      	movs	r1, #1
 800286e:	430a      	orrs	r2, r1
 8002870:	619a      	str	r2, [r3, #24]
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_MspInit+0x44>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2201      	movs	r2, #1
 8002878:	4013      	ands	r3, r2
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_MspInit+0x44>)
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_MspInit+0x44>)
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	0549      	lsls	r1, r1, #21
 8002888:	430a      	orrs	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_MspInit+0x44>)
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	055b      	lsls	r3, r3, #21
 8002894:	4013      	ands	r3, r2
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	2414      	movs	r4, #20
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	0018      	movs	r0, r3
 80028b6:	2314      	movs	r3, #20
 80028b8:	001a      	movs	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	f001 fe6a 	bl	8004594 <memset>
  if(hadc->Instance==ADC1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_ADC_MspInit+0x84>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12b      	bne.n	8002922 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_ADC_MspInit+0x88>)
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0x88>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0089      	lsls	r1, r1, #2
 80028d4:	430a      	orrs	r2, r1
 80028d6:	619a      	str	r2, [r3, #24]
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_ADC_MspInit+0x88>)
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_ADC_MspInit+0x88>)
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_ADC_MspInit+0x88>)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	0289      	lsls	r1, r1, #10
 80028f0:	430a      	orrs	r2, r1
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_ADC_MspInit+0x88>)
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002908:	193b      	adds	r3, r7, r4
 800290a:	2203      	movs	r2, #3
 800290c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	193a      	adds	r2, r7, r4
 8002916:	2390      	movs	r3, #144	; 0x90
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fce9 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b00b      	add	sp, #44	; 0x2c
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	40012400 	.word	0x40012400
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	2414      	movs	r4, #20
 800293e:	193b      	adds	r3, r7, r4
 8002940:	0018      	movs	r0, r3
 8002942:	2314      	movs	r3, #20
 8002944:	001a      	movs	r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	f001 fe24 	bl	8004594 <memset>
  if(huart->Instance==USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_UART_MspInit+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d132      	bne.n	80029bc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_UART_MspInit+0x94>)
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_UART_MspInit+0x94>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0289      	lsls	r1, r1, #10
 8002960:	430a      	orrs	r2, r1
 8002962:	61da      	str	r2, [r3, #28]
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_UART_MspInit+0x94>)
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_UART_MspInit+0x94>)
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_UART_MspInit+0x94>)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0289      	lsls	r1, r1, #10
 800297c:	430a      	orrs	r2, r1
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_UART_MspInit+0x94>)
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800298e:	0021      	movs	r1, r4
 8002990:	187b      	adds	r3, r7, r1
 8002992:	220c      	movs	r2, #12
 8002994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2202      	movs	r2, #2
 800299a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	2203      	movs	r2, #3
 80029a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2201      	movs	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	187a      	adds	r2, r7, r1
 80029b0:	2390      	movs	r3, #144	; 0x90
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	0011      	movs	r1, r2
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fc9c 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	46bd      	mov	sp, r7
 80029c0:	b00b      	add	sp, #44	; 0x2c
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40021000 	.word	0x40021000

080029cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <NMI_Handler+0x4>

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f0:	f000 f87a 	bl	8002ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a04:	480d      	ldr	r0, [pc, #52]	; (8002a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a0a:	490e      	ldr	r1, [pc, #56]	; (8002a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <LoopForever+0xe>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a20:	4c0b      	ldr	r4, [pc, #44]	; (8002a50 <LoopForever+0x16>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a2e:	f7ff ffe4 	bl	80029fa <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a32:	f001 fd8b 	bl	800454c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a36:	f7ff fcd1 	bl	80023dc <main>

08002a3a <LoopForever>:

LoopForever:
    b LoopForever
 8002a3a:	e7fe      	b.n	8002a3a <LoopForever>
  ldr   r0, =_estack
 8002a3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a48:	08004a68 	.word	0x08004a68
  ldr r2, =_sbss
 8002a4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a50:	20000160 	.word	0x20000160

08002a54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC1_IRQHandler>
	...

08002a58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_Init+0x24>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_Init+0x24>)
 8002a62:	2110      	movs	r1, #16
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f000 f809 	bl	8002a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6e:	f7ff fef7 	bl	8002860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40022000 	.word	0x40022000

08002a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_InitTick+0x5c>)
 8002a8a:	681c      	ldr	r4, [r3, #0]
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_InitTick+0x60>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	0019      	movs	r1, r3
 8002a92:	23fa      	movs	r3, #250	; 0xfa
 8002a94:	0098      	lsls	r0, r3, #2
 8002a96:	f7fd fb37 	bl	8000108 <__udivsi3>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	0020      	movs	r0, r4
 8002aa0:	f7fd fb32 	bl	8000108 <__udivsi3>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fc17 	bl	80032da <HAL_SYSTICK_Config>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e00f      	b.n	8002ad4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d80b      	bhi.n	8002ad2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	2301      	movs	r3, #1
 8002abe:	425b      	negs	r3, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fbf4 	bl	80032b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_InitTick+0x64>)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b003      	add	sp, #12
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_IncTick+0x1c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	001a      	movs	r2, r3
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_IncTick+0x20>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	18d2      	adds	r2, r2, r3
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_IncTick+0x20>)
 8002afa:	601a      	str	r2, [r3, #0]
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	20000008 	.word	0x20000008
 8002b08:	2000015c 	.word	0x2000015c

08002b0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b02      	ldr	r3, [pc, #8]	; (8002b1c <HAL_GetTick+0x10>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	2000015c 	.word	0x2000015c

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3301      	adds	r3, #1
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_Delay+0x44>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	001a      	movs	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	189b      	adds	r3, r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	f7ff ffe0 	bl	8002b0c <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	20000008 	.word	0x20000008

08002b68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b70:	230f      	movs	r3, #15
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e125      	b.n	8002dd2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2234      	movs	r2, #52	; 0x34
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff fe82 	bl	80028a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	2210      	movs	r2, #16
 8002baa:	4013      	ands	r3, r2
 8002bac:	d000      	beq.n	8002bb0 <HAL_ADC_Init+0x48>
 8002bae:	e103      	b.n	8002db8 <HAL_ADC_Init+0x250>
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d000      	beq.n	8002bbc <HAL_ADC_Init+0x54>
 8002bba:	e0fd      	b.n	8002db8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002bc6:	d000      	beq.n	8002bca <HAL_ADC_Init+0x62>
 8002bc8:	e0f6      	b.n	8002db8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_ADC_Init+0x274>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2203      	movs	r2, #3
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d112      	bne.n	8002c0e <HAL_ADC_Init+0xa6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d009      	beq.n	8002c0a <HAL_ADC_Init+0xa2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	401a      	ands	r2, r3
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_Init+0xa6>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_Init+0xa8>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	0899      	lsrs	r1, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4964      	ldr	r1, [pc, #400]	; (8002de0 <HAL_ADC_Init+0x278>)
 8002c4e:	400a      	ands	r2, r1
 8002c50:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7e1b      	ldrb	r3, [r3, #24]
 8002c56:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7e5b      	ldrb	r3, [r3, #25]
 8002c5c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c5e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7e9b      	ldrb	r3, [r3, #26]
 8002c64:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c66:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d002      	beq.n	8002c76 <HAL_ADC_Init+0x10e>
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	015b      	lsls	r3, r3, #5
 8002c74:	e000      	b.n	8002c78 <HAL_ADC_Init+0x110>
 8002c76:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c78:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c7e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_Init+0x124>
 8002c88:	2304      	movs	r3, #4
 8002c8a:	e000      	b.n	8002c8e <HAL_ADC_Init+0x126>
 8002c8c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2124      	movs	r1, #36	; 0x24
 8002c94:	5c5b      	ldrb	r3, [r3, r1]
 8002c96:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c98:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7edb      	ldrb	r3, [r3, #27]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d115      	bne.n	8002cd4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7e9b      	ldrb	r3, [r3, #26]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	0252      	lsls	r2, r2, #9
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	e00b      	b.n	8002cd4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	2201      	movs	r2, #1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	23c2      	movs	r3, #194	; 0xc2
 8002cda:	33ff      	adds	r3, #255	; 0xff
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d007      	beq.n	8002cf0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	055b      	lsls	r3, r3, #21
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d01b      	beq.n	8002d44 <HAL_ADC_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d017      	beq.n	8002d44 <HAL_ADC_Init+0x1dc>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d013      	beq.n	8002d44 <HAL_ADC_Init+0x1dc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d00f      	beq.n	8002d44 <HAL_ADC_Init+0x1dc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d00b      	beq.n	8002d44 <HAL_ADC_Init+0x1dc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d007      	beq.n	8002d44 <HAL_ADC_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d003      	beq.n	8002d44 <HAL_ADC_Init+0x1dc>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	2b07      	cmp	r3, #7
 8002d42:	d112      	bne.n	8002d6a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2107      	movs	r1, #7
 8002d50:	438a      	bics	r2, r1
 8002d52:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6959      	ldr	r1, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	2207      	movs	r2, #7
 8002d60:	401a      	ands	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_ADC_Init+0x27c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d10b      	bne.n	8002d92 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	2203      	movs	r2, #3
 8002d86:	4393      	bics	r3, r2
 8002d88:	2201      	movs	r2, #1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d90:	e01c      	b.n	8002dcc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	2212      	movs	r2, #18
 8002d98:	4393      	bics	r3, r2
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2201      	movs	r2, #1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002dae:	230f      	movs	r3, #15
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002db6:	e009      	b.n	8002dcc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	781b      	ldrb	r3, [r3, #0]
}
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b004      	add	sp, #16
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	fffffefd 	.word	0xfffffefd
 8002de0:	fffe0219 	.word	0xfffe0219
 8002de4:	833fffe7 	.word	0x833fffe7

08002de8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	230f      	movs	r3, #15
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	4013      	ands	r3, r2
 8002e02:	d138      	bne.n	8002e76 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2234      	movs	r2, #52	; 0x34
 8002e08:	5c9b      	ldrb	r3, [r3, r2]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_Start+0x2a>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e038      	b.n	8002e84 <HAL_ADC_Start+0x9c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2234      	movs	r2, #52	; 0x34
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7e5b      	ldrb	r3, [r3, #25]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d007      	beq.n	8002e32 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002e22:	230f      	movs	r3, #15
 8002e24:	18fc      	adds	r4, r7, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 f933 	bl	8003094 <ADC_Enable>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e32:	230f      	movs	r3, #15
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d120      	bne.n	8002e7e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <HAL_ADC_Start+0xa4>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	0052      	lsls	r2, r2, #1
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2234      	movs	r2, #52	; 0x34
 8002e58:	2100      	movs	r1, #0
 8002e5a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	221c      	movs	r2, #28
 8002e62:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2104      	movs	r1, #4
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	e003      	b.n	8002e7e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e76:	230f      	movs	r3, #15
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e7e:	230f      	movs	r3, #15
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b005      	add	sp, #20
 8002e8a:	bd90      	pop	{r4, r7, pc}
 8002e8c:	fffff0fe 	.word	0xfffff0fe

08002e90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb2:	230f      	movs	r3, #15
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	055b      	lsls	r3, r3, #21
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d011      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x46>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d00d      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x46>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d009      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x46>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d005      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x46>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d001      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x46>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2234      	movs	r2, #52	; 0x34
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x54>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e0bb      	b.n	8003074 <HAL_ADC_ConfigChannel+0x1cc>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2234      	movs	r2, #52	; 0x34
 8002f00:	2101      	movs	r1, #1
 8002f02:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d000      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x6a>
 8002f10:	e09f      	b.n	8003052 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a59      	ldr	r2, [pc, #356]	; (800307c <HAL_ADC_ConfigChannel+0x1d4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x76>
 8002f1c:	e077      	b.n	800300e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	055b      	lsls	r3, r3, #21
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d037      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d033      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d02f      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d02b      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d027      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d023      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d01f      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	2b07      	cmp	r3, #7
 8002f76:	d01b      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2107      	movs	r1, #7
 8002f84:	400b      	ands	r3, r1
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d012      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2107      	movs	r1, #7
 8002f96:	438a      	bics	r2, r1
 8002f98:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6959      	ldr	r1, [r3, #20]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d003      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x118>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b11      	cmp	r3, #17
 8002fbe:	d152      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002fc0:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <HAL_ADC_ConfigChannel+0x1d8>)
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d102      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x12a>
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	e001      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x12e>
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	03db      	lsls	r3, r3, #15
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_ADC_ConfigChannel+0x1d8>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d140      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_ADC_ConfigChannel+0x1dc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4927      	ldr	r1, [pc, #156]	; (8003088 <HAL_ADC_ConfigChannel+0x1e0>)
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7fd f88c 	bl	8000108 <__udivsi3>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	3b01      	subs	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f9      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x158>
 800300c:	e02b      	b.n	8003066 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	4099      	lsls	r1, r3
 800301c:	000b      	movs	r3, r1
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b10      	cmp	r3, #16
 800302e:	d003      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x190>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b11      	cmp	r3, #17
 8003036:	d116      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_ADC_ConfigChannel+0x1d8>)
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b10      	cmp	r3, #16
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1a0>
 8003044:	4a11      	ldr	r2, [pc, #68]	; (800308c <HAL_ADC_ConfigChannel+0x1e4>)
 8003046:	e000      	b.n	800304a <HAL_ADC_ConfigChannel+0x1a2>
 8003048:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_ADC_ConfigChannel+0x1e8>)
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_ADC_ConfigChannel+0x1d8>)
 800304c:	400a      	ands	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e009      	b.n	8003066 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	2220      	movs	r2, #32
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800305e:	230f      	movs	r3, #15
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2234      	movs	r2, #52	; 0x34
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800306e:	230f      	movs	r3, #15
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	781b      	ldrb	r3, [r3, #0]
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b004      	add	sp, #16
 800307a:	bd80      	pop	{r7, pc}
 800307c:	00001001 	.word	0x00001001
 8003080:	40012708 	.word	0x40012708
 8003084:	20000000 	.word	0x20000000
 8003088:	000f4240 	.word	0x000f4240
 800308c:	ff7fffff 	.word	0xff7fffff
 8003090:	ffbfffff 	.word	0xffbfffff

08003094 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2203      	movs	r2, #3
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d112      	bne.n	80030d8 <ADC_Enable+0x44>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2201      	movs	r2, #1
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d009      	beq.n	80030d4 <ADC_Enable+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	401a      	ands	r2, r3
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d101      	bne.n	80030d8 <ADC_Enable+0x44>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <ADC_Enable+0x46>
 80030d8:	2300      	movs	r3, #0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d14b      	bne.n	8003176 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <ADC_Enable+0xec>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	d00d      	beq.n	8003106 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	2210      	movs	r2, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2201      	movs	r2, #1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e038      	b.n	8003178 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <ADC_Enable+0xf0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	491b      	ldr	r1, [pc, #108]	; (8003188 <ADC_Enable+0xf4>)
 800311c:	0018      	movs	r0, r3
 800311e:	f7fc fff3 	bl	8000108 <__udivsi3>
 8003122:	0003      	movs	r3, r0
 8003124:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003126:	e002      	b.n	800312e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3b01      	subs	r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003134:	f7ff fcea 	bl	8002b0c <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800313c:	e014      	b.n	8003168 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800313e:	f7ff fce5 	bl	8002b0c <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d90d      	bls.n	8003168 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	2210      	movs	r2, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	2201      	movs	r2, #1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	4013      	ands	r3, r2
 8003172:	2b01      	cmp	r3, #1
 8003174:	d1e3      	bne.n	800313e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	80000017 	.word	0x80000017
 8003184:	20000000 	.word	0x20000000
 8003188:	000f4240 	.word	0x000f4240

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	0002      	movs	r2, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800319a:	1dfb      	adds	r3, r7, #7
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b7f      	cmp	r3, #127	; 0x7f
 80031a0:	d828      	bhi.n	80031f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031a2:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <__NVIC_SetPriority+0xd4>)
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	33c0      	adds	r3, #192	; 0xc0
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	589b      	ldr	r3, [r3, r2]
 80031b2:	1dfa      	adds	r2, r7, #7
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	0011      	movs	r1, r2
 80031b8:	2203      	movs	r2, #3
 80031ba:	400a      	ands	r2, r1
 80031bc:	00d2      	lsls	r2, r2, #3
 80031be:	21ff      	movs	r1, #255	; 0xff
 80031c0:	4091      	lsls	r1, r2
 80031c2:	000a      	movs	r2, r1
 80031c4:	43d2      	mvns	r2, r2
 80031c6:	401a      	ands	r2, r3
 80031c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	401a      	ands	r2, r3
 80031d2:	1dfb      	adds	r3, r7, #7
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	0018      	movs	r0, r3
 80031d8:	2303      	movs	r3, #3
 80031da:	4003      	ands	r3, r0
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e0:	481f      	ldr	r0, [pc, #124]	; (8003260 <__NVIC_SetPriority+0xd4>)
 80031e2:	1dfb      	adds	r3, r7, #7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	430a      	orrs	r2, r1
 80031ec:	33c0      	adds	r3, #192	; 0xc0
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80031f2:	e031      	b.n	8003258 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <__NVIC_SetPriority+0xd8>)
 80031f6:	1dfb      	adds	r3, r7, #7
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	0019      	movs	r1, r3
 80031fc:	230f      	movs	r3, #15
 80031fe:	400b      	ands	r3, r1
 8003200:	3b08      	subs	r3, #8
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3306      	adds	r3, #6
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	3304      	adds	r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1dfa      	adds	r2, r7, #7
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	0011      	movs	r1, r2
 8003214:	2203      	movs	r2, #3
 8003216:	400a      	ands	r2, r1
 8003218:	00d2      	lsls	r2, r2, #3
 800321a:	21ff      	movs	r1, #255	; 0xff
 800321c:	4091      	lsls	r1, r2
 800321e:	000a      	movs	r2, r1
 8003220:	43d2      	mvns	r2, r2
 8003222:	401a      	ands	r2, r3
 8003224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	22ff      	movs	r2, #255	; 0xff
 800322c:	401a      	ands	r2, r3
 800322e:	1dfb      	adds	r3, r7, #7
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	0018      	movs	r0, r3
 8003234:	2303      	movs	r3, #3
 8003236:	4003      	ands	r3, r0
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <__NVIC_SetPriority+0xd8>)
 800323e:	1dfb      	adds	r3, r7, #7
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	001c      	movs	r4, r3
 8003244:	230f      	movs	r3, #15
 8003246:	4023      	ands	r3, r4
 8003248:	3b08      	subs	r3, #8
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	430a      	orrs	r2, r1
 800324e:	3306      	adds	r3, #6
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	18c3      	adds	r3, r0, r3
 8003254:	3304      	adds	r3, #4
 8003256:	601a      	str	r2, [r3, #0]
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b003      	add	sp, #12
 800325e:	bd90      	pop	{r4, r7, pc}
 8003260:	e000e100 	.word	0xe000e100
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1e5a      	subs	r2, r3, #1
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	045b      	lsls	r3, r3, #17
 8003278:	429a      	cmp	r2, r3
 800327a:	d301      	bcc.n	8003280 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327c:	2301      	movs	r3, #1
 800327e:	e010      	b.n	80032a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <SysTick_Config+0x44>)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	3a01      	subs	r2, #1
 8003286:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003288:	2301      	movs	r3, #1
 800328a:	425b      	negs	r3, r3
 800328c:	2103      	movs	r1, #3
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff ff7c 	bl	800318c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x44>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x44>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b002      	add	sp, #8
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	210f      	movs	r1, #15
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	1c02      	adds	r2, r0, #0
 80032c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7ff ff5d 	bl	800318c <__NVIC_SetPriority>
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff ffbf 	bl	8003268 <SysTick_Config>
 80032ea:	0003      	movs	r3, r0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003302:	e14f      	b.n	80035a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2101      	movs	r1, #1
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4091      	lsls	r1, r2
 800330e:	000a      	movs	r2, r1
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d100      	bne.n	800331c <HAL_GPIO_Init+0x28>
 800331a:	e140      	b.n	800359e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d00b      	beq.n	800333c <HAL_GPIO_Init+0x48>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d007      	beq.n	800333c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003330:	2b11      	cmp	r3, #17
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b12      	cmp	r3, #18
 800333a:	d130      	bne.n	800339e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	409a      	lsls	r2, r3
 800334a:	0013      	movs	r3, r2
 800334c:	43da      	mvns	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	409a      	lsls	r2, r3
 800335e:	0013      	movs	r3, r2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003372:	2201      	movs	r2, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
 8003378:	0013      	movs	r3, r2
 800337a:	43da      	mvns	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	2201      	movs	r2, #1
 800338a:	401a      	ands	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	409a      	lsls	r2, r3
 80033ac:	0013      	movs	r3, r2
 80033ae:	43da      	mvns	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	0013      	movs	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0xea>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b12      	cmp	r3, #18
 80033dc:	d123      	bne.n	8003426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	08da      	lsrs	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3208      	adds	r2, #8
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	58d3      	ldr	r3, [r2, r3]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2207      	movs	r2, #7
 80033f0:	4013      	ands	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	220f      	movs	r2, #15
 80033f6:	409a      	lsls	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	43da      	mvns	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2107      	movs	r1, #7
 800340a:	400b      	ands	r3, r1
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	409a      	lsls	r2, r3
 8003410:	0013      	movs	r3, r2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	08da      	lsrs	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3208      	adds	r2, #8
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	6939      	ldr	r1, [r7, #16]
 8003424:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	409a      	lsls	r2, r3
 8003434:	0013      	movs	r3, r2
 8003436:	43da      	mvns	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2203      	movs	r2, #3
 8003444:	401a      	ands	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	0013      	movs	r3, r2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	055b      	lsls	r3, r3, #21
 8003462:	4013      	ands	r3, r2
 8003464:	d100      	bne.n	8003468 <HAL_GPIO_Init+0x174>
 8003466:	e09a      	b.n	800359e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003468:	4b54      	ldr	r3, [pc, #336]	; (80035bc <HAL_GPIO_Init+0x2c8>)
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_GPIO_Init+0x2c8>)
 800346e:	2101      	movs	r1, #1
 8003470:	430a      	orrs	r2, r1
 8003472:	619a      	str	r2, [r3, #24]
 8003474:	4b51      	ldr	r3, [pc, #324]	; (80035bc <HAL_GPIO_Init+0x2c8>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003480:	4a4f      	ldr	r2, [pc, #316]	; (80035c0 <HAL_GPIO_Init+0x2cc>)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	589b      	ldr	r3, [r3, r2]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2203      	movs	r2, #3
 8003492:	4013      	ands	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	409a      	lsls	r2, r3
 800349a:	0013      	movs	r3, r2
 800349c:	43da      	mvns	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	2390      	movs	r3, #144	; 0x90
 80034a8:	05db      	lsls	r3, r3, #23
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d013      	beq.n	80034d6 <HAL_GPIO_Init+0x1e2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a44      	ldr	r2, [pc, #272]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00d      	beq.n	80034d2 <HAL_GPIO_Init+0x1de>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a43      	ldr	r2, [pc, #268]	; (80035c8 <HAL_GPIO_Init+0x2d4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <HAL_GPIO_Init+0x1da>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a42      	ldr	r2, [pc, #264]	; (80035cc <HAL_GPIO_Init+0x2d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_GPIO_Init+0x1d6>
 80034c6:	2303      	movs	r3, #3
 80034c8:	e006      	b.n	80034d8 <HAL_GPIO_Init+0x1e4>
 80034ca:	2305      	movs	r3, #5
 80034cc:	e004      	b.n	80034d8 <HAL_GPIO_Init+0x1e4>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e002      	b.n	80034d8 <HAL_GPIO_Init+0x1e4>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_GPIO_Init+0x1e4>
 80034d6:	2300      	movs	r3, #0
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	2103      	movs	r1, #3
 80034dc:	400a      	ands	r2, r1
 80034de:	0092      	lsls	r2, r2, #2
 80034e0:	4093      	lsls	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034e8:	4935      	ldr	r1, [pc, #212]	; (80035c0 <HAL_GPIO_Init+0x2cc>)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	3302      	adds	r3, #2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f6:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	025b      	lsls	r3, r3, #9
 800350e:	4013      	ands	r3, r2
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43da      	mvns	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	4013      	ands	r3, r2
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003544:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43da      	mvns	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	035b      	lsls	r3, r3, #13
 8003562:	4013      	ands	r3, r2
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800356e:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	43da      	mvns	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	039b      	lsls	r3, r3, #14
 800358c:	4013      	ands	r3, r2
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_GPIO_Init+0x2dc>)
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	40da      	lsrs	r2, r3
 80035ac:	1e13      	subs	r3, r2, #0
 80035ae:	d000      	beq.n	80035b2 <HAL_GPIO_Init+0x2be>
 80035b0:	e6a8      	b.n	8003304 <HAL_GPIO_Init+0x10>
  } 
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b006      	add	sp, #24
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40010000 	.word	0x40010000
 80035c4:	48000400 	.word	0x48000400
 80035c8:	48000800 	.word	0x48000800
 80035cc:	48000c00 	.word	0x48000c00
 80035d0:	40010400 	.word	0x40010400

080035d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	0008      	movs	r0, r1
 80035de:	0011      	movs	r1, r2
 80035e0:	1cbb      	adds	r3, r7, #2
 80035e2:	1c02      	adds	r2, r0, #0
 80035e4:	801a      	strh	r2, [r3, #0]
 80035e6:	1c7b      	adds	r3, r7, #1
 80035e8:	1c0a      	adds	r2, r1, #0
 80035ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ec:	1c7b      	adds	r3, r7, #1
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f4:	1cbb      	adds	r3, r7, #2
 80035f6:	881a      	ldrh	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fe:	1cbb      	adds	r3, r7, #2
 8003600:	881a      	ldrh	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e305      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	4013      	ands	r3, r2
 800362a:	d100      	bne.n	800362e <HAL_RCC_OscConfig+0x1e>
 800362c:	e08d      	b.n	800374a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800362e:	4bc5      	ldr	r3, [pc, #788]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	220c      	movs	r2, #12
 8003634:	4013      	ands	r3, r2
 8003636:	2b04      	cmp	r3, #4
 8003638:	d00e      	beq.n	8003658 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800363a:	4bc2      	ldr	r3, [pc, #776]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	220c      	movs	r2, #12
 8003640:	4013      	ands	r3, r2
 8003642:	2b08      	cmp	r3, #8
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x64>
 8003646:	4bbf      	ldr	r3, [pc, #764]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	23c0      	movs	r3, #192	; 0xc0
 800364c:	025b      	lsls	r3, r3, #9
 800364e:	401a      	ands	r2, r3
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	025b      	lsls	r3, r3, #9
 8003654:	429a      	cmp	r2, r3
 8003656:	d10d      	bne.n	8003674 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4bba      	ldr	r3, [pc, #744]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	4013      	ands	r3, r2
 8003662:	d100      	bne.n	8003666 <HAL_RCC_OscConfig+0x56>
 8003664:	e070      	b.n	8003748 <HAL_RCC_OscConfig+0x138>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d000      	beq.n	8003670 <HAL_RCC_OscConfig+0x60>
 800366e:	e06b      	b.n	8003748 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e2dc      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x7c>
 800367c:	4bb1      	ldr	r3, [pc, #708]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4bb0      	ldr	r3, [pc, #704]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	0249      	lsls	r1, r1, #9
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e02f      	b.n	80036ec <HAL_RCC_OscConfig+0xdc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0x9e>
 8003694:	4bab      	ldr	r3, [pc, #684]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4baa      	ldr	r3, [pc, #680]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800369a:	49ab      	ldr	r1, [pc, #684]	; (8003948 <HAL_RCC_OscConfig+0x338>)
 800369c:	400a      	ands	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	4ba8      	ldr	r3, [pc, #672]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4ba7      	ldr	r3, [pc, #668]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036a6:	49a9      	ldr	r1, [pc, #676]	; (800394c <HAL_RCC_OscConfig+0x33c>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e01e      	b.n	80036ec <HAL_RCC_OscConfig+0xdc>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d10e      	bne.n	80036d4 <HAL_RCC_OscConfig+0xc4>
 80036b6:	4ba3      	ldr	r3, [pc, #652]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4ba2      	ldr	r3, [pc, #648]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	02c9      	lsls	r1, r1, #11
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	4b9f      	ldr	r3, [pc, #636]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b9e      	ldr	r3, [pc, #632]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	0249      	lsls	r1, r1, #9
 80036ce:	430a      	orrs	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e00b      	b.n	80036ec <HAL_RCC_OscConfig+0xdc>
 80036d4:	4b9b      	ldr	r3, [pc, #620]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b9a      	ldr	r3, [pc, #616]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036da:	499b      	ldr	r1, [pc, #620]	; (8003948 <HAL_RCC_OscConfig+0x338>)
 80036dc:	400a      	ands	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	4b98      	ldr	r3, [pc, #608]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b97      	ldr	r3, [pc, #604]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80036e6:	4999      	ldr	r1, [pc, #612]	; (800394c <HAL_RCC_OscConfig+0x33c>)
 80036e8:	400a      	ands	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d014      	beq.n	800371e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7ff fa0a 	bl	8002b0c <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fe:	f7ff fa05 	bl	8002b0c <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b64      	cmp	r3, #100	; 0x64
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e28e      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	4b8c      	ldr	r3, [pc, #560]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0xee>
 800371c:	e015      	b.n	800374a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7ff f9f5 	bl	8002b0c <HAL_GetTick>
 8003722:	0003      	movs	r3, r0
 8003724:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003728:	f7ff f9f0 	bl	8002b0c <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e279      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	4b82      	ldr	r3, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	029b      	lsls	r3, r3, #10
 8003742:	4013      	ands	r3, r2
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x118>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2202      	movs	r2, #2
 8003750:	4013      	ands	r3, r2
 8003752:	d100      	bne.n	8003756 <HAL_RCC_OscConfig+0x146>
 8003754:	e06c      	b.n	8003830 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003756:	4b7b      	ldr	r3, [pc, #492]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	220c      	movs	r2, #12
 800375c:	4013      	ands	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003760:	4b78      	ldr	r3, [pc, #480]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	220c      	movs	r2, #12
 8003766:	4013      	ands	r3, r2
 8003768:	2b08      	cmp	r3, #8
 800376a:	d11f      	bne.n	80037ac <HAL_RCC_OscConfig+0x19c>
 800376c:	4b75      	ldr	r3, [pc, #468]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	23c0      	movs	r3, #192	; 0xc0
 8003772:	025b      	lsls	r3, r3, #9
 8003774:	401a      	ands	r2, r3
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	429a      	cmp	r2, r3
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b71      	ldr	r3, [pc, #452]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2202      	movs	r2, #2
 8003784:	4013      	ands	r3, r2
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x184>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e24c      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b6b      	ldr	r3, [pc, #428]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	22f8      	movs	r2, #248	; 0xf8
 800379a:	4393      	bics	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00da      	lsls	r2, r3, #3
 80037a4:	4b67      	ldr	r3, [pc, #412]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e041      	b.n	8003830 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d024      	beq.n	80037fe <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b62      	ldr	r3, [pc, #392]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7ff f9a4 	bl	8002b0c <HAL_GetTick>
 80037c4:	0003      	movs	r3, r0
 80037c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7ff f99f 	bl	8002b0c <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e228      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b59      	ldr	r3, [pc, #356]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2202      	movs	r2, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d0f1      	beq.n	80037ca <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e6:	4b57      	ldr	r3, [pc, #348]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	22f8      	movs	r2, #248	; 0xf8
 80037ec:	4393      	bics	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00da      	lsls	r2, r3, #3
 80037f6:	4b53      	ldr	r3, [pc, #332]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e018      	b.n	8003830 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b51      	ldr	r3, [pc, #324]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b50      	ldr	r3, [pc, #320]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003804:	2101      	movs	r1, #1
 8003806:	438a      	bics	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7ff f97f 	bl	8002b0c <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003814:	f7ff f97a 	bl	8002b0c <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e203      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2202      	movs	r2, #2
 800382c:	4013      	ands	r3, r2
 800382e:	d1f1      	bne.n	8003814 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2208      	movs	r2, #8
 8003836:	4013      	ands	r3, r2
 8003838:	d036      	beq.n	80038a8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d019      	beq.n	8003876 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	4b40      	ldr	r3, [pc, #256]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003846:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003848:	2101      	movs	r1, #1
 800384a:	430a      	orrs	r2, r1
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7ff f95d 	bl	8002b0c <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003858:	f7ff f958 	bl	8002b0c <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e1e1      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2202      	movs	r2, #2
 8003870:	4013      	ands	r3, r2
 8003872:	d0f1      	beq.n	8003858 <HAL_RCC_OscConfig+0x248>
 8003874:	e018      	b.n	80038a8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387a:	4b32      	ldr	r3, [pc, #200]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800387c:	2101      	movs	r1, #1
 800387e:	438a      	bics	r2, r1
 8003880:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003882:	f7ff f943 	bl	8002b0c <HAL_GetTick>
 8003886:	0003      	movs	r3, r0
 8003888:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388c:	f7ff f93e 	bl	8002b0c <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1c7      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389e:	4b29      	ldr	r3, [pc, #164]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2202      	movs	r2, #2
 80038a4:	4013      	ands	r3, r2
 80038a6:	d1f1      	bne.n	800388c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2204      	movs	r2, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	d100      	bne.n	80038b4 <HAL_RCC_OscConfig+0x2a4>
 80038b2:	e0b5      	b.n	8003a20 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b4:	201f      	movs	r0, #31
 80038b6:	183b      	adds	r3, r7, r0
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	055b      	lsls	r3, r3, #21
 80038c4:	4013      	ands	r3, r2
 80038c6:	d110      	bne.n	80038ea <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	0549      	lsls	r1, r1, #21
 80038d2:	430a      	orrs	r2, r1
 80038d4:	61da      	str	r2, [r3, #28]
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	055b      	lsls	r3, r3, #21
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_OscConfig+0x340>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4013      	ands	r3, r2
 80038f4:	d11a      	bne.n	800392c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b16      	ldr	r3, [pc, #88]	; (8003950 <HAL_RCC_OscConfig+0x340>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCC_OscConfig+0x340>)
 80038fc:	2180      	movs	r1, #128	; 0x80
 80038fe:	0049      	lsls	r1, r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003904:	f7ff f902 	bl	8002b0c <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390e:	f7ff f8fd 	bl	8002b0c <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b64      	cmp	r3, #100	; 0x64
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e186      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x340>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4013      	ands	r3, r2
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10f      	bne.n	8003954 <HAL_RCC_OscConfig+0x344>
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	4b02      	ldr	r3, [pc, #8]	; (8003944 <HAL_RCC_OscConfig+0x334>)
 800393a:	2101      	movs	r1, #1
 800393c:	430a      	orrs	r2, r1
 800393e:	621a      	str	r2, [r3, #32]
 8003940:	e036      	b.n	80039b0 <HAL_RCC_OscConfig+0x3a0>
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	40021000 	.word	0x40021000
 8003948:	fffeffff 	.word	0xfffeffff
 800394c:	fffbffff 	.word	0xfffbffff
 8003950:	40007000 	.word	0x40007000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10c      	bne.n	8003976 <HAL_RCC_OscConfig+0x366>
 800395c:	4bb6      	ldr	r3, [pc, #728]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	4bb5      	ldr	r3, [pc, #724]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003962:	2101      	movs	r1, #1
 8003964:	438a      	bics	r2, r1
 8003966:	621a      	str	r2, [r3, #32]
 8003968:	4bb3      	ldr	r3, [pc, #716]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 800396a:	6a1a      	ldr	r2, [r3, #32]
 800396c:	4bb2      	ldr	r3, [pc, #712]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 800396e:	2104      	movs	r1, #4
 8003970:	438a      	bics	r2, r1
 8003972:	621a      	str	r2, [r3, #32]
 8003974:	e01c      	b.n	80039b0 <HAL_RCC_OscConfig+0x3a0>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b05      	cmp	r3, #5
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x388>
 800397e:	4bae      	ldr	r3, [pc, #696]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	4bad      	ldr	r3, [pc, #692]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003984:	2104      	movs	r1, #4
 8003986:	430a      	orrs	r2, r1
 8003988:	621a      	str	r2, [r3, #32]
 800398a:	4bab      	ldr	r3, [pc, #684]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	4baa      	ldr	r3, [pc, #680]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003990:	2101      	movs	r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	621a      	str	r2, [r3, #32]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0x3a0>
 8003998:	4ba7      	ldr	r3, [pc, #668]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	4ba6      	ldr	r3, [pc, #664]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 800399e:	2101      	movs	r1, #1
 80039a0:	438a      	bics	r2, r1
 80039a2:	621a      	str	r2, [r3, #32]
 80039a4:	4ba4      	ldr	r3, [pc, #656]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	4ba3      	ldr	r3, [pc, #652]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 80039aa:	2104      	movs	r1, #4
 80039ac:	438a      	bics	r2, r1
 80039ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d014      	beq.n	80039e2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b8:	f7ff f8a8 	bl	8002b0c <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	e009      	b.n	80039d6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7ff f8a3 	bl	8002b0c <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	4a9b      	ldr	r2, [pc, #620]	; (8003c3c <HAL_RCC_OscConfig+0x62c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e12b      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	4b98      	ldr	r3, [pc, #608]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	2202      	movs	r2, #2
 80039dc:	4013      	ands	r3, r2
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3b2>
 80039e0:	e013      	b.n	8003a0a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e2:	f7ff f893 	bl	8002b0c <HAL_GetTick>
 80039e6:	0003      	movs	r3, r0
 80039e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ea:	e009      	b.n	8003a00 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7ff f88e 	bl	8002b0c <HAL_GetTick>
 80039f0:	0002      	movs	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	4a91      	ldr	r2, [pc, #580]	; (8003c3c <HAL_RCC_OscConfig+0x62c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e116      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a00:	4b8d      	ldr	r3, [pc, #564]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	2202      	movs	r2, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a0a:	231f      	movs	r3, #31
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a14:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	4b87      	ldr	r3, [pc, #540]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a1a:	4989      	ldr	r1, [pc, #548]	; (8003c40 <HAL_RCC_OscConfig+0x630>)
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2210      	movs	r2, #16
 8003a26:	4013      	ands	r3, r2
 8003a28:	d063      	beq.n	8003af2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d12a      	bne.n	8003a88 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a32:	4b81      	ldr	r3, [pc, #516]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a36:	4b80      	ldr	r3, [pc, #512]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a38:	2104      	movs	r1, #4
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003a3e:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a42:	4b7d      	ldr	r3, [pc, #500]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	430a      	orrs	r2, r1
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7ff f85f 	bl	8002b0c <HAL_GetTick>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a54:	f7ff f85a 	bl	8002b0c <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0e3      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a66:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d0f1      	beq.n	8003a54 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a70:	4b71      	ldr	r3, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	22f8      	movs	r2, #248	; 0xf8
 8003a76:	4393      	bics	r3, r2
 8003a78:	0019      	movs	r1, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	00da      	lsls	r2, r3, #3
 8003a80:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a82:	430a      	orrs	r2, r1
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34
 8003a86:	e034      	b.n	8003af2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	3305      	adds	r3, #5
 8003a8e:	d111      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003a90:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a94:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a96:	2104      	movs	r1, #4
 8003a98:	438a      	bics	r2, r1
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a9c:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	22f8      	movs	r2, #248	; 0xf8
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	00da      	lsls	r2, r3, #3
 8003aac:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ab2:	e01e      	b.n	8003af2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ab4:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab8:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003aba:	2104      	movs	r1, #4
 8003abc:	430a      	orrs	r2, r1
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003ac0:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac4:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	438a      	bics	r2, r1
 8003aca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003acc:	f7ff f81e 	bl	8002b0c <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ad6:	f7ff f819 	bl	8002b0c <HAL_GetTick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0a2      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	2202      	movs	r2, #2
 8003aee:	4013      	ands	r3, r2
 8003af0:	d1f1      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d100      	bne.n	8003afc <HAL_RCC_OscConfig+0x4ec>
 8003afa:	e097      	b.n	8003c2c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afc:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	220c      	movs	r2, #12
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d100      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4fa>
 8003b08:	e06b      	b.n	8003be2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d14c      	bne.n	8003bac <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b18:	494a      	ldr	r1, [pc, #296]	; (8003c44 <HAL_RCC_OscConfig+0x634>)
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fff5 	bl	8002b0c <HAL_GetTick>
 8003b22:	0003      	movs	r3, r0
 8003b24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe fff0 	bl	8002b0c <HAL_GetTick>
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e079      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	049b      	lsls	r3, r3, #18
 8003b42:	4013      	ands	r3, r2
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b46:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	4393      	bics	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b56:	430a      	orrs	r2, r1
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x638>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	4b32      	ldr	r3, [pc, #200]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	0449      	lsls	r1, r1, #17
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe ffc3 	bl	8002b0c <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe ffbe 	bl	8002b0c <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e047      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b9e:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	049b      	lsls	r3, r3, #18
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x57c>
 8003baa:	e03f      	b.n	8003c2c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bac:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003bb2:	4924      	ldr	r1, [pc, #144]	; (8003c44 <HAL_RCC_OscConfig+0x634>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe ffa8 	bl	8002b0c <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7fe ffa3 	bl	8002b0c <HAL_GetTick>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e02c      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	049b      	lsls	r3, r3, #18
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5b2>
 8003be0:	e024      	b.n	8003c2c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e01f      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_RCC_OscConfig+0x628>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	23c0      	movs	r3, #192	; 0xc0
 8003bfe:	025b      	lsls	r3, r3, #9
 8003c00:	401a      	ands	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d10e      	bne.n	8003c28 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	401a      	ands	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	23f0      	movs	r3, #240	; 0xf0
 8003c1c:	039b      	lsls	r3, r3, #14
 8003c1e:	401a      	ands	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b008      	add	sp, #32
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	00001388 	.word	0x00001388
 8003c40:	efffffff 	.word	0xefffffff
 8003c44:	feffffff 	.word	0xfeffffff
 8003c48:	ffc27fff 	.word	0xffc27fff

08003c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0b3      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c60:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	4013      	ands	r3, r2
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d911      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2201      	movs	r2, #1
 8003c74:	4393      	bics	r3, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e09a      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2202      	movs	r2, #2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d015      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d006      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003cac:	21e0      	movs	r1, #224	; 0xe0
 8003cae:	00c9      	lsls	r1, r1, #3
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	22f0      	movs	r2, #240	; 0xf0
 8003cba:	4393      	bics	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d040      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	029b      	lsls	r3, r3, #10
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d114      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06e      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	049b      	lsls	r3, r3, #18
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e062      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e05b      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	4393      	bics	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d24:	f7fe fef2 	bl	8002b0c <HAL_GetTick>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2c:	e009      	b.n	8003d42 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2e:	f7fe feed 	bl	8002b0c <HAL_GetTick>
 8003d32:	0002      	movs	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <HAL_RCC_ClockConfig+0x18c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e042      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	220c      	movs	r2, #12
 8003d48:	401a      	ands	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1ec      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d211      	bcs.n	8003d86 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2201      	movs	r2, #1
 8003d68:	4393      	bics	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <HAL_RCC_ClockConfig+0x184>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e020      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <HAL_RCC_ClockConfig+0x190>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003da4:	f000 f820 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da8:	0001      	movs	r1, r0
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x188>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	220f      	movs	r2, #15
 8003db2:	4013      	ands	r3, r2
 8003db4:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x194>)
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
 8003db8:	000a      	movs	r2, r1
 8003dba:	40da      	lsrs	r2, r3
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x198>)
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f7fe fe5d 	bl	8002a80 <HAL_InitTick>
  
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b004      	add	sp, #16
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	00001388 	.word	0x00001388
 8003ddc:	fffff8ff 	.word	0xfffff8ff
 8003de0:	08004a44 	.word	0x08004a44
 8003de4:	20000000 	.word	0x20000000

08003de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b08f      	sub	sp, #60	; 0x3c
 8003dec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003dee:	2314      	movs	r3, #20
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003df4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003df6:	c313      	stmia	r3!, {r0, r1, r4}
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e02:	c313      	stmia	r3!, {r0, r1, r4}
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e10:	2300      	movs	r3, #0
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	220c      	movs	r2, #12
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d002      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x4a>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x50>
 8003e30:	e02f      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e36:	e02f      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	0c9b      	lsrs	r3, r3, #18
 8003e3c:	220f      	movs	r2, #15
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2214      	movs	r2, #20
 8003e42:	18ba      	adds	r2, r7, r2
 8003e44:	5cd3      	ldrb	r3, [r2, r3]
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	4013      	ands	r3, r2
 8003e50:	1d3a      	adds	r2, r7, #4
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e58:	23c0      	movs	r3, #192	; 0xc0
 8003e5a:	025b      	lsls	r3, r3, #9
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	025b      	lsls	r3, r3, #9
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e68:	4811      	ldr	r0, [pc, #68]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e6a:	f7fc f94d 	bl	8000108 <__udivsi3>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	001a      	movs	r2, r3
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	4353      	muls	r3, r2
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7c:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e7e:	f7fc f943 	bl	8000108 <__udivsi3>
 8003e82:	0003      	movs	r3, r0
 8003e84:	001a      	movs	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	4353      	muls	r3, r2
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e90:	e002      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e96:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b00f      	add	sp, #60	; 0x3c
 8003ea0:	bd90      	pop	{r4, r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	080049a4 	.word	0x080049a4
 8003ea8:	080049b4 	.word	0x080049b4
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	007a1200 	.word	0x007a1200

08003eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b02      	ldr	r3, [pc, #8]	; (8003ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ecc:	f7ff fff2 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed0:	0001      	movs	r1, r0
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	2207      	movs	r2, #7
 8003eda:	4013      	ands	r3, r2
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
 8003ee0:	40d9      	lsrs	r1, r3
 8003ee2:	000b      	movs	r3, r1
}    
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08004a54 	.word	0x08004a54

08003ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e044      	b.n	8003f90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2274      	movs	r2, #116	; 0x74
 8003f12:	2100      	movs	r1, #0
 8003f14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7fe fd0b 	bl	8002934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2224      	movs	r2, #36	; 0x24
 8003f22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2101      	movs	r1, #1
 8003f30:	438a      	bics	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f830 	bl	8003f9c <UART_SetConfig>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e024      	b.n	8003f90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f97b 	bl	800424c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	490d      	ldr	r1, [pc, #52]	; (8003f98 <HAL_UART_Init+0xa4>)
 8003f62:	400a      	ands	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2108      	movs	r1, #8
 8003f72:	438a      	bics	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 fa13 	bl	80043b4 <UART_CheckIdleState>
 8003f8e:	0003      	movs	r3, r0
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	fffff7ff 	.word	0xfffff7ff

08003f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa4:	231e      	movs	r3, #30
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a97      	ldr	r2, [pc, #604]	; (8004228 <UART_SetConfig+0x28c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a92      	ldr	r2, [pc, #584]	; (800422c <UART_SetConfig+0x290>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a89      	ldr	r2, [pc, #548]	; (8004230 <UART_SetConfig+0x294>)
 800400a:	4013      	ands	r3, r2
 800400c:	0019      	movs	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a85      	ldr	r2, [pc, #532]	; (8004234 <UART_SetConfig+0x298>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d127      	bne.n	8004072 <UART_SetConfig+0xd6>
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <UART_SetConfig+0x29c>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	2203      	movs	r2, #3
 8004028:	4013      	ands	r3, r2
 800402a:	2b03      	cmp	r3, #3
 800402c:	d00d      	beq.n	800404a <UART_SetConfig+0xae>
 800402e:	d81b      	bhi.n	8004068 <UART_SetConfig+0xcc>
 8004030:	2b02      	cmp	r3, #2
 8004032:	d014      	beq.n	800405e <UART_SetConfig+0xc2>
 8004034:	d818      	bhi.n	8004068 <UART_SetConfig+0xcc>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <UART_SetConfig+0xa4>
 800403a:	2b01      	cmp	r3, #1
 800403c:	d00a      	beq.n	8004054 <UART_SetConfig+0xb8>
 800403e:	e013      	b.n	8004068 <UART_SetConfig+0xcc>
 8004040:	231f      	movs	r3, #31
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e035      	b.n	80040b6 <UART_SetConfig+0x11a>
 800404a:	231f      	movs	r3, #31
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	2202      	movs	r2, #2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e030      	b.n	80040b6 <UART_SetConfig+0x11a>
 8004054:	231f      	movs	r3, #31
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	2204      	movs	r2, #4
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e02b      	b.n	80040b6 <UART_SetConfig+0x11a>
 800405e:	231f      	movs	r3, #31
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2208      	movs	r2, #8
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e026      	b.n	80040b6 <UART_SetConfig+0x11a>
 8004068:	231f      	movs	r3, #31
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	2210      	movs	r2, #16
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e021      	b.n	80040b6 <UART_SetConfig+0x11a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a71      	ldr	r2, [pc, #452]	; (800423c <UART_SetConfig+0x2a0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d104      	bne.n	8004086 <UART_SetConfig+0xea>
 800407c:	231f      	movs	r3, #31
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e017      	b.n	80040b6 <UART_SetConfig+0x11a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6d      	ldr	r2, [pc, #436]	; (8004240 <UART_SetConfig+0x2a4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d104      	bne.n	800409a <UART_SetConfig+0xfe>
 8004090:	231f      	movs	r3, #31
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e00d      	b.n	80040b6 <UART_SetConfig+0x11a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a69      	ldr	r2, [pc, #420]	; (8004244 <UART_SetConfig+0x2a8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d104      	bne.n	80040ae <UART_SetConfig+0x112>
 80040a4:	231f      	movs	r3, #31
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e003      	b.n	80040b6 <UART_SetConfig+0x11a>
 80040ae:	231f      	movs	r3, #31
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	2210      	movs	r2, #16
 80040b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	429a      	cmp	r2, r3
 80040c0:	d15d      	bne.n	800417e <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80040c2:	231f      	movs	r3, #31
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d015      	beq.n	80040f8 <UART_SetConfig+0x15c>
 80040cc:	dc18      	bgt.n	8004100 <UART_SetConfig+0x164>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d00d      	beq.n	80040ee <UART_SetConfig+0x152>
 80040d2:	dc15      	bgt.n	8004100 <UART_SetConfig+0x164>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <UART_SetConfig+0x142>
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d005      	beq.n	80040e8 <UART_SetConfig+0x14c>
 80040dc:	e010      	b.n	8004100 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040de:	f7ff fef3 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 80040e2:	0003      	movs	r3, r0
 80040e4:	61bb      	str	r3, [r7, #24]
        break;
 80040e6:	e012      	b.n	800410e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e8:	4b57      	ldr	r3, [pc, #348]	; (8004248 <UART_SetConfig+0x2ac>)
 80040ea:	61bb      	str	r3, [r7, #24]
        break;
 80040ec:	e00f      	b.n	800410e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ee:	f7ff fe7b 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 80040f2:	0003      	movs	r3, r0
 80040f4:	61bb      	str	r3, [r7, #24]
        break;
 80040f6:	e00a      	b.n	800410e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	61bb      	str	r3, [r7, #24]
        break;
 80040fe:	e006      	b.n	800410e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004104:	231e      	movs	r3, #30
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
        break;
 800410c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d100      	bne.n	8004116 <UART_SetConfig+0x17a>
 8004114:	e07b      	b.n	800420e <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	18d2      	adds	r2, r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	0019      	movs	r1, r3
 8004128:	0010      	movs	r0, r2
 800412a:	f7fb ffed 	bl	8000108 <__udivsi3>
 800412e:	0003      	movs	r3, r0
 8004130:	b29b      	uxth	r3, r3
 8004132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d91c      	bls.n	8004174 <UART_SetConfig+0x1d8>
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	025b      	lsls	r3, r3, #9
 8004140:	429a      	cmp	r2, r3
 8004142:	d217      	bcs.n	8004174 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	b29a      	uxth	r2, r3
 8004148:	200e      	movs	r0, #14
 800414a:	183b      	adds	r3, r7, r0
 800414c:	210f      	movs	r1, #15
 800414e:	438a      	bics	r2, r1
 8004150:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	b29b      	uxth	r3, r3
 8004158:	2207      	movs	r2, #7
 800415a:	4013      	ands	r3, r2
 800415c:	b299      	uxth	r1, r3
 800415e:	183b      	adds	r3, r7, r0
 8004160:	183a      	adds	r2, r7, r0
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	183a      	adds	r2, r7, r0
 800416e:	8812      	ldrh	r2, [r2, #0]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	e04c      	b.n	800420e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004174:	231e      	movs	r3, #30
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e047      	b.n	800420e <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800417e:	231f      	movs	r3, #31
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d015      	beq.n	80041b4 <UART_SetConfig+0x218>
 8004188:	dc18      	bgt.n	80041bc <UART_SetConfig+0x220>
 800418a:	2b04      	cmp	r3, #4
 800418c:	d00d      	beq.n	80041aa <UART_SetConfig+0x20e>
 800418e:	dc15      	bgt.n	80041bc <UART_SetConfig+0x220>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <UART_SetConfig+0x1fe>
 8004194:	2b02      	cmp	r3, #2
 8004196:	d005      	beq.n	80041a4 <UART_SetConfig+0x208>
 8004198:	e010      	b.n	80041bc <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419a:	f7ff fe95 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 800419e:	0003      	movs	r3, r0
 80041a0:	61bb      	str	r3, [r7, #24]
        break;
 80041a2:	e012      	b.n	80041ca <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a4:	4b28      	ldr	r3, [pc, #160]	; (8004248 <UART_SetConfig+0x2ac>)
 80041a6:	61bb      	str	r3, [r7, #24]
        break;
 80041a8:	e00f      	b.n	80041ca <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041aa:	f7ff fe1d 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 80041ae:	0003      	movs	r3, r0
 80041b0:	61bb      	str	r3, [r7, #24]
        break;
 80041b2:	e00a      	b.n	80041ca <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	61bb      	str	r3, [r7, #24]
        break;
 80041ba:	e006      	b.n	80041ca <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c0:	231e      	movs	r3, #30
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
        break;
 80041c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01e      	beq.n	800420e <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	085a      	lsrs	r2, r3, #1
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	18d2      	adds	r2, r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	0019      	movs	r1, r3
 80041e0:	0010      	movs	r0, r2
 80041e2:	f7fb ff91 	bl	8000108 <__udivsi3>
 80041e6:	0003      	movs	r3, r0
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b0f      	cmp	r3, #15
 80041f0:	d909      	bls.n	8004206 <UART_SetConfig+0x26a>
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	025b      	lsls	r3, r3, #9
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d204      	bcs.n	8004206 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	e003      	b.n	800420e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004206:	231e      	movs	r3, #30
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800421a:	231e      	movs	r3, #30
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	781b      	ldrb	r3, [r3, #0]
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b008      	add	sp, #32
 8004226:	bd80      	pop	{r7, pc}
 8004228:	efff69f3 	.word	0xefff69f3
 800422c:	ffffcfff 	.word	0xffffcfff
 8004230:	fffff4ff 	.word	0xfffff4ff
 8004234:	40013800 	.word	0x40013800
 8004238:	40021000 	.word	0x40021000
 800423c:	40004400 	.word	0x40004400
 8004240:	40004800 	.word	0x40004800
 8004244:	40004c00 	.word	0x40004c00
 8004248:	007a1200 	.word	0x007a1200

0800424c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2201      	movs	r2, #1
 800425a:	4013      	ands	r3, r2
 800425c:	d00b      	beq.n	8004276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a4a      	ldr	r2, [pc, #296]	; (8004390 <UART_AdvFeatureConfig+0x144>)
 8004266:	4013      	ands	r3, r2
 8004268:	0019      	movs	r1, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2202      	movs	r2, #2
 800427c:	4013      	ands	r3, r2
 800427e:	d00b      	beq.n	8004298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4a43      	ldr	r2, [pc, #268]	; (8004394 <UART_AdvFeatureConfig+0x148>)
 8004288:	4013      	ands	r3, r2
 800428a:	0019      	movs	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2204      	movs	r2, #4
 800429e:	4013      	ands	r3, r2
 80042a0:	d00b      	beq.n	80042ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <UART_AdvFeatureConfig+0x14c>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2208      	movs	r2, #8
 80042c0:	4013      	ands	r3, r2
 80042c2:	d00b      	beq.n	80042dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a34      	ldr	r2, [pc, #208]	; (800439c <UART_AdvFeatureConfig+0x150>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	0019      	movs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2210      	movs	r2, #16
 80042e2:	4013      	ands	r3, r2
 80042e4:	d00b      	beq.n	80042fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a2c      	ldr	r2, [pc, #176]	; (80043a0 <UART_AdvFeatureConfig+0x154>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2220      	movs	r2, #32
 8004304:	4013      	ands	r3, r2
 8004306:	d00b      	beq.n	8004320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <UART_AdvFeatureConfig+0x158>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2240      	movs	r2, #64	; 0x40
 8004326:	4013      	ands	r3, r2
 8004328:	d01d      	beq.n	8004366 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <UART_AdvFeatureConfig+0x15c>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	035b      	lsls	r3, r3, #13
 800434a:	429a      	cmp	r2, r3
 800434c:	d10b      	bne.n	8004366 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4a15      	ldr	r2, [pc, #84]	; (80043ac <UART_AdvFeatureConfig+0x160>)
 8004356:	4013      	ands	r3, r2
 8004358:	0019      	movs	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	4013      	ands	r3, r2
 800436e:	d00b      	beq.n	8004388 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <UART_AdvFeatureConfig+0x164>)
 8004378:	4013      	ands	r3, r2
 800437a:	0019      	movs	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}
 8004390:	fffdffff 	.word	0xfffdffff
 8004394:	fffeffff 	.word	0xfffeffff
 8004398:	fffbffff 	.word	0xfffbffff
 800439c:	ffff7fff 	.word	0xffff7fff
 80043a0:	ffffefff 	.word	0xffffefff
 80043a4:	ffffdfff 	.word	0xffffdfff
 80043a8:	ffefffff 	.word	0xffefffff
 80043ac:	ff9fffff 	.word	0xff9fffff
 80043b0:	fff7ffff 	.word	0xfff7ffff

080043b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	2100      	movs	r1, #0
 80043c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c4:	f7fe fba2 	bl	8002b0c <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2208      	movs	r2, #8
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d10c      	bne.n	80043f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	0391      	lsls	r1, r2, #14
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <UART_CheckIdleState+0x8c>)
 80043e4:	9200      	str	r2, [sp, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f000 f82c 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 80043ec:	1e03      	subs	r3, r0, #0
 80043ee:	d001      	beq.n	80043f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e021      	b.n	8004438 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2204      	movs	r2, #4
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d10c      	bne.n	800441c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2280      	movs	r2, #128	; 0x80
 8004406:	03d1      	lsls	r1, r2, #15
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <UART_CheckIdleState+0x8c>)
 800440c:	9200      	str	r2, [sp, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	f000 f818 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 8004414:	1e03      	subs	r3, r0, #0
 8004416:	d001      	beq.n	800441c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e00d      	b.n	8004438 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2274      	movs	r2, #116	; 0x74
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b004      	add	sp, #16
 800443e:	bd80      	pop	{r7, pc}
 8004440:	01ffffff 	.word	0x01ffffff

08004444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	1dfb      	adds	r3, r7, #7
 8004452:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004454:	e05e      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	3301      	adds	r3, #1
 800445a:	d05b      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fe fb56 	bl	8002b0c <HAL_GetTick>
 8004460:	0002      	movs	r2, r0
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <UART_WaitOnFlagUntilTimeout+0x2e>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11b      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	492f      	ldr	r1, [pc, #188]	; (800453c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800447e:	400a      	ands	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	438a      	bics	r2, r1
 8004490:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2274      	movs	r2, #116	; 0x74
 80044a2:	2100      	movs	r1, #0
 80044a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e044      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2204      	movs	r2, #4
 80044b2:	4013      	ands	r3, r2
 80044b4:	d02e      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	401a      	ands	r2, r3
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d124      	bne.n	8004514 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	0112      	lsls	r2, r2, #4
 80044d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4917      	ldr	r1, [pc, #92]	; (800453c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	438a      	bics	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	2120      	movs	r1, #32
 8004506:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2274      	movs	r2, #116	; 0x74
 800450c:	2100      	movs	r1, #0
 800450e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e00f      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4013      	ands	r3, r2
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	425a      	negs	r2, r3
 8004524:	4153      	adcs	r3, r2
 8004526:	b2db      	uxtb	r3, r3
 8004528:	001a      	movs	r2, r3
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d091      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b004      	add	sp, #16
 800453a:	bd80      	pop	{r7, pc}
 800453c:	fffffe5f 	.word	0xfffffe5f

08004540 <__errno>:
 8004540:	4b01      	ldr	r3, [pc, #4]	; (8004548 <__errno+0x8>)
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	4770      	bx	lr
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	2000000c 	.word	0x2000000c

0800454c <__libc_init_array>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	2600      	movs	r6, #0
 8004550:	4d0c      	ldr	r5, [pc, #48]	; (8004584 <__libc_init_array+0x38>)
 8004552:	4c0d      	ldr	r4, [pc, #52]	; (8004588 <__libc_init_array+0x3c>)
 8004554:	1b64      	subs	r4, r4, r5
 8004556:	10a4      	asrs	r4, r4, #2
 8004558:	42a6      	cmp	r6, r4
 800455a:	d109      	bne.n	8004570 <__libc_init_array+0x24>
 800455c:	2600      	movs	r6, #0
 800455e:	f000 fa15 	bl	800498c <_init>
 8004562:	4d0a      	ldr	r5, [pc, #40]	; (800458c <__libc_init_array+0x40>)
 8004564:	4c0a      	ldr	r4, [pc, #40]	; (8004590 <__libc_init_array+0x44>)
 8004566:	1b64      	subs	r4, r4, r5
 8004568:	10a4      	asrs	r4, r4, #2
 800456a:	42a6      	cmp	r6, r4
 800456c:	d105      	bne.n	800457a <__libc_init_array+0x2e>
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	00b3      	lsls	r3, r6, #2
 8004572:	58eb      	ldr	r3, [r5, r3]
 8004574:	4798      	blx	r3
 8004576:	3601      	adds	r6, #1
 8004578:	e7ee      	b.n	8004558 <__libc_init_array+0xc>
 800457a:	00b3      	lsls	r3, r6, #2
 800457c:	58eb      	ldr	r3, [r5, r3]
 800457e:	4798      	blx	r3
 8004580:	3601      	adds	r6, #1
 8004582:	e7f2      	b.n	800456a <__libc_init_array+0x1e>
 8004584:	08004a60 	.word	0x08004a60
 8004588:	08004a60 	.word	0x08004a60
 800458c:	08004a60 	.word	0x08004a60
 8004590:	08004a64 	.word	0x08004a64

08004594 <memset>:
 8004594:	0003      	movs	r3, r0
 8004596:	1882      	adds	r2, r0, r2
 8004598:	4293      	cmp	r3, r2
 800459a:	d100      	bne.n	800459e <memset+0xa>
 800459c:	4770      	bx	lr
 800459e:	7019      	strb	r1, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	e7f9      	b.n	8004598 <memset+0x4>

080045a4 <log>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	0004      	movs	r4, r0
 80045a8:	000d      	movs	r5, r1
 80045aa:	f000 f839 	bl	8004620 <__ieee754_log>
 80045ae:	4b19      	ldr	r3, [pc, #100]	; (8004614 <log+0x70>)
 80045b0:	0006      	movs	r6, r0
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	000f      	movs	r7, r1
 80045b6:	b25b      	sxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	d01d      	beq.n	80045f8 <log+0x54>
 80045bc:	0022      	movs	r2, r4
 80045be:	002b      	movs	r3, r5
 80045c0:	0020      	movs	r0, r4
 80045c2:	0029      	movs	r1, r5
 80045c4:	f7fd fe16 	bl	80021f4 <__aeabi_dcmpun>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d115      	bne.n	80045f8 <log+0x54>
 80045cc:	2200      	movs	r2, #0
 80045ce:	2300      	movs	r3, #0
 80045d0:	0020      	movs	r0, r4
 80045d2:	0029      	movs	r1, r5
 80045d4:	f7fb ff38 	bl	8000448 <__aeabi_dcmpgt>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d10d      	bne.n	80045f8 <log+0x54>
 80045dc:	2200      	movs	r2, #0
 80045de:	2300      	movs	r3, #0
 80045e0:	0020      	movs	r0, r4
 80045e2:	0029      	movs	r1, r5
 80045e4:	f7fb ff16 	bl	8000414 <__aeabi_dcmpeq>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d008      	beq.n	80045fe <log+0x5a>
 80045ec:	f7ff ffa8 	bl	8004540 <__errno>
 80045f0:	2322      	movs	r3, #34	; 0x22
 80045f2:	2600      	movs	r6, #0
 80045f4:	4f08      	ldr	r7, [pc, #32]	; (8004618 <log+0x74>)
 80045f6:	6003      	str	r3, [r0, #0]
 80045f8:	0030      	movs	r0, r6
 80045fa:	0039      	movs	r1, r7
 80045fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fe:	f7ff ff9f 	bl	8004540 <__errno>
 8004602:	2321      	movs	r3, #33	; 0x21
 8004604:	6003      	str	r3, [r0, #0]
 8004606:	4805      	ldr	r0, [pc, #20]	; (800461c <log+0x78>)
 8004608:	f000 f9ba 	bl	8004980 <nan>
 800460c:	0006      	movs	r6, r0
 800460e:	000f      	movs	r7, r1
 8004610:	e7f2      	b.n	80045f8 <log+0x54>
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	20000070 	.word	0x20000070
 8004618:	fff00000 	.word	0xfff00000
 800461c:	08004a5c 	.word	0x08004a5c

08004620 <__ieee754_log>:
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004624:	000b      	movs	r3, r1
 8004626:	b08d      	sub	sp, #52	; 0x34
 8004628:	0352      	lsls	r2, r2, #13
 800462a:	4291      	cmp	r1, r2
 800462c:	da22      	bge.n	8004674 <__ieee754_log+0x54>
 800462e:	004a      	lsls	r2, r1, #1
 8004630:	0852      	lsrs	r2, r2, #1
 8004632:	4302      	orrs	r2, r0
 8004634:	d107      	bne.n	8004646 <__ieee754_log+0x26>
 8004636:	2200      	movs	r2, #0
 8004638:	2300      	movs	r3, #0
 800463a:	2000      	movs	r0, #0
 800463c:	49b3      	ldr	r1, [pc, #716]	; (800490c <__ieee754_log+0x2ec>)
 800463e:	f7fc fbd5 	bl	8000dec <__aeabi_ddiv>
 8004642:	b00d      	add	sp, #52	; 0x34
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004646:	2900      	cmp	r1, #0
 8004648:	da05      	bge.n	8004656 <__ieee754_log+0x36>
 800464a:	0002      	movs	r2, r0
 800464c:	f7fd fa40 	bl	8001ad0 <__aeabi_dsub>
 8004650:	2200      	movs	r2, #0
 8004652:	2300      	movs	r3, #0
 8004654:	e7f3      	b.n	800463e <__ieee754_log+0x1e>
 8004656:	4bae      	ldr	r3, [pc, #696]	; (8004910 <__ieee754_log+0x2f0>)
 8004658:	2200      	movs	r2, #0
 800465a:	f7fc ffcd 	bl	80015f8 <__aeabi_dmul>
 800465e:	2436      	movs	r4, #54	; 0x36
 8004660:	000b      	movs	r3, r1
 8004662:	4264      	negs	r4, r4
 8004664:	4aab      	ldr	r2, [pc, #684]	; (8004914 <__ieee754_log+0x2f4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	dd06      	ble.n	8004678 <__ieee754_log+0x58>
 800466a:	0002      	movs	r2, r0
 800466c:	000b      	movs	r3, r1
 800466e:	f7fc f853 	bl	8000718 <__aeabi_dadd>
 8004672:	e7e6      	b.n	8004642 <__ieee754_log+0x22>
 8004674:	2400      	movs	r4, #0
 8004676:	e7f5      	b.n	8004664 <__ieee754_log+0x44>
 8004678:	4da7      	ldr	r5, [pc, #668]	; (8004918 <__ieee754_log+0x2f8>)
 800467a:	151a      	asrs	r2, r3, #20
 800467c:	1952      	adds	r2, r2, r5
 800467e:	1912      	adds	r2, r2, r4
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	4ca6      	ldr	r4, [pc, #664]	; (800491c <__ieee754_log+0x2fc>)
 8004684:	0b1b      	lsrs	r3, r3, #12
 8004686:	9302      	str	r3, [sp, #8]
 8004688:	191c      	adds	r4, r3, r4
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	035b      	lsls	r3, r3, #13
 800468e:	4023      	ands	r3, r4
 8004690:	4ca3      	ldr	r4, [pc, #652]	; (8004920 <__ieee754_log+0x300>)
 8004692:	9d02      	ldr	r5, [sp, #8]
 8004694:	405c      	eors	r4, r3
 8004696:	151b      	asrs	r3, r3, #20
 8004698:	189b      	adds	r3, r3, r2
 800469a:	4325      	orrs	r5, r4
 800469c:	2200      	movs	r2, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	0029      	movs	r1, r5
 80046a2:	4b9f      	ldr	r3, [pc, #636]	; (8004920 <__ieee754_log+0x300>)
 80046a4:	f7fd fa14 	bl	8001ad0 <__aeabi_dsub>
 80046a8:	9b02      	ldr	r3, [sp, #8]
 80046aa:	0006      	movs	r6, r0
 80046ac:	3302      	adds	r3, #2
 80046ae:	031b      	lsls	r3, r3, #12
 80046b0:	000f      	movs	r7, r1
 80046b2:	2200      	movs	r2, #0
 80046b4:	0b1b      	lsrs	r3, r3, #12
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	dc64      	bgt.n	8004784 <__ieee754_log+0x164>
 80046ba:	2300      	movs	r3, #0
 80046bc:	f7fb feaa 	bl	8000414 <__aeabi_dcmpeq>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d019      	beq.n	80046f8 <__ieee754_log+0xd8>
 80046c4:	9b00      	ldr	r3, [sp, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d100      	bne.n	80046cc <__ieee754_log+0xac>
 80046ca:	e11c      	b.n	8004906 <__ieee754_log+0x2e6>
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fd fdaf 	bl	8002230 <__aeabi_i2d>
 80046d2:	4a94      	ldr	r2, [pc, #592]	; (8004924 <__ieee754_log+0x304>)
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <__ieee754_log+0x308>)
 80046d6:	0004      	movs	r4, r0
 80046d8:	000d      	movs	r5, r1
 80046da:	f7fc ff8d 	bl	80015f8 <__aeabi_dmul>
 80046de:	4a93      	ldr	r2, [pc, #588]	; (800492c <__ieee754_log+0x30c>)
 80046e0:	0006      	movs	r6, r0
 80046e2:	000f      	movs	r7, r1
 80046e4:	4b92      	ldr	r3, [pc, #584]	; (8004930 <__ieee754_log+0x310>)
 80046e6:	0020      	movs	r0, r4
 80046e8:	0029      	movs	r1, r5
 80046ea:	f7fc ff85 	bl	80015f8 <__aeabi_dmul>
 80046ee:	0002      	movs	r2, r0
 80046f0:	000b      	movs	r3, r1
 80046f2:	0030      	movs	r0, r6
 80046f4:	0039      	movs	r1, r7
 80046f6:	e7ba      	b.n	800466e <__ieee754_log+0x4e>
 80046f8:	4a8e      	ldr	r2, [pc, #568]	; (8004934 <__ieee754_log+0x314>)
 80046fa:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <__ieee754_log+0x318>)
 80046fc:	0030      	movs	r0, r6
 80046fe:	0039      	movs	r1, r7
 8004700:	f7fc ff7a 	bl	80015f8 <__aeabi_dmul>
 8004704:	0002      	movs	r2, r0
 8004706:	000b      	movs	r3, r1
 8004708:	2000      	movs	r0, #0
 800470a:	498c      	ldr	r1, [pc, #560]	; (800493c <__ieee754_log+0x31c>)
 800470c:	f7fd f9e0 	bl	8001ad0 <__aeabi_dsub>
 8004710:	0032      	movs	r2, r6
 8004712:	0004      	movs	r4, r0
 8004714:	000d      	movs	r5, r1
 8004716:	003b      	movs	r3, r7
 8004718:	0030      	movs	r0, r6
 800471a:	0039      	movs	r1, r7
 800471c:	f7fc ff6c 	bl	80015f8 <__aeabi_dmul>
 8004720:	000b      	movs	r3, r1
 8004722:	0002      	movs	r2, r0
 8004724:	0029      	movs	r1, r5
 8004726:	0020      	movs	r0, r4
 8004728:	f7fc ff66 	bl	80015f8 <__aeabi_dmul>
 800472c:	9b00      	ldr	r3, [sp, #0]
 800472e:	9002      	str	r0, [sp, #8]
 8004730:	9103      	str	r1, [sp, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <__ieee754_log+0x124>
 8004736:	0002      	movs	r2, r0
 8004738:	000b      	movs	r3, r1
 800473a:	0030      	movs	r0, r6
 800473c:	0039      	movs	r1, r7
 800473e:	f7fd f9c7 	bl	8001ad0 <__aeabi_dsub>
 8004742:	e77e      	b.n	8004642 <__ieee754_log+0x22>
 8004744:	9800      	ldr	r0, [sp, #0]
 8004746:	f7fd fd73 	bl	8002230 <__aeabi_i2d>
 800474a:	4a76      	ldr	r2, [pc, #472]	; (8004924 <__ieee754_log+0x304>)
 800474c:	4b76      	ldr	r3, [pc, #472]	; (8004928 <__ieee754_log+0x308>)
 800474e:	0004      	movs	r4, r0
 8004750:	000d      	movs	r5, r1
 8004752:	f7fc ff51 	bl	80015f8 <__aeabi_dmul>
 8004756:	4a75      	ldr	r2, [pc, #468]	; (800492c <__ieee754_log+0x30c>)
 8004758:	9000      	str	r0, [sp, #0]
 800475a:	9101      	str	r1, [sp, #4]
 800475c:	4b74      	ldr	r3, [pc, #464]	; (8004930 <__ieee754_log+0x310>)
 800475e:	0020      	movs	r0, r4
 8004760:	0029      	movs	r1, r5
 8004762:	f7fc ff49 	bl	80015f8 <__aeabi_dmul>
 8004766:	0002      	movs	r2, r0
 8004768:	000b      	movs	r3, r1
 800476a:	9802      	ldr	r0, [sp, #8]
 800476c:	9903      	ldr	r1, [sp, #12]
 800476e:	f7fd f9af 	bl	8001ad0 <__aeabi_dsub>
 8004772:	0032      	movs	r2, r6
 8004774:	003b      	movs	r3, r7
 8004776:	f7fd f9ab 	bl	8001ad0 <__aeabi_dsub>
 800477a:	0002      	movs	r2, r0
 800477c:	000b      	movs	r3, r1
 800477e:	9800      	ldr	r0, [sp, #0]
 8004780:	9901      	ldr	r1, [sp, #4]
 8004782:	e7dc      	b.n	800473e <__ieee754_log+0x11e>
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	05db      	lsls	r3, r3, #23
 8004788:	f7fb ffc6 	bl	8000718 <__aeabi_dadd>
 800478c:	0002      	movs	r2, r0
 800478e:	000b      	movs	r3, r1
 8004790:	0030      	movs	r0, r6
 8004792:	0039      	movs	r1, r7
 8004794:	f7fc fb2a 	bl	8000dec <__aeabi_ddiv>
 8004798:	9004      	str	r0, [sp, #16]
 800479a:	9105      	str	r1, [sp, #20]
 800479c:	9800      	ldr	r0, [sp, #0]
 800479e:	f7fd fd47 	bl	8002230 <__aeabi_i2d>
 80047a2:	9a04      	ldr	r2, [sp, #16]
 80047a4:	9b05      	ldr	r3, [sp, #20]
 80047a6:	9006      	str	r0, [sp, #24]
 80047a8:	9107      	str	r1, [sp, #28]
 80047aa:	0010      	movs	r0, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	f7fc ff23 	bl	80015f8 <__aeabi_dmul>
 80047b2:	4a63      	ldr	r2, [pc, #396]	; (8004940 <__ieee754_log+0x320>)
 80047b4:	9b02      	ldr	r3, [sp, #8]
 80047b6:	4694      	mov	ip, r2
 80047b8:	4463      	add	r3, ip
 80047ba:	0002      	movs	r2, r0
 80047bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80047be:	000b      	movs	r3, r1
 80047c0:	9008      	str	r0, [sp, #32]
 80047c2:	9109      	str	r1, [sp, #36]	; 0x24
 80047c4:	f7fc ff18 	bl	80015f8 <__aeabi_dmul>
 80047c8:	0004      	movs	r4, r0
 80047ca:	000d      	movs	r5, r1
 80047cc:	4a5d      	ldr	r2, [pc, #372]	; (8004944 <__ieee754_log+0x324>)
 80047ce:	4b5e      	ldr	r3, [pc, #376]	; (8004948 <__ieee754_log+0x328>)
 80047d0:	f7fc ff12 	bl	80015f8 <__aeabi_dmul>
 80047d4:	4a5d      	ldr	r2, [pc, #372]	; (800494c <__ieee754_log+0x32c>)
 80047d6:	4b5e      	ldr	r3, [pc, #376]	; (8004950 <__ieee754_log+0x330>)
 80047d8:	f7fb ff9e 	bl	8000718 <__aeabi_dadd>
 80047dc:	0022      	movs	r2, r4
 80047de:	002b      	movs	r3, r5
 80047e0:	f7fc ff0a 	bl	80015f8 <__aeabi_dmul>
 80047e4:	4a5b      	ldr	r2, [pc, #364]	; (8004954 <__ieee754_log+0x334>)
 80047e6:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <__ieee754_log+0x338>)
 80047e8:	f7fb ff96 	bl	8000718 <__aeabi_dadd>
 80047ec:	0022      	movs	r2, r4
 80047ee:	002b      	movs	r3, r5
 80047f0:	f7fc ff02 	bl	80015f8 <__aeabi_dmul>
 80047f4:	4a59      	ldr	r2, [pc, #356]	; (800495c <__ieee754_log+0x33c>)
 80047f6:	4b5a      	ldr	r3, [pc, #360]	; (8004960 <__ieee754_log+0x340>)
 80047f8:	f7fb ff8e 	bl	8000718 <__aeabi_dadd>
 80047fc:	9a08      	ldr	r2, [sp, #32]
 80047fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004800:	f7fc fefa 	bl	80015f8 <__aeabi_dmul>
 8004804:	4a57      	ldr	r2, [pc, #348]	; (8004964 <__ieee754_log+0x344>)
 8004806:	9008      	str	r0, [sp, #32]
 8004808:	9109      	str	r1, [sp, #36]	; 0x24
 800480a:	4b57      	ldr	r3, [pc, #348]	; (8004968 <__ieee754_log+0x348>)
 800480c:	0020      	movs	r0, r4
 800480e:	0029      	movs	r1, r5
 8004810:	f7fc fef2 	bl	80015f8 <__aeabi_dmul>
 8004814:	4a55      	ldr	r2, [pc, #340]	; (800496c <__ieee754_log+0x34c>)
 8004816:	4b56      	ldr	r3, [pc, #344]	; (8004970 <__ieee754_log+0x350>)
 8004818:	f7fb ff7e 	bl	8000718 <__aeabi_dadd>
 800481c:	0022      	movs	r2, r4
 800481e:	002b      	movs	r3, r5
 8004820:	f7fc feea 	bl	80015f8 <__aeabi_dmul>
 8004824:	4a53      	ldr	r2, [pc, #332]	; (8004974 <__ieee754_log+0x354>)
 8004826:	4b54      	ldr	r3, [pc, #336]	; (8004978 <__ieee754_log+0x358>)
 8004828:	f7fb ff76 	bl	8000718 <__aeabi_dadd>
 800482c:	0022      	movs	r2, r4
 800482e:	002b      	movs	r3, r5
 8004830:	f7fc fee2 	bl	80015f8 <__aeabi_dmul>
 8004834:	0002      	movs	r2, r0
 8004836:	000b      	movs	r3, r1
 8004838:	9808      	ldr	r0, [sp, #32]
 800483a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800483c:	f7fb ff6c 	bl	8000718 <__aeabi_dadd>
 8004840:	9a02      	ldr	r2, [sp, #8]
 8004842:	4b4e      	ldr	r3, [pc, #312]	; (800497c <__ieee754_log+0x35c>)
 8004844:	0004      	movs	r4, r0
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800484a:	000d      	movs	r5, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	dd34      	ble.n	80048bc <__ieee754_log+0x29c>
 8004852:	2200      	movs	r2, #0
 8004854:	4b39      	ldr	r3, [pc, #228]	; (800493c <__ieee754_log+0x31c>)
 8004856:	0030      	movs	r0, r6
 8004858:	0039      	movs	r1, r7
 800485a:	f7fc fecd 	bl	80015f8 <__aeabi_dmul>
 800485e:	0032      	movs	r2, r6
 8004860:	003b      	movs	r3, r7
 8004862:	f7fc fec9 	bl	80015f8 <__aeabi_dmul>
 8004866:	0002      	movs	r2, r0
 8004868:	000b      	movs	r3, r1
 800486a:	9002      	str	r0, [sp, #8]
 800486c:	9103      	str	r1, [sp, #12]
 800486e:	0020      	movs	r0, r4
 8004870:	0029      	movs	r1, r5
 8004872:	f7fb ff51 	bl	8000718 <__aeabi_dadd>
 8004876:	9a04      	ldr	r2, [sp, #16]
 8004878:	9b05      	ldr	r3, [sp, #20]
 800487a:	f7fc febd 	bl	80015f8 <__aeabi_dmul>
 800487e:	9b00      	ldr	r3, [sp, #0]
 8004880:	0004      	movs	r4, r0
 8004882:	000d      	movs	r5, r1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <__ieee754_log+0x276>
 8004888:	0002      	movs	r2, r0
 800488a:	000b      	movs	r3, r1
 800488c:	9802      	ldr	r0, [sp, #8]
 800488e:	9903      	ldr	r1, [sp, #12]
 8004890:	f7fd f91e 	bl	8001ad0 <__aeabi_dsub>
 8004894:	e74f      	b.n	8004736 <__ieee754_log+0x116>
 8004896:	4a23      	ldr	r2, [pc, #140]	; (8004924 <__ieee754_log+0x304>)
 8004898:	4b23      	ldr	r3, [pc, #140]	; (8004928 <__ieee754_log+0x308>)
 800489a:	9806      	ldr	r0, [sp, #24]
 800489c:	9907      	ldr	r1, [sp, #28]
 800489e:	f7fc feab 	bl	80015f8 <__aeabi_dmul>
 80048a2:	4a22      	ldr	r2, [pc, #136]	; (800492c <__ieee754_log+0x30c>)
 80048a4:	9000      	str	r0, [sp, #0]
 80048a6:	9101      	str	r1, [sp, #4]
 80048a8:	9806      	ldr	r0, [sp, #24]
 80048aa:	9907      	ldr	r1, [sp, #28]
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <__ieee754_log+0x310>)
 80048ae:	f7fc fea3 	bl	80015f8 <__aeabi_dmul>
 80048b2:	0022      	movs	r2, r4
 80048b4:	002b      	movs	r3, r5
 80048b6:	f7fb ff2f 	bl	8000718 <__aeabi_dadd>
 80048ba:	e754      	b.n	8004766 <__ieee754_log+0x146>
 80048bc:	0002      	movs	r2, r0
 80048be:	000b      	movs	r3, r1
 80048c0:	0030      	movs	r0, r6
 80048c2:	0039      	movs	r1, r7
 80048c4:	f7fd f904 	bl	8001ad0 <__aeabi_dsub>
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	9b05      	ldr	r3, [sp, #20]
 80048cc:	f7fc fe94 	bl	80015f8 <__aeabi_dmul>
 80048d0:	9b00      	ldr	r3, [sp, #0]
 80048d2:	0004      	movs	r4, r0
 80048d4:	000d      	movs	r5, r1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <__ieee754_log+0x2c0>
 80048da:	0002      	movs	r2, r0
 80048dc:	000b      	movs	r3, r1
 80048de:	e72c      	b.n	800473a <__ieee754_log+0x11a>
 80048e0:	4a10      	ldr	r2, [pc, #64]	; (8004924 <__ieee754_log+0x304>)
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <__ieee754_log+0x308>)
 80048e4:	9806      	ldr	r0, [sp, #24]
 80048e6:	9907      	ldr	r1, [sp, #28]
 80048e8:	f7fc fe86 	bl	80015f8 <__aeabi_dmul>
 80048ec:	4a0f      	ldr	r2, [pc, #60]	; (800492c <__ieee754_log+0x30c>)
 80048ee:	9000      	str	r0, [sp, #0]
 80048f0:	9101      	str	r1, [sp, #4]
 80048f2:	9806      	ldr	r0, [sp, #24]
 80048f4:	9907      	ldr	r1, [sp, #28]
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <__ieee754_log+0x310>)
 80048f8:	f7fc fe7e 	bl	80015f8 <__aeabi_dmul>
 80048fc:	0002      	movs	r2, r0
 80048fe:	000b      	movs	r3, r1
 8004900:	0020      	movs	r0, r4
 8004902:	0029      	movs	r1, r5
 8004904:	e733      	b.n	800476e <__ieee754_log+0x14e>
 8004906:	2000      	movs	r0, #0
 8004908:	2100      	movs	r1, #0
 800490a:	e69a      	b.n	8004642 <__ieee754_log+0x22>
 800490c:	c3500000 	.word	0xc3500000
 8004910:	43500000 	.word	0x43500000
 8004914:	7fefffff 	.word	0x7fefffff
 8004918:	fffffc01 	.word	0xfffffc01
 800491c:	00095f64 	.word	0x00095f64
 8004920:	3ff00000 	.word	0x3ff00000
 8004924:	fee00000 	.word	0xfee00000
 8004928:	3fe62e42 	.word	0x3fe62e42
 800492c:	35793c76 	.word	0x35793c76
 8004930:	3dea39ef 	.word	0x3dea39ef
 8004934:	55555555 	.word	0x55555555
 8004938:	3fd55555 	.word	0x3fd55555
 800493c:	3fe00000 	.word	0x3fe00000
 8004940:	fff9eb86 	.word	0xfff9eb86
 8004944:	df3e5244 	.word	0xdf3e5244
 8004948:	3fc2f112 	.word	0x3fc2f112
 800494c:	96cb03de 	.word	0x96cb03de
 8004950:	3fc74664 	.word	0x3fc74664
 8004954:	94229359 	.word	0x94229359
 8004958:	3fd24924 	.word	0x3fd24924
 800495c:	55555593 	.word	0x55555593
 8004960:	3fe55555 	.word	0x3fe55555
 8004964:	d078c69f 	.word	0xd078c69f
 8004968:	3fc39a09 	.word	0x3fc39a09
 800496c:	1d8e78af 	.word	0x1d8e78af
 8004970:	3fcc71c5 	.word	0x3fcc71c5
 8004974:	9997fa04 	.word	0x9997fa04
 8004978:	3fd99999 	.word	0x3fd99999
 800497c:	0006b851 	.word	0x0006b851

08004980 <nan>:
 8004980:	2000      	movs	r0, #0
 8004982:	4901      	ldr	r1, [pc, #4]	; (8004988 <nan+0x8>)
 8004984:	4770      	bx	lr
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	7ff80000 	.word	0x7ff80000

0800498c <_init>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr

08004998 <_fini>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr
